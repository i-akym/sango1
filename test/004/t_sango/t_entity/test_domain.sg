import "sango.debug" -> debug ;;
import "sango.entity" -> ent ;;
import "sango.entity.domain" -> entd ;;
import "sango.io.stdio" -> stdio ;;
import "sango.system.runtime" -> runtime ;;
import "sango.util.avltree.set" -> avlset ;;
import "sango.util.set" -> set ;;

eval _main_ -> <void> {
  test
} ;;

extend <ent.ent_d> := my_ent_d$ ;;

eval test -> <void> {
  test000,
  test001,
  test002,
  test010,
  test021,
  test022,
  test023,
  test030,
  test033,
  void$
} ;;

eval test000 -> <void> { entd.test } ;;
eval test001 -> <void> {
  entd.default_domain = *D,
  D ent.existence$ none$ entd.create_entity >> entd.id_during_alive >> debug.repr >> stdio.print_and_newline,
  D ent.existence$ none$ entd.create_entity >> entd.id_during_alive >> debug.repr >> stdio.print_and_newline,
  D ent.existence$ none$ entd.create_entity >> entd.id_during_alive >> debug.repr >> stdio.print_and_newline,
  D ent.existence$ none$ entd.create_entity >> entd.id_during_alive >> debug.repr >> stdio.print_and_newline,
  D ent.existence$ none$ entd.create_entity >> entd.id_during_alive >> debug.repr >> stdio.print_and_newline,
  stdio.flush
} ;;
eval test002 -> <void> {
  entd.create_domain = *D,
  (int_ord_fs avlset.new_set) &\ <int set.set> *S -> <void> {
    runtime.gc,
    D ent.existence$ none$ entd.create_entity >> entd.id_during_alive = *N,
    S N set.put_new >> case {
    ; (| **, true$ |) -> "entity_h recycled " stdio.print, N debug.repr >> stdio.print_and_newline
    ; (| *S', ** |) -> S' &&
    }
  }
} ;;
eval test010 -> <void> {
  entd.create_domain = *D,
  D ent.existence$ none$ entd.create_entity = *E,
  E entd.read = ent.existence$,
  E my_ent_d$ entd.write = ent.existence$,
  void$
} ;;
eval test021 -> <void> {
  entd.create_domain = *D,
  D ent.existence$ none$ entd.create_entity = *E,
  D E none$ entd.create_weak_holder >> entd.id_during_alive >> debug.repr >> stdio.print_and_newline,
  D E none$ entd.create_weak_holder >> entd.id_during_alive >> debug.repr >> stdio.print_and_newline,
  D E none$ entd.create_weak_holder >> entd.id_during_alive >> debug.repr >> stdio.print_and_newline,
  D E none$ entd.create_weak_holder >> entd.id_during_alive >> debug.repr >> stdio.print_and_newline,
  D E none$ entd.create_weak_holder >> entd.id_during_alive >> debug.repr >> stdio.print_and_newline,
  stdio.flush
} ;;
eval test022 -> <void> {
  entd.create_domain = *D,
  D ent.existence$ none$ entd.create_entity = *E,
  (int_ord_fs avlset.new_set) &\ <int set.set> *S -> <void> {
    runtime.gc,
    D E none$ entd.create_weak_holder >> entd.id_during_alive = *N,
    S N set.put_new >> case {
    ; (| **, true$ |) -> "weak_holder_h recycled " stdio.print, N debug.repr >> stdio.print_and_newline
    ; (| *S', ** |) -> S' &&
    }
  }
} ;;
eval test023 -> <void> {
  entd.create_domain = *D,
  D ent.existence$ none$ entd.create_entity = *E0,
  D ent.existence$ none$ entd.create_entity = *E1,
  entd.entity_ord_fs = *OFs,
  E0 E0 OFs compare = eq$,
  E0 E1 OFs compare = lt$,
  void$
} ;;
eval test030 -> <void> {
  entd.create_domain = *D,
  D ent.existence$ none$ entd.create_entity = *E,
  D E none$ entd.create_weak_holder = *W,
  W entd.get = E value$,
  W entd.clear,
  W entd.get = none$,
  void$
} ;;
eval test033 -> <void> {
  entd.create_domain = *D,
  D ent.existence$ none$ entd.create_entity = *E,
  D E none$ entd.create_weak_holder = *W0,
  D E none$ entd.create_weak_holder = *W1,
  entd.weak_holder_ord_fs = *OFs,
  W0 W0 OFs compare = eq$,
  W0 W1 OFs compare = lt$,
  void$
} ;;
