import "sango.debug" -> debug ;;
import "sango.io.stdio" -> stdio ;;
import "sango.util.set" -> set ;;
import "sango.util.set.hashset" -> hashset ;;
import "testlib.set.1" -> t1 ;;

eval _main_ -> <void> {
  test
} ;;

data <d> := <int> d$ ;;

eval <d> *X _hash_d -> <int> { 3 } ;;  # always return same hash value

eval test -> <void> {
  test000,
  test001,
  test200,
  void$
} ;;

eval test000 -> <void> {
  hashset.new_set >> t1.testA00
} ;;
eval test001 -> <void> {
  hashset.new_set = *S0, 
  S0 set.empty? = true$,
  S0 (1 d$) set.put = (| *S1, none$ |),
  S1 (1 d$) set.put_new = (| S1, false$ |),
  S1 (2 d$) set.put_new = (| *S2, true$ |),
  S2 (2 d$) set.put = (| *S3, (2 d$) value$ |),
  S3 set.size = 2,
  S3 (2 d$) set.contain? = true$,
  S3 (3 d$) set.contain? = false$,
  S3 (3 d$) set.put = (| *S4, none$ |),
  S4 (2 d$) set.remove = (| *S5, (2 d$) value$ |),
  S5 set.take >> case {
  ; (| 1 d$, *S5' |) value$ ->
    S5' set.take = (| 3 d$, *S5'' |) value$,
    S5'' set.take = none$
  ; (| 3 d$, *S5' |) value$ ->
    S5' set.take = (| 1 d$, *S5'' |) value$,
    S5'' set.take = none$
  },
  S5 set.clear >> set.empty? = true$,
  void$
} ;;
eval test200 -> <void> {
  hashset.new_set = <int set.set> *S0,
  S0 t1.testB00
} ;;
