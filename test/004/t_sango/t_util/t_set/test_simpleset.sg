import "sango.actor" -> act ;;
import "sango.debug" -> debug ;;
import "sango.entity" -> ent ;;
import "sango.io" -> io ;;
import "sango.io.stdio" -> stdio ;;
import "sango.system.runtime" -> runtime ;;
import "sango.util.iter" -> iter ;;
import "sango.util.set" -> set ;;
import "sango.util.set.simpleset" -> simpleset ;;

eval _main_ -> <void> {
  runtime.terminate_on_my_abnormal_end,
  test
} ;;

eval test -> <void> {
  simpleset.new_set test001,
  test101,
  test200,
  test300,
  void$
} ;;

eval <int set.set> *S0 test001 @public -> <void> {
  S0 set.empty? = true$,
  S0 1 set.put = (| *S1, none$ |),
  S1 1 set.put_new = (| S1, false$ |),
  S1 2 set.put_new = (| *S2, true$ |),
  S2 2 set.put = (| *S3, 2 value$ |),
  S3 set.size = 2,
  S3 2 set.contain? = true$,
  S3 3 set.contain? = false$,
  S3 3 set.put = (| *S4, none$ |),
  S4 2 set.remove = (| *S5, 2 value$ |),
  S5 set.take >> case {
  ; (| 1, *S5' |) value$ ->
    S5' set.take = (| 3, *S5'' |) value$,
    S5'' set.take = none$
  ; (| 3, *S5' |) value$ ->
    S5' set.take = (| 1, *S5'' |) value$,
    S5'' set.take = none$
  },
  S5 set.clear >> set.empty? = true$,
  S5 [ 4, 5 ] set.add_list = *S6,
  S6 set.size = 4,
  S6 set.iter = *I,
  I next = (| **, *I' |) value$,
  I' next = (| **, *I'' |) value$,
  I'' next = (| **, *I''' |) value$,
  I''' next = (| **, *I'''' |) value$,
  I'''' next = none$,
  S6 [ 4, 5 ] set.delete_list >> set.size = 2,
  void$
} ;;
eval test101 -> <void> {
  simpleset.new_set >> test001
} ;;
eval test200 -> <void> {
  simpleset.new_set [ 1, 3, 5, 7, 9 ] set.add_list = *S,
  S [ 1, 3, 5, 7, 9 ] set.contain_just? = true$,
  S [ 1, 3, 7, 9 ] set.contain_just? = false$,
  S [ 1, 3, 4, 5, 7, 9 ] set.contain_just? = false$,
  void$
} ;;
eval test300 -> <void> {
  simpleset.new_set [ 2, 3, 4, 5, 6 ] set.add_list = *S0,
  simpleset.new_set [ 1, 3, 5, 7 ] set.add_list = *S1,
  (S0 S1 set.intersection) [ 3, 5 ] set.contain_just? = true$,
  (S0 S1 set.difference) [ 2, 4, 6 ] set.contain_just? = true$,
  void$
} ;;
