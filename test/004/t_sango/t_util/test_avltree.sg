import "sango.debug" -> debug ;;
import "sango.io" -> io ;;
import "sango.io.stdio" -> stdio ;;
import "sango.list" -> list ;;
import "sango.system.runtime" -> runtime ;;
import "sango.util.avltree" -> avl ;;

eval _main_ -> <void> {
  runtime.terminate_on_my_abnormal_end,
  test
} ;;

eval test -> <void> {
  test001,
  test002,
  test003,
  test004,
  test011,
  test021,
  test022,
  test031,
  test101,
  void$
} ;;

eval test001 -> <void> {
  int_ord_fs avl.new_tree = *T0,
  T0 avl.empty? = true$,
  T0 avl.size = 0,
  T0 100 -100 avl.put = (| *T1, none$ |),
  T1 avl.size = 1,
  T1 120 -120 avl.put = (| *T2, none$ |),
  T2 avl.size = 2,
  T2 140 -140 avl.put = (| *T3, none$ |),
  T3 avl.size = 3,
  T3 160 -160 avl.put = (| *T4, none$ |),
  T4 avl.size = 4,
  T4 180 -180 avl.put = (| *T5, none$ |),
  T5 avl.size = 5,
  T5 200 -200 avl.put = (| *T6, none$ |),
  T6 avl.size = 6,
  # T6 debug.repr >> stdio.print_and_newline,
  void$
} ;;
eval test002 -> <void> {
  int_ord_fs avl.new_tree = *T0,
  T0 avl.empty? = true$,
  T0 avl.size = 0,
  T0 100 -100 avl.put = (| *T1, none$ |),
  T1 avl.size = 1,
  T1 80 -80 avl.put = (| *T2, none$ |),
  T2 avl.size = 2,
  T2 60 -60 avl.put = (| *T3, none$ |),
  T3 avl.size = 3,
  T3 40 -40 avl.put = (| *T4, none$ |),
  T4 avl.size = 4,
  T4 20 -20 avl.put = (| *T5, none$ |),
  T5 avl.size = 5,
  T5 0 0 avl.put = (| *T6, none$ |),
  T6 avl.size = 6,
  # T6 debug.repr >> stdio.print_and_newline,
  void$
} ;;
eval test003 -> <void> {
  int_ord_fs avl.new_tree = *T0,
  T0 avl.empty? = true$,
  T0 avl.size = 0,
  T0 100 -100 avl.put = (| *T1, none$ |),
  T1 avl.size = 1,
  T1 200 -200 avl.put = (| *T2, none$ |),
  T2 avl.size = 2,
  T2 120 120 avl.put = (| *T3, none$ |),
  T3 avl.size = 3,
  T3 180 -180 avl.put = (| *T4, none$ |),
  T4 avl.size = 4,
  T4 140 -140 avl.put = (| *T5, none$ |),
  T5 avl.size = 5,
  T5 160 -160 avl.put = (| *T6, none$ |),
  T6 avl.size = 6,
  # T6 debug.repr >> stdio.print_and_newline,
  void$
} ;;
eval test004 -> <void> {
  int_ord_fs avl.new_tree = *T0,
  T0 avl.empty? = true$,
  T0 avl.size = 0,
  T0 100 -100 avl.put = (| *T1, none$ |),
  T1 avl.size = 1,
  T1 0 0 avl.put = (| *T2, none$ |),
  T2 avl.size = 2,
  T2 80 -80 avl.put = (| *T3, none$ |),
  T3 avl.size = 3,
  T3 20 -20 avl.put = (| *T4, none$ |),
  T4 avl.size = 4,
  T4 60 -60 avl.put = (| *T5, none$ |),
  T5 avl.size = 5,
  T5 40 40 avl.put = (| *T6, none$ |),
  T6 avl.size = 6,
  # T6 debug.repr >> stdio.print_and_newline,
  void$
} ;;
eval test011 -> <void> {
  (int_ord_fs avl.new_tree)
  [ 40, 20, 60, 10, 30, 50, 70 ]
  \ <*A A avl.tree> *T <A> *KV -> <A A avl.tree> { T KV KV avl.add }
  list.fold = *T0,
  T0 40 avl.assoc = 40 value$,
  T0 20 avl.assoc = 20 value$,
  T0 60 avl.assoc = 60 value$,
  T0 10 avl.assoc = 10 value$,
  T0 30 avl.assoc = 30 value$,
  T0 50 avl.assoc = 50 value$,
  T0 70 avl.assoc = 70 value$,
  void$
} ;;
eval test021 -> <void> {
  (int_ord_fs avl.new_tree)
  [ 40, 20, 60, 10, 30, 50, 70 ]
  \ <*A A avl.tree> *T <A> *KV -> <A A avl.tree> { T KV KV avl.add }
  list.fold = *T0,
  T0 5 avl.remove = (| *T05, none$ |),  # T05 debug.repr >> stdio.print_and_newline,
  T0 15 avl.remove = (| *T15, none$ |),  # T15 debug.repr >> stdio.print_and_newline,
  T0 25 avl.remove = (| *T25, none$ |),  # T25 debug.repr >> stdio.print_and_newline,
  T0 35 avl.remove = (| *T35, none$ |),  # T35 debug.repr >> stdio.print_and_newline,
  T0 45 avl.remove = (| *T45, none$ |),  # T45 debug.repr >> stdio.print_and_newline,
  T0 55 avl.remove = (| *T55, none$ |),  # T55 debug.repr >> stdio.print_and_newline,
  T0 65 avl.remove = (| *T65, none$ |),  # T65 debug.repr >> stdio.print_and_newline,
  T0 75 avl.remove = (| *T75, none$ |),  # T75 debug.repr >> stdio.print_and_newline,
  T0 10 avl.remove = (| *T10, (| 10, 10 |) value$ |),  # T10 debug.repr >> stdio.print_and_newline,
  T0 30 avl.remove = (| *T30, (| 30, 30 |) value$ |),  # T30 debug.repr >> stdio.print_and_newline,
  T0 50 avl.remove = (| *T50, (| 50, 50 |)  value$ |),  # T50 debug.repr >> stdio.print_and_newline,
  T0 70 avl.remove = (| *T70, (| 70, 70 |) value$ |),  # T70 debug.repr >> stdio.print_and_newline,
  T0 20 avl.remove = (| *T20, (| 20, 20 |) value$ |),  # T20 debug.repr >> stdio.print_and_newline,
  T0 60 avl.remove = (| *T60, (| 60, 60 |) value$ |),  # T60 debug.repr >> stdio.print_and_newline,
  T0 40 avl.remove = (| *T40, (| 40, 40 |) value$ |),  # T40 debug.repr >> stdio.print_and_newline,
  void$
} ;;
eval test022 -> <void> {
  (int_ord_fs avl.new_tree)
  [ 40, 20, 60, 10, 30, 50, 70 ]
  \ <*A A avl.tree> *T <A> *KV -> <A A avl.tree> { T KV KV avl.add }
  list.fold = *T0,
  T0 40 avl.delete = *T1,
  T1 20 avl.delete = *T2,
  T2 60 avl.delete = *T3,
  T3 10 avl.delete = *T4,
  T4 30 avl.delete = *T5,
  T5 50 avl.delete = *T6,
  T6 70 avl.delete = *T7,
  T7 avl.empty? = true$,
  void$
} ;;
eval test031 -> <void> {
  (int_ord_fs avl.new_tree)
  [ 40, 20, 60, 10, 30, 50, 70 ]
  \ <*A A avl.tree> *T <A> *KV -> <A A avl.tree> { T KV KV avl.add }
  list.fold = *T0,
  T0 avl.take = (| (| 10, 10 |), *T1 |) value$,
  T1 avl.take = (| (| 20, 20 |), *T2 |) value$,
  T2 avl.take = (| (| 30, 30 |), *T3 |) value$,
  T3 avl.take = (| (| 40, 40 |), *T4 |) value$,
  T4 avl.take = (| (| 50, 50 |), *T5 |) value$,
  T5 avl.take = (| (| 60, 60 |), *T6 |) value$,
  T6 avl.take = (| (| 70, 70 |), *T7 |) value$,
  T7 avl.take = none$,
  void$
} ;;
eval test101 -> <void> {
  int_ord_fs avl.new_tree = *T0,
  T0 avl.empty? = true$,
  T0 1 "abc" avl.put = (| *T1, none$ |),
  T1 1 "ABC" avl.put_new = (| T1, false$ |),
  T1 2 "def" avl.put_new = (| *T2, true$ |),
  T2 2 "DEF" avl.put = (| *T3, (| 2, "def" |) value$ |),
  T3 avl.size = 2,
  T3 2 avl.assoc = "DEF" value$,
  T3 3 "ghi" avl.put = (| *T4, none$ |),
  T4 avl.size = 3,
  T4 2 avl.remove = (| *T5, (| 2, "DEF" |) value$ |),
  T5 avl.take = (| (| 1, "abc" |), *T5' |) value$,
  T5' avl.take = (| (| 3, "ghi" |), *T5'' |) value$,
  T5'' avl.take = none$,
  T5  avl.clear >> avl.empty? = true$,
  T5 [ (| 4, "jkl" |), (| 5, "mno" |) ] avl.add_list = *T6,
  T6 avl.size = 4,
  void$
} ;;
