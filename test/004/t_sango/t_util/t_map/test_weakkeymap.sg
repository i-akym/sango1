import "sango.actor" -> act ;;
import "sango.debug" -> debug ;;
import "sango.entity.box" -> box ;;
import "sango.entity.existence" -> ex ;;
import "sango.io.stdio" -> stdio ;;
import "sango.system.runtime" -> runtime ;;
import "sango.util.iter" -> iter ;;
import "sango.util.map" -> map ;;
import "sango.util.map.box" -> map_box ;;
import "sango.util.map.weakkeymap" -> wkm ;;

eval _main_ -> <void> {
  test,
  stdio.flush
} ;;

eval test -> <void> {
  test000,
  test010,
  void$
} ;;

eval make -> <<int box.box_h> cstr wkm.map_h> {
  (&\\ <<int box.box_h> ex.dress_fs> { box.dress_fs }) (&\\ <cstr cstr fun> { ^itself }) wkm.create_weak_key_map = *M,
  1 (\\ <void> { "1 box purged." stdio.print_and_newline, stdio.flush } value$) box.create_box = *K1, M K1 "a" wkm.add,
  2 (\\ <void> { "2 box purged." stdio.print_and_newline, stdio.flush } value$) box.create_box = *K2, M K2 "b" wkm.add,
  3 (\\ <void> { "3 box purged." stdio.print_and_newline, stdio.flush } value$) box.create_box = *K3, M K3 "c" wkm.add,
  4 (\\ <void> { "4 box purged." stdio.print_and_newline, stdio.flush } value$) box.create_box = *K4, M K4 "d" wkm.add,
  5 (\\ <void> { "5 box purged." stdio.print_and_newline, stdio.flush } value$) box.create_box = *K5, M K5 "e" wkm.add,
  M
} ;;

eval test000 -> <void> {
  (&\\ <<int box.box_h> ex.dress_fs> { box.dress_fs }) (&\\ <cstr cstr fun> { ^itself }) wkm.create_weak_key_map = *M,
  1 none$ box.create_box = *K1,
  2 none$ box.create_box = *K2,
  3 none$ box.create_box = *K3,
  4 none$ box.create_box = *K4,
  5 none$ box.create_box = *K5,
  M wkm.empty? = true$,
  M K1 "abc" wkm.put = none$,
  M K1 "ABC" wkm.put_new = false$,
  M K2 "def" wkm.put_new = true$,
  M K2 "DEF" wkm.put = (| K2, "def" |) value$,
  M wkm.size = 2,
  M K2 wkm.get = (| K2, "DEF" |) value$,
  M K2 wkm.assoc = "DEF" value$,
  M wkm.all_kvs >> case {
  ; [ (| K1, "abc" |), (| K2, "DEF" |) ] ->
  ; [ (| K2, "DEF" |), (| K1, "abc" |) ] ->
  },
  M K3 "ghi" wkm.put = none$,
  M K2 wkm.remove = (| K2, "DEF" |) value$,
  M wkm.clear,
  M wkm.empty? = true$,
  M [ (| K3, "ghi" |), (| K4, "jkl" |), (| K5, "mno" |) ] wkm.add_list,
  M wkm.size = 3,
  M wkm.take >> something? = true$,
  M wkm.take >> something? = true$,
  M wkm.take >> something? = true$,
  M wkm.take >> something? = false$,
  M wkm.empty? = true$,
  M [ (| K3, "ghi" |), (| K4, "jkl" |), (| K5, "mno" |) ] wkm.add_list,
  M [ K3, K4 ] wkm.delete_list,
  M wkm.size = 1,
  void$
} ;;
eval test010 -> <void> {
  make = *M,
  6 (\\ <void> { "6 box purged." stdio.print_and_newline, stdio.flush } value$) box.create_box = *K6, M K6 "f" wkm.add,
  7 (\\ <void> { "7 box purged." stdio.print_and_newline, stdio.flush } value$) box.create_box = *K7, M K7 "g" wkm.add,
  M wkm.all_kvs >> debug.repr >> stdio.print_and_newline,
  runtime.gc,
  act.yield,
  M wkm.all_kvs >> debug.repr >> stdio.print_and_newline,
  K6,  # keep to here
  K7,  # keep to here
  void$
} ;;
