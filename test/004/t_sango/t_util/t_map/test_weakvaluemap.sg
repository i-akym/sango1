import "sango.actor" -> act ;;
import "sango.debug" -> debug ;;
import "sango.entity.box" -> box ;;
import "sango.entity.existence" -> ex ;;
import "sango.io.stdio" -> stdio ;;
import "sango.system.runtime" -> runtime ;;
import "sango.util.iter" -> iter ;;
import "sango.util.map" -> map ;;
import "sango.util.map.box" -> map_box ;;
import "sango.util.map.simplemap" -> smap ;;
import "sango.util.map.weakvaluemap" -> wvm ;;

eval _main_ -> <void> {
  test,
  stdio.flush
} ;;

eval test -> <void> {
  test000,
  test010,
  void$
} ;;

eval make -> <cstr <int box.box_h> wvm.map_h> {
  (&\\ <cstr <int box.box_h> wvm.container> { smap.new_map }) (&\\ <<int box.box_h> ex.dress_fs> { box.dress_fs })
    wvm.create_weak_value_map = *M,
  1 (\\ <void> { "1 box purged." stdio.print_and_newline, stdio.flush } value$) box.create_box = *V1, M "a" V1 wvm.add,
  2 (\\ <void> { "2 box purged." stdio.print_and_newline, stdio.flush } value$) box.create_box = *V2, M "b" V2 wvm.add,
  3 (\\ <void> { "3 box purged." stdio.print_and_newline, stdio.flush } value$) box.create_box = *V3, M "c" V3 wvm.add,
  4 (\\ <void> { "4 box purged." stdio.print_and_newline, stdio.flush } value$) box.create_box = *V4, M "d" V4 wvm.add,
  5 (\\ <void> { "5 box purged." stdio.print_and_newline, stdio.flush } value$) box.create_box = *V5, M "e" V5 wvm.add,
  M
} ;;

eval test000 -> <void> {
  (&\\ <cstr <int box.box_h> wvm.container> { smap.new_map }) (&\\ <<int box.box_h> ex.dress_fs> { box.dress_fs })
    wvm.create_weak_value_map = *M,
  1 none$ box.create_box = *V1,
  2 none$ box.create_box = *V2,
  3 none$ box.create_box = *V3,
  4 none$ box.create_box = *V4,
  5 none$ box.create_box = *V5,
  M wvm.empty? = true$,
  M "abc" V1 wvm.put = none$,
  M "abc" V1 wvm.put_new = false$,
  M "def" V2 wvm.put_new = true$,
  M "def" V1 wvm.put = (| "def", V2 |) value$,
  M wvm.size = 2,
  M "def" wvm.get = (| "def", V1 |) value$,
  M "def" wvm.assoc = V1 value$,
  M wvm.all_kvs >> case {
  ; [ (| "abc", V1 |), (| "def", V1 |) ] ->
  ; [ (| "def", V1 |), (| "abc", V1 |) ] ->
  },
  M "ghi" V3 wvm.put = none$,
  M "ghi" wvm.remove = (| "ghi", V3 |) value$,
  M wvm.clear,
  M wvm.empty? = true$,
  M [ (| "ghi", V3 |), (| "jkl", V4 |), (| "mno", V5 |) ] wvm.add_list,
  M wvm.size = 3,
  M wvm.take >> something? = true$,
  M wvm.take >> something? = true$,
  M wvm.take >> something? = true$,
  M wvm.take >> something? = false$,
  M wvm.empty? = true$,
  M [ (| "ghi", V3 |), (| "jkl", V4 |), (| "mno", V5 |) ] wvm.add_list,
  M [ "ghi", "jkl" ] wvm.delete_list,
  M wvm.size = 1,
  void$
} ;;
eval test010 -> <void> {
  make = *M,
  6 (\\ <void> { "6 box purged." stdio.print_and_newline, stdio.flush } value$) box.create_box = *V6, M "f" V6 wvm.add,
  7 (\\ <void> { "7 box purged." stdio.print_and_newline, stdio.flush } value$) box.create_box = *V7, M "g" V7 wvm.add,
  M wvm.all_kvs >> debug.repr >> stdio.print_and_newline,
  runtime.gc,
  act.yield,
  M wvm.all_kvs >> debug.repr >> stdio.print_and_newline,
  V6,  # keep to here
  V7,  # keep to here
  void$
} ;;
