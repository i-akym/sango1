import "sango.debug" -> debug ;;
import "sango.io.stdio" -> stdio ;;
import "sango.system.runtime" -> runtime ;;
import "sango.util.iter" -> iter ;;
import "sango.util.map" -> map ;;
import "sango.util.map.holder" -> map_holder ;;
import "sango.util.map.simplemap" -> simplemap ;;

eval _main_ -> <void> {
  runtime.terminate_on_my_abnormal_end,
  test
} ;;

eval test -> <void> {
  new_map seal_fs map_holder.create_holder = *M,
  M test001,
  void$
} ;;

eval new_map -> <int cstr map.map> {
  simplemap.new_map
} ;;

extend <independent> -> shared_d := <int cstr map.map> s$ ;;

eval seal_fs -> <<int cstr map.map> seal_fs> {
  seal_f: \ <int cstr map.map> *D -> <shared_d> { D s$ }
    unseal_f: \ <independent+> *S -> <<int cstr map.map> maybe> { S case { *D s$ -> D value$ ; ** -> none$ } }
    seal_fs$
} ;;

eval <int cstr map_holder.holder_h> *M test001 -> <void> {
  M map_holder.empty? = true$,
  M 1 "abc" map_holder.put = none$,
  M 1 "ABC" map_holder.put_new = false$,
  M 2 "def" map_holder.put_new = true$,
  M 2 "DEF" map_holder.put = (| 2, "def" |) value$,
  M map_holder.size = 2,
  M 2 map_holder.get = (| 2, "DEF" |) value$,
  M 2 map_holder.assoc = "DEF" value$,
  M 3 "ghi" map_holder.put = none$,
  M 2 map_holder.remove = (| 2, "DEF" |) value$,
  M map_holder.take >> case {
  ; (| 1, "abc" |) value$ ->
    M map_holder.take = (| 3, "ghi" |) value$,
    M map_holder.take = none$
  ; (| 3, "ghi" |) value$ ->
    M map_holder.take = (| 1, "abc" |) value$,
    M map_holder.take = none$
  },
  M map_holder.clear,
  M map_holder.empty? = true$,
  M [ (| 4, "jkl" |), (| 5, "mno" |) ] map_holder.add_list,
  M map_holder.read = *MD,
  MD map.size = 2,
  M 5 map_holder.delete,
  M map_holder.size = 1,
  M MD map_holder.write,
  M map_holder.size = 2,
  void$
} ;;
