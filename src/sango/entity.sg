###########################################################################
# MIT License                                                             #
# Copyright (c) 2025 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.entity" ;;

import "sango.entity.existence" -> ex ;;
import "sango.unique" -> uniq ;;

alias type <*A undress_f> @public := <A <ex.existence <A redress_f> tuple> fun> ;;
alias type <*A redress_f> @public := <ex.existence A fun> ;;

data <*A entity_fs> @public :=
  undress_f: <A undress_f>
  entity_fs$ ;;


### feature

feature @beta <*T> [ a'entity ] @public -> <T entity_fs> ;;

eval @beta <*T[ a'entity ]> *FEntity f_undress | undress @public -> <ex.existence <T redress_f> tuple> {
  FEntity _feature_a'entity = *UF entity_fs$,
  FEntity &UF
} ;;


### incarnation

data <*T entity_inc> @protected :=
  org: <T>
  fo: <T entity_fs>
  entity_inc$
++ as_a'unique -> [ uniq.a'unique ] ;;  # @beta

eval <*T[ a'entity ]> *FEntity incarnate @public -> <T entity_inc> {
  org: FEntity
  fo: (FEntity _feature_a'entity)
  entity_inc$
} ;;

eval as_a'unique -> <<*T entity_inc> uniq.u fun> {
  \ <*TT entity_inc> *I -> <uniq.u> {
    I = org: *E fo: *Fs entity_inc$,
    E &(Fs undress_f) = (| *Ex, ** |),
    Ex ex.uniqueness
  }
} ;;
