###########################################################################
# MIT License                                                             #
# Copyright (c) 2021 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.entity" ;;

import "sango.entity.box" -> box ;;
import "sango.entity.existence" -> ex ;;

extend <independent> -> ent_d @public :=
| existence$ ;;

alias type <eref> @public := <ent_d+ box.box_h> ;;
alias type <wref> @public := <ent_d+ box.wbox_h> ;;

eval <ent_d+> *X <<void fun> maybe> *Invalidator_ create_entity @public -> <eref> {
  X Invalidator_ box.create_box
} ;;

eval <eref> *Entity existence @public -> <ex.existence> {
  Entity box.existence
} ;;

eval <eref> *Entity read @public -> <ent_d+> {
  Entity box.read
} ;;

eval <eref> *Entity <ent_d+> *X write | swap @public -> <ent_d+> {
  Entity X box.write
} ;;

eval <eref> *Entity <<wref void fun> maybe> *Listener_ create_weak_holder @public -> <wref> {
  Entity Listener_ box.create_weak_holder
} ;;

eval <wref> *W get @public -> <eref maybe> {
  W box.get
} ;;

eval <wref> *W clear @public -> <void> {
  W box.clear
} ;;
