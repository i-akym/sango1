###########################################################################
# MIT License                                                             #
# Copyright (c) 2018 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.debug" ;;

import "sango.cstr" -> cstr ;;
import "sango.io" -> io ;;
import "sango.list" -> list ;;
import "sango.string" -> str ;;

# -- object representation for debugging --

eval <*A> *X repr @public -> <cstr> @native ;;

# -- assertion --

eval check_assertion? @public -> <bool> @native ;;

eval <bool> *Check_assertion <bool fun> *Assertion <cstr> *Msg assert @public -> <void> {
  Check_assertion case {
  ; true$ -> 
    Assertion eval >> case {
    ; true$ ->
    ; ** -> assertion_error$ Msg new_exception >> throw
    }
  ; ** ->
  }
} ;;

eval <bool fun> *Assertion <cstr> *Msg assert_always @public -> <void> {
  true$ Assertion Msg assert
} ;;

eval <bool fun> *Assertion <cstr> *Msg assert_on_demand @public -> <void> {
  check_assertion? Assertion Msg assert
} ;;


# -- exception --

data <frame> @protected := mod: <cstr> name: <cstr> loc_: <cstr maybe> transferred: <bool> frame$ ;;

eval <exc_info> *EI call_stack @public -> <frame list> @native ;;

eval <exception> *Exc <io.print_stream_h> *Out dump_exception_to | dump_to @public -> <void> {
  Out Exc true$ dump_exception
} ;;

eval <io.print_stream_h> *Out <exception> *Exc <bool> *Current dump_exception -> <void> {
  Exc = *Desc *Msg *Info *Org exception$,
  Out "Exception " io.print,
  Out (Desc repr) io.print,
  Out " " io.print,
  Out Msg io.print_and_newline,
  Out Info dump_exc_info,
  Org case {
  ; *E value$ -> Out "Caused by..." io.print_and_newline, Out E false$ &&
  ; ** ->
  }
} ;;

eval <io.print_stream_h> *Out <exc_info> *Info dump_exc_info -> <void> {
  Out "Call stack:" io.print_and_newline,
  (Info call_stack)
    \ <frame> *F -> <void> { Out F dump_frame }
    list.map >> ignore
} ;;

eval <io.print_stream_h> *Out <frame> *F dump_frame -> <void> {
  F = *Mod *Name *Loc_ *Trans frame$,
  Trans case {
  ; true$ -> Out "  * " io.print
  ; ** -> Out "    " io.print
  },
  Out (Mod cstr.repr) io.print,
  Out "." io.print,
  Out Name io.print,
  Loc_ case {
  ; *L value$ -> Out " at " io.print, Out L io.print
  ; ** ->
  },
  Out io.newline
} ;;
