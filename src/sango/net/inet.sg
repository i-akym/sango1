###########################################################################
# MIT License                                                             #
# Copyright (c) 2018 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module @alpha "sango.net.inet" ;;

import "sango.entity.box" -> box ;;
import "sango.net.socket" -> soc ;;
import "sango.io" -> io ;;

# -- node address --

data <addr> @protected :=
  <cstr> name_addr$ ;;

eval <cstr> *Addr addr @public -> <addr> {
  Addr name_addr$
} ;;


# -- socket --

# pointer to native object

data <connection_socket_impl_p> := @native ;;
data <server_socket_impl_p> := @native ;;
data <datagram_socket_impl_p> := @native ;;

# connection socket

eval create_connection_socket_impl -> <connection_socket_impl_p> @native ;;
eval <connection_socket_impl_p> *CSI <addr> *Addr <int> *Port <int> *timeout csi_connect -> <void> @native ;;
eval <connection_socket_impl_p> *CSI csi_instream -> <byte io.instream_h> @native ;;
eval <connection_socket_impl_p> *CSI csi_outstream -> <byte io.outstream_h> @native ;;
eval <connection_socket_impl_p> *CSI csi_close -> <void> @native ;;
eval <connection_socket_impl_p> *CSI csi_open? -> <bool> @native ;;
eval <connection_socket_impl_p> *CSI <cstr> *Key csi_opt -> <soc.socket_opt_value+> @native ;;
eval <connection_socket_impl_p> *CSI <cstr> *Key <soc.socket_opt_value+> *Value csi_set_opt -> <void> @native ;;
eval <connection_socket_impl_p> *CSI csi_opt_keys -> <cstr list> @native ;;

data <connection_socket_h> @opaque :=
  impl: <connection_socket_impl_p box.box_h>
  connection_socket_h$ ;;

eval create_connection_socket @public -> <connection_socket_h> {
  create_connection_socket_impl >> csi_socket_h
} ;;

eval <connection_socket_impl_p> *CSI csi_socket_h -> <connection_socket_h> {
  \\ <void> { \\ <void> { CSI csi_close } try >> ignore } = *Inv,
  impl: (CSI (Inv value$) box.create_box) connection_socket_h$
} ;;

eval <connection_socket_h> *CS <addr> *Addr <int> *Port <int> *Timeout cs_connect | connect @public -> <void> {
  (CS impl >> box.read) Addr Port Timeout csi_connect
} ;;

eval <connection_socket_h> *CS cs_instream | instream @public -> <byte io.instream_h> {
  (CS impl >> box.read) csi_instream
} ;;

eval <connection_socket_h> *CS cs_outstream | outstream @public -> <byte io.outstream_h> {
  (CS impl >> box.read) csi_outstream
} ;;

eval <connection_socket_h> *CS cs_close | close @public -> <void> {
  (CS impl >> box.read) csi_close
} ;;

eval <connection_socket_h> *CS cs_abstract_socket | abstract_socket @public -> <byte soc.socket_h> {
  CS impl >> box.read = *CSI,
  instream_f: \\ <byte io.instream_h> { CSI csi_instream }
    outstream_f: \\ <byte io.outstream_h> { CSI csi_outstream }
    close_f: \\ <void> { CSI csi_close }
    open?_f: \\ <bool> { CSI csi_open? }
    opt_f: \ <cstr> *Key -> <soc.socket_opt_value+> { CSI Key csi_opt }
    set_opt_f: \ <cstr> *Key <soc.socket_opt_value+> *Value -> <void> { CSI Key Value csi_set_opt }
    opt_keys_f: \\ <cstr list> { CSI csi_opt_keys }
    soc.socket_h$
} ;;

# server socket (connection request listener socket)

eval <int> *Port create_server_socket_impl -> <server_socket_impl_p> @native ;;
eval <server_socket_impl_p> *SSI ssi_accept -> <connection_socket_impl_p> @native ;;
eval <server_socket_impl_p> *SSI ssi_close -> <void> @native ;;
eval <server_socket_impl_p> *SSI ssi_open? -> <bool> @native ;;
eval <server_socket_impl_p> *SSI <cstr> *Key ssi_opt -> <soc.socket_opt_value+> @native ;;
eval <server_socket_impl_p> *SSI <cstr> *Key <soc.socket_opt_value+> *Value ssi_set_opt -> <void> @native ;;
eval <server_socket_impl_p> *SSI ssi_opt_keys -> <cstr list> @native ;;

data <server_socket_h> @opaque :=
  impl: <server_socket_impl_p box.box_h>
  server_socket_h$ ;;

eval <int> *Port create_server_socket @public -> <server_socket_h> {
  Port create_server_socket_impl = *SSI,
  \\ <void> { \\ <void> { SSI ssi_close } try >> ignore } = *Inv,
  impl: (SSI (Inv value$) box.create_box) server_socket_h$
} ;;

eval <server_socket_h> *SS server_socket_accept | accept @public -> <connection_socket_h> {
  (SS impl >> box.read) ssi_accept >> csi_socket_h
} ;;

eval <server_socket_h> *SS server_socket_close | close @public -> <void> {
  (SS impl >> box.read) ssi_close
} ;;

# datagram socket (send/receive UDP message)

data <datagram_socket_h> @opaque :=
  impl: <datagram_socket_impl_p box.box_h>
  datagram_socket_h$ ;;

eval <int> *Port create_datagram_socket_impl -> <datagram_socket_impl_p> @native ;;
eval <datagram_socket_impl_p> *DSI <int> *Len dsi_receive -> <<addr int bstr tuple> maybe> @native ;;
eval <datagram_socket_impl_p> *DSI <addr> *Addr <int> *Port <bstr> *Data dsi_send -> <void> @native ;;
eval <datagram_socket_impl_p> *DSI dsi_close -> <void> @native ;;

eval <int> *Port create_datagram_socket @public -> <datagram_socket_h> {
  Port create_datagram_socket_impl = *DSI,
  \\ <void> { \\ <void> { DSI dsi_close } try >> ignore } = *Inv,
  impl: (DSI (Inv value$) box.create_box) datagram_socket_h$
} ;;

eval <datagram_socket_h> *DS <int> *Len datagram_socket_receive | receive @public -> <<addr int bstr tuple> maybe> {
  (DS impl >> box.read) Len dsi_receive
} ;;

eval <datagram_socket_h> *DS <addr> *Addr <int> *Port <bstr> *Data datagram_socket_send | send @public -> <void> {
  (DS impl >> box.read) Addr Port Data dsi_send
} ;;

eval <datagram_socket_h> *DS datagram_close | close @public -> <void> {
  (DS impl >> box.read) dsi_close
} ;;
