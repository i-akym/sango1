###########################################################################
# MIT License                                                             #
# Copyright (c) 2018 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.char" ;;

import "sango.cstr" -> cstr ;;

eval <char> *C space? @public -> <bool> {
  C case {
  ; '\t' | '\n' | '\r' | '`u20;' -> true$
  ; ** -> false$
  }
} ;;

eval <char> *C upper_case @public -> <char> @native ;;
eval <char> *C lower_case @public -> <char> @native ;;

eval <char> *C0 <char> *C1 eq_ignore_case? @public -> <bool> {
  C0 case {
  ; C1 -> true$
  ; ** -> (C0 upper_case) (C1 upper_case) hard_eq?
  }
} ;;

eval eq_ignore_case_fs @public -> <char eq_fs> {
  eq?_f: ^eq_ignore_case?
    ne?_f_: none$
    hash_f: \ <char> *C -> <int> { C upper_case >> hash }
    eq_fs$
} ;;

data <repr_context> @public :=
| as_char$
| in_cstr$ ;;

eval <char> *Char <repr_context> *Ctx raw_repr @public -> <cstr> {
  Char case {
  ; '\\' -> "\\\\"
  ; '\n' -> "\\n"
  ; '\r' -> "\\r"
  ; '\t' -> "\\t"
  ; '\'' ->
    Ctx case {
    ; as_char$ -> "\\'"
    ; ** -> "'"
    }
  ; '"' ->
    Ctx case {
    ; in_cstr$ -> "\\\""
    ; ** -> "\""
    }
  ; '``' -> "````"
  ; *C -> [| C |]
  }
} ;;

eval <char> *Char repr @public -> <cstr> {
  [ "'", Char as_char$ raw_repr, "'" ] cstr.concat
} ;;
