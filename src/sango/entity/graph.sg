###########################################################################
# MIT License                                                             #
# Copyright (c) 2021 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module @alpha "sango.entity.graph" ;;

import "sango.entity.existence" -> ex ;;
import "sango.list" -> list ;;
import "sango.tuple" -> tuple ;;
import "sango.util.map" -> map ;;
import "sango.util.map.hashmap" -> hmap ;;
import "sango.util.map.simplemap" -> smap ;;
import "sango.util.set" -> set ;;
import "sango.util.set.hashset" -> hset ;;
import "sango.util.set.simpleset" -> sset ;;

data <*A graph> @opaque :=
  undress_f: <A ex.undress_f>
  tab: <A tab>
  graph$ ;;

alias type <*A tab> := <ex.existence <A n> map.map> ;;

data <*A n> :=
  redress_f: <A ex.redress_f>
  weak_ref: <ex.weak_ref>
  link_tab: <cstr ex.weak_ref map.map>
  refs: <<ex.weak_ref cstr tuple> set.set>
  n$ ;;

eval <*A! ex.dress_fs> *Dress_fs create_graph @public -> <A graph> {
  undress_f: (Dress_fs ex.undress_f)
    tab: hmap.new_map
    graph$
} ;;

eval <*A graph> *Graph graph_nodes | nodes @public -> <A list> {
  (Graph tab >> map.iter >> list.new_list)
    \ <ex.existence <A n> tuple> *EN -> <A> {
      EN = (| *Ex, redress_f: *Redress_f *** n$ |),
      Ex &Redress_f
    }
    list.map
} ;;

eval <*A graph> *Graph <A> *Node contain? @public -> <bool> {
  Graph = undress_f: *Undress_f tab: *Tab *** graph$,
  Node &Undress_f = (| *Ex, ** |),
  Tab Ex map.contain_key?
} ;;

eval <*A graph> *Graph <A> *Node ensure_in_graph -> <void> {
  Graph Node contain? >> case {
  ; true$ ->
  ; ** -> bad_arg$ "Out of graph." new_exception >> throw
  }
} ;;

eval <*A graph> *Graph <A> *Node include @public -> <A graph> {
  Graph = undress_f: *Undress_f tab: *Tab *** graph$,
  Node &Undress_f = (| *Ex, *Redress_f |),
  Tab Ex map.contain_key? >> case {
  ; true$ -> Tab
  ; ** ->
    Tab Ex
      (redress_f: Redress_f weak_ref: (Ex none$ ex.create_weak_ref) link_tab: smap.new_map refs: sset.new_set n$)
      map.add
  } = *Tab',
  tab: Tab' :: Graph graph$
} ;;

eval <*A graph> *Graph <A> *Node node_links | links @public -> <cstr list> {
  Graph Node ensure_in_graph,
  Graph = undress_f: *Undress_f tab: *Tab *** graph$,
  Node &Undress_f = (| *Ex, ** |),
  Tab Ex map.assoc >> value >> link_tab = *LT,
  (LT map.iter >> list.new_list) ^tuple.pair_first list.map
} ;;

eval <*A graph> *Graph <A> *Node <cstr> *Tag traverse @public -> <A maybe> {
  Graph Node ensure_in_graph,
  Graph = undress_f: *Undress_f tab: *Tab *** graph$,
  Node &Undress_f = (| *Ex, ** |),
  Tab Ex map.assoc >> case {
  ; (link_tab: *LT *** n$) value$ ->
    LT Tag map.assoc >> case {
    ; *W value$ ->
      W ex.get >> value = *To_ex,
      Tab To_ex map.assoc >> value >> redress_f = *To_redress_f,
      (To_ex &To_redress_f) value$
    ; ** -> none$
    }
  ; ** -> bad_arg$ "Unknown node." new_exception >> throw
  }
} ;;

eval <*A graph> *Graph <A> *Node <cstr> *Tag <A> *To link @public -> <A graph> {
  Graph Node Tag unlink = *Graph',
  Graph' To contain? >> case {
  ; true$ -> Graph'
  ; ** -> Graph' To include
  } = *Graph'',
  Graph'' = undress_f: *Undress_f tab: *Tab *** graph$,
  Node &Undress_f = (| *Ex, ** |),
  Tab Ex map.assoc >> value = *N,
  N = weak_ref: *W link_tab: *LT refs: *Refs *** n$,
  To case {
  ; Node ->
    LT Tag W map.add = *LT',
    Refs (| W, Tag |) set.add = *Refs',
    Tab Ex (link_tab: LT' refs: Refs' :: N n$) map.add
  ; ** ->
    To &Undress_f = (| *To_ex, ** |),
    Tab To_ex map.assoc >> value = *To_n,
    To_n = weak_ref: *To_w refs: *To_refs *** n$,
    To_refs (| W, Tag |) set.add = *To_refs',
    Tab To_ex (refs: To_refs' :: To_n n$) map.add = *Tab2,
    LT Tag To_w map.add = *LT',
    Tab2 Ex (link_tab: LT' :: N n$) map.add
  } = *Tab',
  tab: Tab' :: Graph'' graph$
} ;;

eval <*A graph> *Graph <A> *Node <cstr> *Tag unlink @public -> <A graph> {
  Graph Node ensure_in_graph,
  Graph = undress_f: *Undress_f tab: *Tab *** graph$,
  Node &Undress_f = (| *Ex, ** |),
  Tab Ex Tag unlink_by_ex = *Tab',
  tab: Tab' :: Graph graph$
} ;;

eval <*A tab> *Tab <ex.existence> *Ex <cstr> *Tag unlink_by_ex -> <A tab> {
  Tab Ex map.assoc >> value = *N,
  N = weak_ref: *W link_tab: *LT refs: *Refs *** n$,
  LT Tag map.assoc >> case {
  ; W value$ ->
    LT Tag map.delete = *LT',
    Refs (| W, Tag |) set.delete = *Refs',
    Tab Ex (link_tab: LT' refs: Refs' :: N n$) map.add
  ; *To value$ ->
    LT Tag map.delete = *LT',
    To ex.get >> value = *To_ex,
    Tab To_ex map.assoc >> value = *To_n,
    (To_n refs) (| W, Tag |) set.delete = *To_refs',
    Tab Ex (link_tab: LT' ::N n$) map.add = *Tab2,
    Tab2 To_ex (refs: To_refs' :: To_n n$) map.add
  ; none$ -> Tab
  }
} ;;

eval <*A graph> *Graph <A> *Node exclude @public -> <A graph> {
  Graph Node contain? >> case {
  ; true$ ->
    Graph = undress_f: *Undress_f tab: *Tab *** graph$,
    Node &Undress_f = (| *Ex, ** |),
    Graph Node links = *Links,
    Graph Links
      \ <A graph> *G <cstr> *L -> <A graph> { G Node L unlink }
      list.fold = *Graph',
    (Graph' tab) Ex map.assoc >> value >> refs = *Refs,
    Graph' (Refs set.iter >> list.new_list)
      \ <A graph> *G <ex.weak_ref cstr tuple> *R -> <A graph> {
        R = (| *WW, *LL |),
        (G tab) (WW ex.get >> value) LL unlink_by_ex = *T',
        tab: T' :: G graph$
      }
      list.fold = *Graph'',
    (Graph'' tab) Ex map.delete = *Tab',
    tab: Tab' :: Graph'' graph$
  ; ** -> Graph
  }
} ;;

eval <*A graph> *Graph graph_clear | clear @public -> <A graph> {
  Graph = tab: *Tab *** graph$,
  tab: (Tab map.clear) :: Graph graph$
} ;;

eval <*A graph> *Graph <A list> *Nodes nodes_reachable_nodes | reachable_nodes @public -> <A list> {
  Graph = undress_f: *Undress_f tab: *Tab *** graph$,
  Nodes
    \ <A> *N -> <ex.existence> { N &Undress_f >> tuple.pair_first }
    list.map = *Exs,
  Tab Exs collect_reachable_exs = *Reachables,
  (Reachables set.iter >> list.new_list)
    \ <ex.existence> *Ex -> <A> {
      Tab Ex map.assoc >> value >> redress_f = *Redress_f,
      Ex &Redress_f
    }
    list.map
} ;;

eval <*A tab> *Tab <ex.existence list> *Exs collect_reachable_exs -> <ex.existence set.set> {
  Exs hset.new_set
      &\ <ex.existence list> *To_check <ex.existence set.set> *Collected
      -> <ex.existence set.set> {
    To_check case {
    ; [ *E ; *EE ] ->
      Collected E set.contain? >> case {
      ; true$ -> EE Collected &&
      ; ** ->
        Tab E map.assoc >> value >> link_tab = *LT,
        (LT map.iter >> list.new_list)
          \ <cstr ex.weak_ref tuple> *L -> <ex.existence> { L tuple.pair_second >> ex.get >> value }
          list.map = *To_exs,
        (To_exs EE list.cons_each) (Collected E set.add) &&
      }
    ; ** -> Collected
    }
  }
} ;;
