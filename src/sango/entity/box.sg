###########################################################################
# MIT License                                                             #
# Copyright (c) 2021 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.entity.box" ;;

import "sango.entity.existence" -> ex ;;

data <*A box_h> @opaque := <ex.existence> <A ex.rw_slot> box_h$ ;;

data <*A wbox_h> @opaque := <ex.weak_ref> <A ex.rw_slot> wbox_h$ ;;

eval <*A!> *X <<void fun> maybe> *Invalidator_ create_box @public -> <A box_h> {
  X Invalidator_ ex.create_mutable_existence = (| *Ex, *Slot |),
  Ex Slot box_h$
} ;;

eval <*A box_h> *Box existence @public -> <ex.existence> {
  Box = *Ex *Slot box_h$,
  Ex
} ;;

eval <*A box_h> *Box read @public -> <A> {
  Box = *Ex *Slot box_h$,
  Ex Slot ex.peek_assoc
} ;;

eval <*A box_h> *Box <A> *X write | swap @public -> <A> {
  Box = *Ex *Slot box_h$,
  Ex Slot X ex.replace_assoc
} ;;

eval <*A box_h> *Box <<<A wbox_h> void fun> maybe> *Listener_ create_weak_holder @public -> <A wbox_h> {
  Box = *Ex *Slot box_h$,
  Listener_ case {
  ; *Listener value$ ->
    \ <ex.weak_ref> *WR -> <void> { (WR Slot wbox_h$) &Listener } value$
  ; ** -> none$
  } = *L_,
  (Ex L_ ex.create_weak_ref) Slot wbox_h$
} ;;

eval <*A wbox_h> *W get @public -> <<A box_h> maybe> {
  W = *WR *Slot wbox_h$,
  WR ex.get >> case {
  ; *Ex value$ -> (Ex Slot box_h$) value$
  ; ** -> none$
  }
} ;;

eval <*A wbox_h> *W clear @public -> <void> {
  W = *WR *Slot wbox_h$,
  WR ex.clear
} ;;


# -- undress/redress --

# must cast to handle concrete type
eval dress_fs @public -> <<*A box_h> ex.dress_fs> {
  undress_f: ^undress ex.dress_fs$
} ;;

eval <*A box_h> *Box undress -> <ex.existence <<A box_h> ex.redress_f> tuple> {
  Box = *Ex *Slot box_h$,
  (| Ex, \ <ex.existence> *E -> <A box_h> { E Slot box_h$ } |)
} ;;
