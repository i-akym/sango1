###########################################################################
# MIT License                                                             #
# Copyright (c) 2018 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.arith.math" ;;

data <complex> @public := re: <real> im: <real> complex$ ;;

eval pi @public -> <real> { 3.14159265358979323846 } ;;
eval e @public -> <real> { 2.7182818284590452354 } ;;
eval <real> *R0 <real> *R1 real_pow | pow @public -> <real> @native ;;
eval <real> *R exp @public -> <real> @native ;;
eval <real> *R log @public -> <real> @native ;;
eval <real> *R log10 @public -> <real> @native ;;
eval <real> *R sqrt @public -> <real> @native ;;
eval <real> *R sin @public -> <real> @native ;;
eval <real> *R cos @public -> <real> @native ;;
eval <real> *R tan @public -> <real> @native ;;
eval <real> *R asin @public -> <real> @native ;;
eval <real> *R acos @public -> <real> @native ;;
eval <real> *R atan @public -> <real> @native ;;
# eval <real> *R sinh @public -> <real> @native ;;
# eval <real> *R cosh @public -> <real> @native ;;
# eval <real> *R tanh @public -> <real> @native ;;

eval <real> *R complex @public -> <complex> {
  re: R im: 0.0 complex$
} ;;

eval <complex> *Z c_abs | abs @public -> <real> {
  Z = re: *R im: *I complex$,
  ((R R prod) (I I prod) sum) sqrt
} ;;

eval <complex> *Z c_conj | conj @public -> <complex> {
  Z = re: *R im: *I complex$,
  re: R im: (I neg) complex$
} ;;

eval <complex> *Z c_neg | neg @public -> <complex> {
  Z = re: *R im: *I complex$,
  re: (R neg) im: (I neg) complex$
} ;;

eval <complex> *Z0 <complex> *Z1 c_sum | sum @public -> <complex> {
  Z0 = re: *R0 im: *I0 complex$,
  Z1 = re: *R1 im: *I1 complex$,
  re: (R0 R1 sum) im: (I0 I1 sum) complex$
} ;;

eval <complex> *Z0 <complex> *Z1 c_diff | diff @public -> <complex> {
  Z0 = re: *R0 im: *I0 complex$,
  Z1 = re: *R1 im: *I1 complex$,
  re: (R0 R1 diff) im: (I0 I1 diff) complex$
} ;;

eval <complex> *Z0 <complex> *Z1 c_prod | prod @public -> <complex> {
  Z0 = re: *R0 im: *I0 complex$,
  Z1 = re: *R1 im: *I1 complex$,
  re: ((R0 R1 prod) (I0 I1 prod) diff) im: ((R0 I1 prod) (R1 I0 prod) sum) complex$
} ;;

eval <complex> *Z0 <complex> *Z1 c_quot | quot @public -> <complex> {
  Z0 = re: *R0 im: *I0 complex$,
  Z1 = re: *R1 im: *I1 complex$,
  (R1 R1 prod) (I1 I1 prod) sum = *P,
  re: (((R0 R1 prod) (I0 I1 prod) sum) P quot) im: (((R1 I0 prod) (R0 I1 prod) diff) P quot) complex$
} ;;

