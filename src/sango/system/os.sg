###########################################################################
# MIT License                                                             #
# Copyright (c) 2018 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module @alpha "sango.system.os" ;;

import "sango.actor" -> act ;;
import "sango.io" -> io ;;
import "sango.io.util" -> iou ;;

# -- subprocess execution --

data <process_opts> @public :=
  redirect_err_to_out: <bool>
  process_opts$ ;;

eval default_process_opts @public -> <process_opts> {
  redirect_err_to_out: false$
  process_opts$
} ;;

data <process_h> @opaque :=
  async_h: <int act.async_h>
  to_in: <byte io.outstream_h>
  from_out: <byte io.instream_h>
  from_err_: <<byte io.instream_h> maybe>
  term_sig_f: <void fun>
  process_h$ ;;

eval <cstr list> *Command <cstr> *Dir <process_opts> *Opts exec @public -> <process_h> {
  Command Dir Opts exec_impl = (| *Peer, *To_in, *From_out, *From_err_, *Term_sig_f |),
  Peer act.spawn = *Async,
  Async act.start,
  async_h: Async
    to_in: To_in
    from_out: From_out
    from_err_: From_err_
    term_sig_f: Term_sig_f
    process_h$
};;

eval <cstr list> *Command <cstr> *Dir <process_opts> *Opts exec_impl ->
  <<int fun>  # peer actor
    <byte io.outstream_h>  # to_in
    <byte io.instream_h>  # form_out
    <<byte io.instream_h> maybe>  # from_err_
    <void fun>  # term_sig_f
  tuple> @native ;;

eval <process_h> *P wait_process_ended | wait | join @public -> <void> {
  (P async_h >> act.actor_h) act.wait_forever$ act.wait_actor_ended >> ignore
} ;;

eval <process_h> *P exit_code @public -> <int> {
  P async_h >> act.sync = *Exit fin$,
  Exit
} ;;

eval <process_h> *P byte_stream_to_process_stdin | to_stdin @public -> <byte io.outstream_h> {
  P to_in
} ;;

eval <process_h> *P byte_stream_from_process_stdout | from_stdout @public -> <byte io.instream_h> {
  P from_out
} ;;

eval <process_h> *P byte_stream_from_process_stderr | from_stderr @public -> <<byte io.instream_h> maybe> {
  P from_err_
} ;;

eval <process_h> *P terminate_process | terminate | kill @public -> <void> {
  &(P term_sig_f)
} ;;

eval <process_h> *Producer <process_h> *Consumer connect_processes @public -> <void> {
  (Producer from_out) (Consumer to_in) iou.new_default_pump_conf = *Pump_conf,
  \ <byte iou.pump_conf> *Conf <exception> *E -> <void> {
    Producer kill, Consumer kill, Conf E iou.pump_default_action_on_read_error } = *Read_error_action,
  \ <byte iou.pump_conf> *Conf <exception> *E -> <void> {
    Producer kill, Consumer kill, Conf E iou.pump_default_action_on_write_error } = *Write_error_action,
  read_error_action: Read_error_action
    write_error_action: Write_error_action
    :: Pump_conf
    iou.pump_conf$ = *Pump_conf',
  Pump_conf' iou.start_pump >> ignore
} ;;

