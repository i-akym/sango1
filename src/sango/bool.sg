###########################################################################
# MIT License                                                             #
# Copyright (c) 2018 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.bool" ;;

eval <bool list> *Bs list_and | and @public -> <bool> {
  Bs case {
  ; [] -> true$
  ; [ false$ ; ** ] -> false$
  ; [ ** ; *Bs' ] -> Bs' &&
  }
} ;;

eval <<bool fun> list> *BFs list_lazy_and | lazy_and @public -> <bool> {
  BFs case {
  ; [] -> true$
  ; [ *BF ; ** ] || &BF >> not -> false$
  ; [ ** ; *BFs' ] -> BFs' &&
  }
} ;;

eval <bool list> *Bs list_or | or @public -> <bool> {
  Bs case {
  ; [] -> false$
  ; [ true$ ; ** ] -> true$
  ; [ ** ; *Bs' ] -> Bs' &&
  }
} ;;

eval <<bool fun> list> *BFs list_lazy_or | lazy_or @public -> <bool> {
  BFs case {
  ; [] -> false$
  ; [ *BF ; ** ] || &BF -> true$
  ; [ ** ; *BFs' ] -> BFs' &&
  }
} ;;
