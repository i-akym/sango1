###########################################################################
# MIT License                                                             #
# Copyright (c) 2019 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module @beta "sango.lang.module" ;;

import "sango.actor" -> act ;;
import "sango.actor.util" -> actu ;;
import "sango.list" -> list ;;

data <d> :=
  worker: <actu.serializer_h>
  d$ ;;


# -- dynamic module loading --

eval <cstr> *Module_name require_module @public -> <void> {
  (_initd_ >> worker)
    \\ <void> { Module_name load_module_on_demand }
    actu.run_serialized
} ;;

eval <cstr> *Module_name load_module_on_demand -> <void> @native ;;  # MT-unsafe

eval <cstr> *Module_name module_init_actor_h @public -> <act.actor_h maybe> @native ;;

eval <cstr> *Module_name wait_module_initialized @public -> <void> {
  Module_name module_init_actor_h >> case {
  ; *A value$ -> A act.wait_forever$ act.join >> ignore
  ; ** ->
  }
} ;;


# -- meta programming feature --

### UNDER CONSTRUCTION ###

data <tao> @opaque := @native ;;  # type-aware object
data <run_obj> := @native ;;  # internal use for concurrent invocation

# native implementations; MTU means "possibly MT-unsafe"

eval <byte> *Byte do_byte_tao -> <tao> @native ;;  # MTU
eval <int> *Int do_int_tao -> <tao> @native ;;  # MTU
eval <real> *Real do_real_tao -> <tao> @native ;;  # MTU
eval <char> *Char do_char_tao -> <tao> @native ;;  # MTU
eval <tao list> *Elems do_new_tuple -> <tao> @native ;;  # MTU
eval <tao> *Tuple do_tuple_elems -> <tao list> @native ;;  # MTU
eval <tao list> *Attrs <cstr> *Mod <cstr> *Dcon do_new_data -> <tao> @native ;;  # MTU
eval <tao> *Constr do_constr_attrs -> <tao list> @native ;;  # MTU
eval <cstr> *Mod <cstr> *Official do_closure -> <tao> @native ;;  # MTU
eval <tao list> *Params <tao> *Closure prepare_apply -> <run_obj> @native ;;  # MTU
eval <run_obj> *Run do_apply -> <tao result> @native ;;

# features

eval <tao> *Tao tao_value | value @public -> <_?_> @native ;;

eval <byte> *Byte byte_tao | tao @public -> <tao> {
  (_initd_ >> worker)
    \\ <tao> { Byte do_byte_tao }
    actu.run_serialized
} ;;

eval <int> *Int int_tao | tao @public -> <tao> {
  (_initd_ >> worker)
    \\ <tao> { Int do_int_tao }
    actu.run_serialized
} ;;

eval <real> *Real real_tao | tao @public -> <tao> {
  (_initd_ >> worker)
    \\ <tao> { Real do_real_tao }
    actu.run_serialized
} ;;

eval <char> *Char char_tao | tao @public -> <tao> {
  (_initd_ >> worker)
    \\ <tao> { Char do_char_tao }
    actu.run_serialized
} ;;

eval <tao list> *Elems new_tuple @public -> <tao> {
  (_initd_ >> worker)
    \\ <tao> { Elems do_new_tuple }
    actu.run_serialized
} ;;

eval <tao> *Tuple tuple_elems | elems @public -> <tao list> {
  (_initd_ >> worker)
    \\ <tao list> { Tuple do_tuple_elems }
    actu.run_serialized
} ;;

eval <tao list> *Attrs <cstr> *Mod <cstr> *Dcon new_data @public -> <tao> {
  (_initd_ >> worker)
    \\ <tao> { Attrs Mod Dcon do_new_data }
    actu.run_serialized
} ;;

eval <tao> *Constr constr_attrs | attrs @public -> <tao list> {
  (_initd_ >> worker)
    \\ <tao list> { Constr do_constr_attrs }
    actu.run_serialized
} ;;

eval <cstr> *Mod <cstr> *Official closure @public -> <tao> {
  (_initd_ >> worker)
    \\ <tao> { Mod Official do_closure }
    actu.run_serialized
} ;;

eval <tao list> *Params <tao> *Closure apply @public -> <tao result> {
  (_initd_ >> worker)
    \\ <run_obj> { Params Closure prepare_apply }
    actu.run_serialized
  >> do_apply
} ;;


# -- initialization --

eval _init_ -> <d> {
  worker: actu.start_serializer
    d$
} ;;

