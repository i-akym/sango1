###########################################################################
# MIT License                                                             #
# Copyright (c) 2019 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module @beta "sango.lang.module" ;;

import "sango.actor" -> act ;;
import "sango.actor.util" -> actu ;;

data <d> :=
  worker: <actu.serializer_h>
  d$ ;;


# -- dynamic module loading --

eval <cstr> *Module_name require_module @public -> <void> {
  (_initd_ >> worker)
    \\ <void> { Module_name load_module_on_demand }
    actu.run_serialized
} ;;

eval <cstr> *Module_name load_module_on_demand -> <void> @native ;;  # MT-unsafe

eval <cstr> *Module_name module_init_actor_h @public -> <act.actor_h maybe> @native ;;

eval <cstr> *Module_name wait_module_initialized @public -> <void> {
  Module_name module_init_actor_h >> case {
  ; *A value$ -> A act.wait_forever$ act.join >> ignore
  ; ** ->
  }
} ;;


# -- initialization --

eval _init_ -> <d> {
  worker: actu.start_serializer
    d$
} ;;

