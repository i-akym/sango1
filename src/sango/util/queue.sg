###########################################################################
# MIT License                                                             #
# Copyright (c) 2018 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.queue" ;;

import "sango.list" -> list ;;
import "sango.util.iter" -> iter ;;

### function set

data <*D *A queue_fs> @public :=
  empty?_f: <D bool fun>
  length_f: <D int fun>
  enqueue_f: <D A D fun>
  head_f: <D <A maybe> fun>
  dequeue_f: <D <<A D tuple> maybe> fun>
  clear_f: <D D fun>
  queue_fs$ ;;

eval <*D *A queue_fs> *Fs queue_fs_to_col_fs | to_col_fs @public -> <D A col_fs> {
  Fs = empty?_f: *Empty_f length_f: *Length_f *** queue_fs$,
  empty?_f_: (Empty_f value$)
  size_f: Length_f
  iter_f: \ <D> *Z -> <A iter> { Z Fs do_iter }
  col_fs$
} ;;


### generic

data <*A queue> @opaque :=
  empty?_f: <bool fun>
  length_f: <int fun>
  enqueue_f: <A <A queue> fun>
  head_f: <<A maybe> fun>
  dequeue_f: <<<A <A queue> tuple> maybe> fun>
  clear_f: <<A queue> fun>
  queue$
++ a'queue_impl -> [ A a'queue ] ;;

eval <*D> *Z <D *A queue_fs> *Fs to_generic_queue @public -> <A queue> {
  empty?_f:
    \\ <bool> { Z Fs do_empty? }
  length_f:
    \\ <int> { Z Fs do_length }
  enqueue_f:
    \ <A> *X -> <A queue> {
      Z Fs X do_enqueue = *Z',
      Z' Fs to_generic_queue
    }
  head_f:
    \\ <A maybe> { Z Fs do_head }
  dequeue_f:
    \\ <<A <A queue> tuple> maybe> {
      Z Fs do_dequeue >> case {
      ; (| *E, *Z' |) value$ -> (| E, Z' Fs to_generic_queue |) value$
      ; ** -> none$
      }
    }
  clear_f:
    \\ <A queue> {
      Z Fs do_clear = *Z',
      Z' Fs to_generic_queue
    }
  queue$
} ;;

eval a'queue_impl -> <<*A queue> A queue_fs> {
  empty?_f: ^g_empty?
  length_f: ^g_length
  enqueue_f: ^g_enqueue
  head_f: ^g_head
  dequeue_f: ^g_dequeue
  clear_f: ^g_clear
  queue_fs$
} ;;


### implementation of common-behavior object

eval <*A queue> *Queue g_empty? | empty? @public -> <bool> {
  &(Queue empty?_f)
} ;;

eval <*A queue> *Queue g_length | length @public -> <int> {
  &(Queue length_f)
} ;;

eval <*A queue> *Queue <A> *Elem g_enqueue | enqueue @public -> <A queue> {
  Elem &(Queue enqueue_f)
} ;;

eval <*A queue> *Queue g_head | head @public -> <A maybe> {
  &(Queue head_f)
} ;;

eval <*A queue> *Queue g_dequeue | dequeue @public -> <<A <A queue> tuple> maybe> {
  &(Queue dequeue_f)
} ;;

eval <*A queue> *Queue g_clear | clear @public -> <A queue> {
  &(Queue clear_f)
} ;;

eval <*A queue> *Queue g_iter | iter @public -> <A iter> {
  \\ <A iter_res> { Queue g_iter_next } iter$
} ;;

eval <*A queue> *Z g_iter_next -> <A iter_res> {
  Z g_dequeue >> case {
  ; (| *E, *Z' |) value$ ->
    (| E, \\ <A iter_res> { Z' g_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;

eval <*A queue> *Queue <A list> *Elems g_enqueue_list | enqueue_list @public -> <A queue> {
  Queue (Elems list.iter) g_enqueue_iter
} ;;

eval <*A queue> *Queue <A iter> *Iter g_enqueue_iter | enqueue_iter @public -> <A queue> {
  Queue
  Iter
  \ <A queue> *Y <A> *E -> <A queue> { Y E g_enqueue }
  iter.fold
} ;;


### feature

feature <*T> [ *A a'queue ] @public -> <T A queue_fs> ;;

eval <*T[ *A a'queue ]> *FQueue f_to_generic_queue | to_generic_queue @public -> <A queue> {
  FQueue (FQueue _feature_a'queue) to_generic_queue
} ;;

eval <*T[ *A a'queue ]> *FQueue f_empty? | empty? @public -> <bool> {
  FQueue _feature_a'queue = *Queue_fs,
  FQueue Queue_fs do_empty?
} ;;

eval <*T[ *A a'queue ]> *FQueue f_length | length @public -> <int> {
  FQueue _feature_a'queue = *Queue_fs,
  FQueue Queue_fs do_length
} ;;

eval <*T[ *A a'queue ]> *FQueue <A> *Elem f_enqueue | enqueue @public -> <T> {
  FQueue _feature_a'queue = *Queue_fs,
  FQueue Queue_fs Elem do_enqueue
} ;;

eval <*T[ *A a'queue ]> *FQueue f_head | head @public -> <A maybe> {
  FQueue _feature_a'queue = *Queue_fs,
  FQueue Queue_fs do_head
} ;;

eval <*T[ *A a'queue ]> *FQueue f_dequeue | dequeue @public -> <<A T tuple> maybe> {
  FQueue _feature_a'queue = *Queue_fs,
  FQueue Queue_fs do_dequeue
} ;;

eval <*T[ *A a'queue ]> *FQueue f_clear | clear @public -> <T> {
  FQueue _feature_a'queue = *Queue_fs,
  FQueue Queue_fs do_clear
} ;;

eval <*T[ *A a'queue ]> *FQueue <A list> *Elems f_enqueue_list | enqueue_list @public -> <T> {
  FQueue (Elems list.iter) f_enqueue_iter
} ;;

eval <*T[ *A a'queue ]> *FQueue <A iter> *Iter f_enqueue_iter | enqueue_iter @public -> <T> {
  FQueue _feature_a'queue = *Queue_fs,
  FQueue Queue_fs Iter do_enqueue_iter
} ;;

eval <*T[ *A a'queue ]> *FQueue f_iter | iter @public -> <A iter> {
  FQueue _feature_a'queue = *Queue_fs,
  FQueue Queue_fs do_iter
} ;;


### subroutines

eval <*D> *Z <D *A queue_fs> *Fs do_empty? @public -> <bool> {
  Z &(Fs empty?_f)
} ;;

eval <*D> *Z <D *A queue_fs> *Fs do_length @public -> <int> {
  Z &(Fs length_f)
} ;;

eval <*D> *Z <D *A queue_fs> *Fs <A> *Elem do_enqueue @public -> <D> {
  Z Elem &(Fs enqueue_f)
} ;;

eval <*D> *Z <D *A queue_fs> *Fs do_head @public -> <A maybe> {
  Z &(Fs head_f)
} ;;

eval <*D> *Z <D *A queue_fs> *Fs do_dequeue @public -> <<A D tuple> maybe> {
  Z &(Fs dequeue_f)
} ;;

eval <*D> *Z <D *A queue_fs> *Fs do_clear @public -> <D> {
  Z &(Fs clear_f)
} ;;

eval <*D> *Z <D *A queue_fs> *Fs <A list> *Elems do_enqueue_list | enqueue_list @public -> <D> {
  Z Fs (Elems list.iter) do_enqueue_iter
} ;;

eval <*D> *Z <D *A queue_fs> *Fs <A iter> *Iter do_enqueue_iter | enqueue_iter @public -> <D> {
  Z
  Iter
  \ <D> *Y <A> *E -> <D> { Y Fs E do_enqueue }
  iter.fold
} ;;

eval <*D> *Z <D *A queue_fs> *Fs do_iter | iter @public -> <A iter> {
  \\ <A iter_res> { Z Fs do_iter_next } iter$
} ;;

eval <*D> *Z <D *A queue_fs> *Fs do_iter_next -> <A iter_res> {
  Z Fs do_dequeue >> case {
  ; (| *Elem, *Z' |) value$ ->
    (| Elem, \\ <A iter_res> { Z' Fs do_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;
