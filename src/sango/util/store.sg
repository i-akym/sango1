###########################################################################
# MIT License                                                             #
# Copyright (c) 2025 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module @alpha "sango.util.store" ;;

import "sango.entity.existence" -> ex ;;
import "sango.util.map.shared" -> shmap ;;
import "sango.util.map.shared.weakkeymap" -> wkmap ;;

alias type <*A map_h> := <ex.existence A shmap.shared_map_h> ;;

data <*A! store_h> @opaque :=
  <A map_h>
  store_h$ ;;

data <ref> @opaque :=
  ex: <ex.existence>
  ref$ ;;

eval <*A! dummy> *Content create_store @public -> <A store_h> {
  (ex.entity_fs Content wkmap.create_weak_key_map) store_h$
} ;;

eval <*A! store_h> *Store_h <A> *X put @public -> <ref> {
  Store_h = *Map_h store_h$,
  none$ none$ ex.create_immutable_existence = (| *Ex, ** |),
  Map_h Ex X shmap.add,
  Ex ref$
} ;;

eval <*A! store_h> *Store_h <ref> *Ref get @public -> <A maybe> {
  Store_h = *Map_h store_h$,
  Ref = *Ex ref$,
  Map_h Ex shmap.assoc
} ;;

eval <*A! store_h> *Store_h <ref> *Ref delete @public -> <void> {
  Store_h = *Map_h store_h$,
  Ref = *Ex ref$,
  Map_h Ex shmap.delete
} ;;
