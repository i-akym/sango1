###########################################################################
# MIT License                                                             #
# Copyright (c) 2018 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.stack" ;;

import "sango.list" -> list ;;
import "sango.util.iter" -> iter ;;
import "sango.util.stack.feature" -> feat ;;

### function set

data <*D *A stack_fs> @public :=
  empty?_f: <D bool fun>
  depth_f: <D int fun>
  push_f: <D A D fun>
  top_f: <D <A maybe> fun>
  pop_f: <D <<A D tuple> maybe> fun>
  to_list_f_: <<D <A list> fun> maybe>
  clear_f: <D D fun>
  stack_fs$ ;;

eval <*D *A stack_fs> *Fs stack_fs_to_list_f | to_list_f @public -> <D <A list> fun> {
  Fs to_list_f_ >> case {
  ; *F value$ -> F
  ; ** ->
    \ <D> *Stack_d -> <A list> {
      Stack_d [] &\ <D> *Z <A list> *L_r -> <A list> {
        Z &(Fs pop_f) >> case {
        ; (| *Elem, *Z' |) value$ -> Z' [ Elem ; L_r ] &&
        ; ** -> L_r list.reverse
        }
      }
    }
  }
} ;;

eval <*D *A stack_fs> *Fs stack_fs_to_col_fs | to_col_fs @public -> <D A col_fs> {
  Fs = empty?_f: *Empty_f depth_f: *Depth_f *** stack_fs$,
  empty?_f_: (Empty_f value$)
  size_f: Depth_f
  iter_f: \ <D> *Z -> <A iter> { Z Fs do_iter }
  col_fs$
} ;;


### combined object

data <*A stack> @opaque :=
  empty?_f: <bool fun>
  depth_f: <int fun>
  push_f: <A <A stack> fun>
  top_f: <<A maybe> fun>
  pop_f: <<<A <A stack> tuple> maybe> fun>
  to_list_f: <<A list> fun>
  clear_f: <<A stack> fun>
  stack$
++ a'stack_impl -> [ A feat.a'stack ] ;;

eval <*D> *Z <D *A stack_fs> *Fs combine @public -> <A stack> {
  empty?_f:
    \\ <bool> { Z Fs do_empty? }
  depth_f:
    \\ <int> { Z Fs do_depth }
  push_f:
    \ <A> *X -> <A stack> {
      Z Fs X do_push = *Z',
      Z' Fs combine
    }
  top_f:
    \\ <A maybe> { Z Fs do_top }
  pop_f:
    \\ <<A <A stack> tuple> maybe> {
      Z Fs do_pop >> case {
      ; (| *E, *Z' |) value$ -> (| E, Z' Fs combine |) value$
      ; ** -> none$
      }
    }
  to_list_f:
    \\ <A list> { Z Fs do_to_list }
  clear_f:
    \\ <A stack> {
      Z Fs do_clear = *Z',
      Z' Fs combine
    }
  stack$
} ;;

eval a'stack_impl -> <<*A stack> A stack_fs> {
  empty?_f: ^empty?
  depth_f: ^depth
  push_f: ^push
  top_f: ^top
  pop_f: ^pop
  to_list_f_: (^to_list value$)
  clear_f: ^clear
  stack_fs$
} ;;

eval <*A stack> *Stack empty? @public -> <bool> {
  &(Stack empty?_f)
} ;;

eval <*A stack> *Stack depth @public -> <int> {
  &(Stack depth_f)
} ;;

eval <*A stack> *Stack <A> *Elem push @public -> <A stack> {
  Elem &(Stack push_f)
} ;;

eval <*A stack> *Stack top @public -> <A maybe> {
  &(Stack top_f)
} ;;

eval <*A stack> *Stack pop @public -> <<A <A stack> tuple> maybe> {
  &(Stack pop_f)
} ;;

eval <*A stack> *Stack to_list @public -> <A list> {
  &(Stack to_list_f)
} ;;

eval <*A stack> *Stack clear @public -> <A stack> {
  &(Stack clear_f)
} ;;

eval <*A stack> *Stack iter @public -> <A iter> {
  \\ <A iter_res> { Stack iter_next } iter$
} ;;

eval <*A stack> *Z iter_next -> <A iter_res> {
  Z pop >> case {
  ; (| *E, *Z' |) value$ ->
    (| E, \\ <A iter_res> { Z' iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;

eval <*A stack> *Stack <A list> *Elems push_list @public -> <A stack> {
  Stack (Elems list.iter) push_iter
} ;;

eval <*A stack> *Stack <A iter> *Iter push_iter @public -> <A stack> {
  Stack
  Iter
  \ <A stack> *Y <A> *E -> <A stack> { Y E push }
  iter.fold
} ;;


### subroutines

eval <*D> *Z <D *A stack_fs> *Fs do_empty? @public -> <bool> {
  Z &(Fs empty?_f)
} ;;

eval <*D> *Z <D *A stack_fs> *Fs do_depth @public -> <int> {
  Z &(Fs depth_f)
} ;;

eval <*D> *Z <D *A stack_fs> *Fs <A> *Elem do_push @public -> <D> {
  Z Elem &(Fs push_f)
} ;;

eval <*D> *Z <D *A stack_fs> *Fs do_top @public -> <A maybe> {
  Z &(Fs top_f)
} ;;

eval <*D> *Z <D *A stack_fs> *Fs do_pop @public -> <<A D tuple> maybe> {
  Z &(Fs pop_f)
} ;;

eval <*D> *Z <D *A stack_fs> *Fs do_to_list @public -> <A list> {
  Z &(Fs to_list_f)
} ;;

eval <*D> *Z <D *A stack_fs> *Fs do_clear @public -> <D> {
  Z &(Fs clear_f)
} ;;

eval <*D> *Z <D *A stack_fs> *Fs <A list> *Elems do_push_list | push_list @public -> <D> {
  Z Fs (Elems list.iter) do_push_iter
} ;;

eval <*D> *Z <D *A stack_fs> *Fs <A iter> *Iter do_push_iter | push_iter @public -> <D> {
  Z
  Iter
  \ <D> *Y <A> *E -> <D> { Y Fs E do_push }
  iter.fold
} ;;

eval <*D> *Z <D *A stack_fs> *Fs do_iter | iter @public -> <A iter> {
  \\ <A iter_res> { Z Fs do_iter_next } iter$
} ;;

eval <*D> *Z <D *A stack_fs> *Fs do_iter_next -> <A iter_res> {
  Z Fs do_pop >> case {
  ; (| *E, *Z' |) value$ ->
    (| E, \\ <A iter_res> { Z' Fs do_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;
