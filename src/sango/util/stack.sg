###########################################################################
# MIT License                                                             #
# Copyright (c) 2018 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.stack" ;;

import "sango.list" -> list ;;
import "sango.util.iter" -> iter ;;

alias type <*A d> @public := <A _1+> ;;

data <*A stack> @public :=
  d: <A d>
  fs: <<A d> A stack_fs>
  stack$
++ as_a'stack -> [ A a'stack ]
;;

data <*D *A stack_fs> @public :=
  empty?_f: <D bool fun>
  depth_f: <D int fun>
  push_f: <D A D fun>
  top_f: <D <A maybe> fun>
  pop_f: <D <<A D tuple> maybe> fun>
  to_list_f_: <<D <A list> fun> maybe>
  clear_f: <D D fun>
  stack_fs$ ;;


### definition of feature

feature <*T!> [ *A a'stack ] @public -> <T A stack_fo> ;;

alias type <*A fd> @public := <A _1+> ;;
alias type <*T *A fr> @public := <<A fd> T fun> ;;
alias type <*T *A fx> @public := <<A fd> <T A fr> tuple> ;;

data <*T *A stack_fo> @public :=
  fd: <A fd>
  fr: <T A fr>
  fs: <<T A fx> A stack_fs>
  stack_fo$ ;;


### implementation of common-behavior object

eval <*A stack> *Stack c_empty? | empty? @public -> <bool> {
  Stack = d: *D fs: *Fs stack$,
  D &(Fs empty?_f)
} ;;

eval <*A stack> *Stack c_depth | depth @public -> <int> {
  Stack = d: *D fs: *Fs stack$,
  D &(Fs depth_f)
} ;;

eval <*A stack> *Stack <A> *Elem c_push | push @public -> <A stack> {
  Stack = d: *D fs: *Fs stack$,
  d: (D Elem &(Fs push_f)) :: Stack stack$
} ;;

eval <*A stack> *Stack c_top | top @public -> <A maybe> {
  Stack = d: *D fs: *Fs stack$,
  D &(Fs top_f)
} ;;

eval <*A stack> *Stack c_pop | pop @public -> <<A <A stack> tuple> maybe> {
  Stack = d: *D fs: *Fs stack$,
  D &(Fs pop_f) >> case {
  ; (| *E, *D' |) value$ -> (| E, d: D' :: Stack stack$ |) value$
  ; ** -> none$
  }
} ;;

eval <*A stack> *Stack c_to_list | to_list @public -> <A list> {
  Stack = d: *D fs: *Fs stack$,
  D &(Fs to_list_f)
} ;;

eval <*A stack> *Stack c_clear | clear @public -> <A stack> {
  Stack = d: *D fs: *Fs stack$,
  d: (D &(Fs clear_f)) :: Stack stack$
} ;;

eval <*A stack> *Stack <A list> *Elems c_push_list | push_list @public -> <A stack> {
  Stack (Elems list.iter) push_iter
} ;;

eval <*A stack> *Stack <A iter> *Iter c_push_iter | push_iter @public -> <A stack> {
  Iter next >> case {
  ; (| *E, *Iter' |) value$ -> (Stack E push) Iter' &&
  ; ** -> Stack
  }
} ;;

eval <*A stack> *Stack c_iter | iter @public -> <A iter> {
  \\ <A iter_res> { Stack c_iter_next } iter$
} ;;

eval <*A stack> *Stack c_iter_next -> <A iter_res> {
  Stack pop >> case {
  ; (| *E, *Stack' |) value$ ->
    (| E, \\ <A iter_res> { Stack' c_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;


### framework of faeture

eval <*T![ *A a'stack ]> *FStack f_empty? | empty? @public -> <bool> {
  FStack _feature_a'stack = *Stack_fo,
  Stack_fo fo_empty?
} ;;

eval <*T! *A stack_fo> *Stack_fo fo_empty? | empty? @public -> <bool> {
  Stack_fo = fd: *D fr: *R fs: *Fs stack_fo$,
  (| D, R |) Fs _empty?
} ;;

eval <*T![ *A a'stack ]> *FStack f_depth | depth @public -> <int> {
  FStack _feature_a'stack = *Stack_fo,
  Stack_fo fo_depth
} ;;

eval <*T! *A stack_fo> *Stack_fo fo_depth | depth @public -> <int> {
  Stack_fo = fd: *D fr: *R fs: *Fs stack_fo$,
  (| D, R |) Fs _depth
} ;;

eval <*T![ *A a'stack ]> *FStack <A> *Elem f_push | push @public -> <T> {
  FStack _feature_a'stack = *Stack_fo,
  Stack_fo Elem fo_push = fd: *D' fr: *R' fs: *Fs' stack_fo$,
  D' &R'
} ;;

eval <*T! *A stack_fo> *Stack_fo <A> *Elem fo_push | push @public -> <T A stack_fo> {
  Stack_fo = fd: *D fr: *R fs: *Fs stack_fo$,
  (| D, R |) Fs Elem _push = (| *D', *R' |),
  fd: D' fr: R' fs: Fs stack_fo$
} ;;

eval <*T![ *A a'stack ]> *FStack f_top | top @public -> <A maybe> {
  FStack _feature_a'stack = *Stack_fo,
  Stack_fo fo_top
} ;;

eval <*T! *A stack_fo> *Stack_fo fo_top | top @public -> <A maybe> {
  Stack_fo = fd: *D fr: *R fs: *Fs stack_fo$,
  (| D, R |) Fs _top
} ;;

eval <*T![ *A a'stack ]> *FStack f_pop | pop @public -> <<A T tuple> maybe> {
  FStack _feature_a'stack = *Stack_fo,
  Stack_fo fo_pop >> case {
  ; (| *Elem, fd: *D' fr: *R' fs: *Fs' stack_fo$ |) value$ -> (| Elem, D' &R' |) value$
  ; ** -> none$
  }
} ;;

eval <*T! *A stack_fo> *Stack_fo fo_pop | pop @public -> <<A <T A stack_fo> tuple> maybe> {
  Stack_fo = fd: *D fr: *R fs: *Fs stack_fo$,
  (| D, R |) Fs _pop >> case {
  ; (| *Elem, (| *D', *R' |) |) value$ -> (| Elem, fd: D' fr: R' fs: Fs stack_fo$ |) value$
  ; ** -> none$
  }
} ;;

eval <*T![ *A a'stack ]> *FStack f_clear | clear @public -> <T> {
  FStack _feature_a'stack = *Stack_fo,
  Stack_fo fo_clear = fd: *D' fr: *R' fs: *Fs' stack_fo$,
  D' &R'
} ;;

eval <*T! *A stack_fo> *Stack_fo fo_clear | clear @public -> <T A stack_fo> {
  Stack_fo = fd: *D fr: *R fs: *Fs stack_fo$,
  (| D, R |) Fs _clear = (| *D', *R' |),
  fd: D' fr: R' fs: Fs stack_fo$
} ;;

eval <*T![ *A a'stack ]> *FStack <A list> *Elems f_push_list | push_list @public -> <T> {
  FStack (Elems list.iter) f_push_iter
} ;;

eval <*T![ *A a'stack ]> *FStack <A iter> *Iter f_push_iter | push_iter @public -> <T> {
  FStack _feature_a'stack = *Stack_fo,
  Stack_fo Iter fo_push_iter = fd: *D' fr: *R' fs: *Fs' stack_fo$,
  D' &R'
} ;;

eval <*T! *A stack_fo> *Stack_fo <A list> *Elems fo_push_list | push_list @public -> <T A stack_fo> {
  Stack_fo (Elems list.iter) fo_push_iter
} ;;

eval <*T! *A stack_fo> *Stack_fo <A iter> *Iter fo_push_iter | push_iter @public -> <T A stack_fo> {
  Iter next >> case {
  ; (| *Elem, *Iter' |) value$ -> (Stack_fo Elem fo_push) Iter' &&
  ; ** -> Stack_fo
  }
} ;;

eval <*T![ *A a'stack ]> *FStack f_iter | iter @public -> <A iter> {
  FStack _feature_a'stack = *Stack_fo,
  Stack_fo fo_iter
} ;;

eval <*T! *A stack_fo> *Stack_fo fo_iter | iter @public -> <A iter> {
  \\ <A iter_res> { Stack_fo fo_iter_next } iter$
} ;;

eval <*T! *A stack_fo> *Stack_fo fo_iter_next -> <A iter_res> {
  Stack_fo fo_pop >> case {
  ; (| *Elem, *Stack_fo' |) value$ ->
    (| Elem, \\ <A iter_res> { Stack_fo' fo_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;


### feature implementation of common-behavior object

eval <*A stack> *Stack as_a'stack -> <<A stack> A stack_fo> {
  Stack cfd$ = *FD,
  \ <A fd> *X -> <A stack> {
    X = *S cfd$, S
  } = *FR,
  fd: FD fr: FR fs: cstack_fo_fs stack_fo$
} ;;

extend <*A _1+> -> cfd := <A stack> cfd$ ;;

eval cstack_fo_fs -> <<<*A stack> A fx> A stack_fs> {
  empty?_f: ^cfo_empty?
  depth_f: ^cfo_depth
  push_f: ^cfo_push
  top_f: ^cfo_top
  pop_f: ^cfo_pop
  to_list_f_: (^cfo_to_list value$)
  clear_f: ^cfo_clear
  stack_fs$
} ;;

eval <*T *A fx> *Fx cfo_empty? -> <bool> {
  Fx = (| *Stack cfd$, *R |),
  Stack c_empty?
} ;;

eval <*T *A fx> *Fx cfo_depth -> <int> {
  Fx = (| *Stack cfd$, *R |),
  Stack c_depth
} ;;

eval <*T *A fx> *Fx <A> *Elem cfo_push -> <T A fx> {
  Fx = (| *Stack cfd$, *R |),
  Stack Elem c_push = *Stack',
  (| Stack' cfd$, R |)
} ;;

eval <*T *A fx> *Fx cfo_top -> <A maybe> {
  Fx = (| *Stack cfd$, *R |),
  Stack c_top
} ;;

eval <*T *A fx> *Fx cfo_pop -> <<A <T A fx> tuple> maybe> {
  Fx = (| *Stack cfd$, *R |),
  Stack c_pop >> case {
  ; (| *Elem, *Stack' |) value$ -> (| Elem, (| Stack' cfd$, R |) |) value$
  ; ** -> none$
  }
} ;;

eval <*T *A fx> *Fx cfo_to_list -> <A list> {
  Fx = (| *Stack cfd$, *R |),
  Stack c_to_list
} ;;

eval <*T *A fx> *Fx cfo_clear -> <T A fx> {
  Fx = (| *Stack cfd$, *R |),
  Stack c_clear = *Stack',
  (| Stack' cfd$, R |)
} ;;


### subroutines

eval <*D *A stack_fs> *Fs stack_fs_to_list_f | to_list_f @public -> <D <A list> fun> {
  Fs to_list_f_ >> case {
  ; *F value$ -> F
  ; ** ->
    \ <D> *Stack_d -> <A list> {
      Stack_d [] &\ <D> *SD <A list> *L_r -> <A list> {
        SD &(Fs pop_f) >> case {
        ; (| *Elem, *SD' |) value$ -> SD' [ Elem ; L_r ] &&
        ; ** -> L_r list.reverse
        }
      }
    }
  }
} ;;

eval <*D> *SD <D *A stack_fs> *Fs _empty? -> <bool> {
  SD &(Fs empty?_f)
} ;;

eval <*D> *SD <D *A stack_fs> *Fs _depth -> <int> {
  SD &(Fs depth_f)
} ;;

eval <*D> *SD <D *A stack_fs> *Fs <A> *Elem _push -> <D> {
  SD Elem &(Fs push_f)
} ;;

eval <*D> *SD <D *A stack_fs> *Fs _top -> <A maybe> {
  SD &(Fs top_f)
} ;;

eval <*D> *SD <D *A stack_fs> *Fs _pop -> <<A D tuple> maybe> {
  SD &(Fs pop_f)
} ;;

eval <*D> *SD <D *A stack_fs> *Fs _clear -> <D> {
  SD &(Fs clear_f)
} ;;
