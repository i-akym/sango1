###########################################################################
# MIT License                                                             #
# Copyright (c) 2018 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.stack" ;;

import "sango.list" -> list ;;
import "sango.util.iter" -> iter ;;

alias type <*A d> @public := <A _1+> ;;

data <*A stack> @public :=
  d: <A d>
  fs: <<A d> A stack_fs>
  stack$ ;;

data <*A! fxstack> @opaque :=
  <A stack> fxstack$
++ as_a'stack -> [ A a'stack ] ;;

eval <*A! stack> *Stack as_fxstack @public -> <A fxstack> {
  Stack fxstack$
} ;;

eval <*A! fxstack> *FxStack as_stack @public -> <A stack> {
  FxStack = *Stack fxstack$, Stack
} ;;


### definition of function set

data <*D *A stack_fs> @public :=
  empty?_f: <D bool fun>
  depth_f: <D int fun>
  push_f: <D A D fun>
  top_f: <D <A maybe> fun>
  pop_f: <D <<A D tuple> maybe> fun>
  to_list_f_: <<D <A list> fun> maybe>
  clear_f: <D D fun>
  stack_fs$ ;;


### definition of feature

feature <*T!> [ *A a'stack ] @public -> <T A stack_fo> ;;

data <*T! *A stack_fo> @public :=
  d: <T>
  fs: <T A stack_fs>
  stack_fo$
++ as_a'col -> [ A a'col ] ;;


### implementation of common-behavior object

eval <*A stack> *Stack c_empty? | empty? @public -> <bool> {
  Stack = d: *D fs: *Fs stack$,
  D &(Fs empty?_f)
} ;;

eval <*A! fxstack> *FxStack fx_empty? | empty? @public -> <bool> {
  (FxStack as_stack) c_empty?
} ;;

eval <*A stack> *Stack c_depth | depth @public -> <int> {
  Stack = d: *D fs: *Fs stack$,
  D &(Fs depth_f)
} ;;

eval <*A! fxstack> *FxStack fx_depth | depth @public -> <int> {
  (FxStack as_stack) c_depth
} ;;

eval <*A stack> *Stack <A> *Elem c_push | push @public -> <A stack> {
  Stack = d: *D fs: *Fs stack$,
  D Elem &(Fs push_f) = *D',
  d: D' fs: Fs stack$
} ;;

eval <*A! fxstack> *FxStack <A> *Elem fx_push | push @public -> <A fxstack> {
  (FxStack as_stack) Elem c_push = *Stack',
  Stack' as_fxstack
} ;;

eval <*A stack> *Stack c_top | top @public -> <A maybe> {
  Stack = d: *D fs: *Fs stack$,
  D &(Fs top_f)
} ;;

eval <*A! fxstack> *FxStack fx_top | top @public -> <A maybe> {
  (FxStack as_stack) c_top
} ;;

eval <*A stack> *Stack c_pop | pop @public -> <<A <A stack> tuple> maybe> {
  Stack = d: *D fs: *Fs stack$,
  D &(Fs pop_f) >> case {
  ; (| *E, *D' |) value$ -> (| E, d: D' fs: Fs stack$ |) value$
  ; ** -> none$
  }
} ;;

eval <*A! fxstack> *FxStack fx_pop | pop @public -> <<A <A fxstack> tuple> maybe> {
  (FxStack as_stack) c_pop >> case {
  ; (| *E, *Stack' |) value$ -> (| E, Stack' as_fxstack |) value$
  ; ** -> none$
  }
} ;;

eval <*A stack> *Stack c_to_list | to_list @public -> <A list> {
  Stack = d: *D fs: *Fs stack$,
  D &(Fs to_list_f)
} ;;

eval <*A! fxstack> *FxStack fx_to_list | to_list @public -> <A list> {
  (FxStack as_stack) c_to_list
} ;;

eval <*A stack> *Stack c_clear | clear @public -> <A stack> {
  Stack = d: *D fs: *Fs stack$,
  d: (D &(Fs clear_f)) :: Stack stack$
} ;;

eval <*A! fxstack> *FxStack fx_clear | clear @public -> <A fxstack> {
  (FxStack as_stack) c_clear = *Stack',
  Stack' as_fxstack
} ;;

eval <*A stack> *Stack <A list> *Elems c_push_list | push_list @public -> <A stack> {
  Stack (Elems list.iter) push_iter
} ;;

eval <*A stack> *Stack <A iter> *Iter c_push_iter | push_iter @public -> <A stack> {
  Iter next >> case {
  ; (| *E, *Iter' |) value$ -> (Stack E push) Iter' &&
  ; ** -> Stack
  }
} ;;

eval <*A! fxstack> *FxStack <A list> *Elems fx_push_list | push_list @public -> <A fxstack> {
  (FxStack as_stack) Elems c_push_list = *Stack',
  Stack' as_fxstack
} ;;

eval <*A! fxstack> *FxStack <A iter> *Iter fx_push_iter | push_iter @public -> <A fxstack> {
  (FxStack as_stack) Iter c_push_iter = *Stack',
  Stack' as_fxstack
} ;;

eval <*A stack> *Stack c_iter | iter @public -> <A iter> {
  \\ <A iter_res> { Stack c_iter_next } iter$
} ;;

eval <*A stack> *Stack c_iter_next -> <A iter_res> {
  Stack pop >> case {
  ; (| *E, *Stack' |) value$ ->
    (| E, \\ <A iter_res> { Stack' c_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;

eval <*A! fxstack> *FxStack fx_iter | iter @public -> <A iter> {
  (FxStack as_stack) c_iter
} ;;


### framework of faeture

eval <*T![ *A a'stack ]> *FStack f_empty? | empty? @public -> <bool> {
  FStack _feature_a'stack = *Stack_fo,
  Stack_fo fo_empty?
} ;;

eval <*T! *A stack_fo> *Stack_fo fo_empty? | empty? @public -> <bool> {
  Stack_fo = d: *D fs: *Fs stack_fo$,
  D Fs _empty?
} ;;

eval <*T![ *A a'stack ]> *FStack f_depth | depth @public -> <int> {
  FStack _feature_a'stack = *Stack_fo,
  Stack_fo fo_depth
} ;;

eval <*T! *A stack_fo> *Stack_fo fo_depth | depth @public -> <int> {
  Stack_fo = d: *D fs: *Fs stack_fo$,
  D Fs _depth
} ;;

eval <*T![ *A a'stack ]> *FStack <A> *Elem f_push | push @public -> <T> {
  FStack _feature_a'stack = *Stack_fo,
  Stack_fo Elem fo_push = d: *D' fs: *Fs' stack_fo$,
  D'
} ;;

eval <*T! *A stack_fo> *Stack_fo <A> *Elem fo_push | push @public -> <T A stack_fo> {
  Stack_fo = d: *D fs: *Fs stack_fo$,
  D Fs Elem _push = *D',
  d: D' fs: Fs stack_fo$
} ;;

eval <*T![ *A a'stack ]> *FStack f_top | top @public -> <A maybe> {
  FStack _feature_a'stack = *Stack_fo,
  Stack_fo fo_top
} ;;

eval <*T! *A stack_fo> *Stack_fo fo_top | top @public -> <A maybe> {
  Stack_fo = d: *D fs: *Fs stack_fo$,
  D Fs _top
} ;;

eval <*T![ *A a'stack ]> *FStack f_pop | pop @public -> <<A T tuple> maybe> {
  FStack _feature_a'stack = *Stack_fo,
  Stack_fo fo_pop >> case {
  ; (| *Elem, d: *D' fs: *Fs' stack_fo$ |) value$ -> (| Elem, D' |) value$
  ; ** -> none$
  }
} ;;

eval <*T! *A stack_fo> *Stack_fo fo_pop | pop @public -> <<A <T A stack_fo> tuple> maybe> {
  Stack_fo = d: *D fs: *Fs stack_fo$,
  D Fs _pop >> case {
  ; (| *Elem, *D' |) value$ -> (| Elem, d: D' fs: Fs stack_fo$ |) value$
  ; ** -> none$
  }
} ;;

eval <*T![ *A a'stack ]> *FStack f_to_list | to_list @public -> <A list> {
  FStack _feature_a'stack = *Stack_fo,
  Stack_fo fo_to_list
} ;;

eval <*T! *A stack_fo> *Stack_fo fo_to_list | to_list @public -> <A list> {
  Stack_fo = d: *D fs: *Fs stack_fo$,
  D Fs _to_list
} ;;

eval <*T![ *A a'stack ]> *FStack f_clear | clear @public -> <T> {
  FStack _feature_a'stack = *Stack_fo,
  Stack_fo fo_clear = d: *D' fs: *Fs' stack_fo$,
  D'
} ;;

eval <*T! *A stack_fo> *Stack_fo fo_clear | clear @public -> <T A stack_fo> {
  Stack_fo = d: *D fs: *Fs stack_fo$,
  D Fs _clear = *D',
  d: D' fs: Fs stack_fo$
} ;;

eval <*T![ *A a'stack ]> *FStack <A list> *Elems f_push_list | push_list @public -> <T> {
  FStack (Elems list.iter) f_push_iter
} ;;

eval <*T![ *A a'stack ]> *FStack <A iter> *Iter f_push_iter | push_iter @public -> <T> {
  FStack _feature_a'stack = *Stack_fo,
  Stack_fo Iter fo_push_iter = d: *D' fs: *Fs' stack_fo$,
  D'
} ;;

eval <*T! *A stack_fo> *Stack_fo <A list> *Elems fo_push_list | push_list @public -> <T A stack_fo> {
  Stack_fo (Elems list.iter) fo_push_iter
} ;;

eval <*T! *A stack_fo> *Stack_fo <A iter> *Iter fo_push_iter | push_iter @public -> <T A stack_fo> {
  Iter next >> case {
  ; (| *Elem, *Iter' |) value$ -> (Stack_fo Elem fo_push) Iter' &&
  ; ** -> Stack_fo
  }
} ;;

eval <*T![ *A a'stack ]> *FStack f_iter | iter @public -> <A iter> {
  FStack _feature_a'stack = *Stack_fo,
  Stack_fo fo_iter
} ;;

eval <*T! *A stack_fo> *Stack_fo fo_iter | iter @public -> <A iter> {
  \\ <A iter_res> { Stack_fo fo_iter_next } iter$
} ;;

eval <*T! *A stack_fo> *Stack_fo fo_iter_next -> <A iter_res> {
  Stack_fo fo_pop >> case {
  ; (| *Elem, *Stack_fo' |) value$ ->
    (| Elem, \\ <A iter_res> { Stack_fo' fo_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;


### feature implementation of feature object

eval <*T! *A stack_fo> *Stack_fo as_a'col -> <A col> {
  d: ((Stack_fo fo_to_list) fo_col_d$) fs: set_fo_col_fs col$
} ;;

extend <*A _1> -> fo_col_d := <A list> fo_col_d$ ;;

eval set_fo_col_fs -> <<*A col_d> A col_fs> {
  empty?_f_: (\ <A col_d> *D -> <bool> {
    D = *Es fo_col_d$, Es list.empty?
  } value$)
  size_f: \ <A col_d> *D -> <int> {
    D = *Es fo_col_d$, Es list.length
  }
  take_f: \ <A col_d> *D
      -> <<A <A col_d> tuple> maybe> {
    D = *Es fo_col_d$, Es case {
    ; [ *E ; *Es' ] -> (| E, Es' fo_col_d$ |) value$
    ; ** -> none$
    }
  }
  col_fs$
} ;;


### feature implementation of common-behavior object

eval <*A! fxstack> *FxStack as_a'stack -> <<A fxstack> A stack_fo> {
  d: FxStack fs: fxstack_fo_fs stack_fo$
} ;;

eval fxstack_fo_fs -> <<*A! fxstack> A stack_fs> {
  empty?_f: ^fx_empty?
  depth_f: ^fx_depth
  push_f: ^fx_push
  top_f: ^fx_top
  pop_f: ^fx_pop
  to_list_f_: (^fx_to_list value$)
  clear_f: ^fx_clear
  stack_fs$
} ;;


### subroutines

eval <*D *A stack_fs> *Fs stack_fs_to_list_f | to_list_f @public -> <D <A list> fun> {
  Fs to_list_f_ >> case {
  ; *F value$ -> F
  ; ** ->
    \ <D> *Stack_d -> <A list> {
      Stack_d [] &\ <D> *DD <A list> *L_r -> <A list> {
        DD &(Fs pop_f) >> case {
        ; (| *Elem, *DD' |) value$ -> DD' [ Elem ; L_r ] &&
        ; ** -> L_r list.reverse
        }
      }
    }
  }
} ;;

eval <*D> *DD <D *A stack_fs> *Fs _empty? -> <bool> {
  DD &(Fs empty?_f)
} ;;

eval <*D> *DD <D *A stack_fs> *Fs _depth -> <int> {
  DD &(Fs depth_f)
} ;;

eval <*D> *DD <D *A stack_fs> *Fs <A> *Elem _push -> <D> {
  DD Elem &(Fs push_f)
} ;;

eval <*D> *DD <D *A stack_fs> *Fs _top -> <A maybe> {
  DD &(Fs top_f)
} ;;

eval <*D> *DD <D *A stack_fs> *Fs _pop -> <<A D tuple> maybe> {
  DD &(Fs pop_f)
} ;;

eval <*D> *DD <D *A stack_fs> *Fs _to_list -> <A list> {
  DD &(Fs to_list_f)
} ;;

eval <*D> *DD <D *A stack_fs> *Fs _clear -> <D> {
  DD &(Fs clear_f)
} ;;
