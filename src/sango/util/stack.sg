###########################################################################
# MIT License                                                             #
# Copyright (c) 2018 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.stack" ;;

import "sango.list" -> list ;;
import "sango.util.iter" -> iter ;;

### definition of function set

data <*D *A stack_fs> @public :=
  empty?_f: <D bool fun>
  depth_f: <D int fun>
  push_f: <D A D fun>
  top_f: <D <A maybe> fun>
  pop_f: <D <<A D tuple> maybe> fun>
  to_list_f_: <<D <A list> fun> maybe>
  clear_f: <D D fun>
  stack_fs$ ;;


### definition of feature

feature <*T> [ *A a'stack ] @public -> <T A stack_fs> ;;


### definition of common-behavior object

alias type <*A d> @public := <A _1+> ;;

data <*A stack> @public :=
  d: <A d>
  fs: <<A d> A stack_fs>
  stack$
++ a'stack_impl -> [ A a'stack ] ;;

eval a'stack_impl -> <<*A stack> A stack_fs> {
  empty?_f: ^c_empty?
  depth_f: ^c_depth
  push_f: ^c_push
  top_f: ^c_top
  pop_f: ^c_pop
  to_list_f_: (^c_to_list value$)
  clear_f: ^c_clear
  stack_fs$
} ;;


### implementation of common-behavior object

eval <*A stack> *Stack c_empty? | empty? @public -> <bool> {
  Stack = d: *D fs: *Fs stack$,
  D Fs do_empty?
} ;;

eval <*A stack> *Stack c_depth | depth @public -> <int> {
  Stack = d: *D fs: *Fs stack$,
  D Fs do_depth
} ;;

eval <*A stack> *Stack <A> *Elem c_push | push @public -> <A stack> {
  Stack = d: *D fs: *Fs stack$,
  D Fs Elem do_push = *D',
  d: D' fs: Fs stack$
} ;;

eval <*A stack> *Stack c_top | top @public -> <A maybe> {
  Stack = d: *D fs: *Fs stack$,
  D Fs do_top
} ;;

eval <*A stack> *Stack c_pop | pop @public -> <<A <A stack> tuple> maybe> {
  Stack = d: *D fs: *Fs stack$,
  D Fs do_pop >> case {
  ; (| *E, *D' |) value$ -> (| E, d: D' fs: Fs stack$ |) value$
  ; ** -> none$
  }
} ;;

eval <*A stack> *Stack c_to_list | to_list @public -> <A list> {
  Stack = d: *D fs: *Fs stack$,
  D Fs do_to_list
} ;;

eval <*A stack> *Stack c_clear | clear @public -> <A stack> {
  Stack = d: *D fs: *Fs stack$,
  D Fs do_clear = *D',
  d: D' fs: Fs stack$
} ;;

eval <*A stack> *Stack <A list> *Elems c_push_list | push_list @public -> <A stack> {
  Stack (Elems list.iter) c_push_iter
} ;;

eval <*A stack> *Stack <A iter> *Iter c_push_iter | push_iter @public -> <A stack> {
  Stack = d: *D fs: *Fs stack$,
  D Fs Iter do_push_iter = *D',
  d: D' fs: Fs stack$
} ;;

eval <*A stack> *Stack c_iter | iter @public -> <A iter> {
  Stack = d: *D fs: *Fs stack$,
  D Fs do_iter
} ;;


### framework of faeture

eval <*T[ *A a'stack ]> *FStack f_empty? | empty? @public -> <bool> {
  FStack _feature_a'stack = *Stack_fs,
  FStack Stack_fs do_empty?
} ;;

eval <*T[ *A a'stack ]> *FStack f_depth | depth @public -> <int> {
  FStack _feature_a'stack = *Stack_fs,
  FStack Stack_fs do_depth
} ;;

eval <*T[ *A a'stack ]> *FStack <A> *Elem f_push | push @public -> <T> {
  FStack _feature_a'stack = *Stack_fs,
  FStack Stack_fs Elem do_push
} ;;

eval <*T[ *A a'stack ]> *FStack f_top | top @public -> <A maybe> {
  FStack _feature_a'stack = *Stack_fs,
  FStack Stack_fs do_top
} ;;

eval <*T[ *A a'stack ]> *FStack f_pop | pop @public -> <<A T tuple> maybe> {
  FStack _feature_a'stack = *Stack_fs,
  FStack Stack_fs do_pop
} ;;

eval <*T[ *A a'stack ]> *FStack f_to_list | to_list @public -> <A list> {
  FStack _feature_a'stack = *Stack_fs,
  FStack Stack_fs do_to_list
} ;;

eval <*T[ *A a'stack ]> *FStack f_clear | clear @public -> <T> {
  FStack _feature_a'stack = *Stack_fs,
  FStack Stack_fs do_clear
} ;;

eval <*T[ *A a'stack ]> *FStack <A list> *Elems f_push_list | push_list @public -> <T> {
  FStack (Elems list.iter) f_push_iter
} ;;

eval <*T[ *A a'stack ]> *FStack <A iter> *Iter f_push_iter | push_iter @public -> <T> {
  FStack _feature_a'stack = *Stack_fs,
  FStack Stack_fs Iter do_push_iter
} ;;

eval <*T[ *A a'stack ]> *FStack f_iter | iter @public -> <A iter> {
  FStack _feature_a'stack = *Stack_fs,
  FStack Stack_fs do_iter
} ;;


### subroutines

eval <*D *A stack_fs> *Fs stack_fs_to_col_fs | to_col_fs @public -> <D A col_fs> {
  Fs = empty?_f: *Empty_f depth_f: *Depth_f *** stack_fs$,
  empty?_f_: (Empty_f value$)
  size_f: Depth_f
  iter_f: \ <D> *Z -> <A iter> { Z Fs do_iter }
  col_fs$
} ;;

eval <*D *A stack_fs> *Fs stack_fs_to_list_f | to_list_f @public -> <D <A list> fun> {
  Fs to_list_f_ >> case {
  ; *F value$ -> F
  ; ** ->
    \ <D> *Stack_d -> <A list> {
      Stack_d [] &\ <D> *Z <A list> *L_r -> <A list> {
        Z &(Fs pop_f) >> case {
        ; (| *Elem, *Z' |) value$ -> Z' [ Elem ; L_r ] &&
        ; ** -> L_r list.reverse
        }
      }
    }
  }
} ;;

eval <*D> *Z <D *A stack_fs> *Fs do_empty? @public -> <bool> {
  Z &(Fs empty?_f)
} ;;

eval <*D> *Z <D *A stack_fs> *Fs do_depth @public -> <int> {
  Z &(Fs depth_f)
} ;;

eval <*D> *Z <D *A stack_fs> *Fs <A> *Elem do_push @public -> <D> {
  Z Elem &(Fs push_f)
} ;;

eval <*D> *Z <D *A stack_fs> *Fs do_top @public -> <A maybe> {
  Z &(Fs top_f)
} ;;

eval <*D> *Z <D *A stack_fs> *Fs do_pop @public -> <<A D tuple> maybe> {
  Z &(Fs pop_f)
} ;;

eval <*D> *Z <D *A stack_fs> *Fs do_to_list @public -> <A list> {
  Z &(Fs to_list_f)
} ;;

eval <*D> *Z <D *A stack_fs> *Fs do_clear @public -> <D> {
  Z &(Fs clear_f)
} ;;

eval <*D> *Z <D *A stack_fs> *Fs <A list> *Elems do_push_list | push_list @public -> <D> {
  Z Fs (Elems list.iter) do_push_iter
} ;;

eval <*D> *Z <D *A stack_fs> *Fs <A iter> *Iter do_push_iter | push_iter @public -> <D> {
  Iter next >> case {
  ; (| *E, *Iter' |) value$ -> (Z Fs E do_push) Fs Iter' &&
  ; ** -> Z
  }
} ;;

eval <*D> *Z <D *A stack_fs> *Fs do_iter | iter @public -> <A iter> {
  \\ <A iter_res> { Z Fs do_iter_next } iter$
} ;;

eval <*D> *Z <D *A stack_fs> *Fs do_iter_next -> <A iter_res> {
  Z Fs do_pop >> case {
  ; (| *E, *Z' |) value$ ->
    (| E, \\ <A iter_res> { Z' Fs do_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;
