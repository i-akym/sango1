###########################################################################
# MIT License                                                             #
# Copyright (c) 2018 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.bag" ;;

import "sango.list" -> list ;;
import "sango.util.iter" -> iter ;;

### definition of function set

data <*D *A bag_fs> @public :=
  empty?_f: <D bool fun>
  size_f: <D int fun>
  contain?_f: <D A bool fun>
  get_all_f: <D A <A list> fun>
  add_f: <D A D fun>
  remove_f: <D A <D <A maybe> tuple> fun>
  remove_all_f: <D A <D <A list> tuple> fun>
  delete_f_: <<D A D fun> maybe>
  delete_all_f_: <<D A D fun> maybe>
  take_f: <D <<A D tuple> maybe> fun>
  clear_f: <D D fun>
  bag_fs$ ;;


### definition of feature

feature <*T> [ *A a'bag ] @public -> <T A bag_fs> ;;


### definition of common-behavior object

alias type <*A d> @public := <A _1+> ;;

data <*A bag> @public :=
  d: <A d>
  fs: <<A d> A bag_fs>
  bag$
++ a'bag_impl -> [ A a'bag ] ;;

eval a'bag_impl -> <<*A bag> A bag_fs> {
  empty?_f: ^c_empty?
  size_f: ^c_size
  contain?_f: ^c_contain?
  get_all_f: ^c_get_all
  add_f: ^c_add
  remove_f: ^c_remove
  remove_all_f: ^c_remove_all
  delete_f_: (^c_delete value$)
  delete_all_f_: (^c_delete_all value$)
  take_f: ^c_take
  clear_f: ^c_clear
  bag_fs$
} ;;


### implementation of common-behavior object

eval <*A bag> *Bag c_empty? | empty? @public -> <bool> {
  Bag = d: *D fs: *Fs bag$,
  D Fs do_empty?
} ;;

eval <*A bag> *Bag c_size | size @public -> <int> {
  Bag = d: *D fs: *Fs bag$,
  D Fs do_size
} ;;

eval <*A bag> *Bag <A> *Elem c_contain? | contain? @public -> <bool> {
  Bag = d: *D fs: *Fs bag$,
  D Fs Elem do_contain?
} ;;

eval <*A bag> *Bag <A> *Elem c_get_all | get_all @public -> <A list> {
  Bag = d: *D fs: *Fs bag$,
  D Fs Elem do_get_all
} ;;

eval <*A bag> *Bag <A> *Elem c_add | add @public -> <A bag> {
  Bag = d: *D fs: *Fs bag$,
  D Fs Elem do_add = *D',
  d: D' fs: Fs bag$
} ;;

eval <*A bag> *Bag <A> *Elem c_remove | remove @public -> <<A bag> <A maybe> tuple> {
  Bag = d: *D fs: *Fs bag$,
  D Fs Elem do_remove = (| *D', *Removed_ |),
  (| d: D' fs: Fs bag$, Removed_ |)
} ;;

eval <*A bag> *Bag <A> *Elem c_remove_all | remove_all @public -> <<A bag> <A list> tuple> {
  Bag = d: *D fs: *Fs bag$,
  D Fs Elem do_remove_all = (| *D', *Removed_list |),
  (| d: D' fs: Fs bag$, Removed_list |)
} ;;

eval <*A bag> *Bag <A> *Elem c_delete | delete @public -> <A bag> {
  Bag = d: *D fs: *Fs bag$,
  D Fs Elem do_delete = *D',
  d: D' fs: Fs bag$
} ;;

eval <*A bag> *Bag <A> *Elem c_delete_all | delete_all @public -> <A bag> {
  Bag = d: *D fs: *Fs bag$,
  D Fs Elem do_delete_all = *D',
  d: D' fs: Fs bag$
} ;;

eval <*A bag> *Bag c_take | take @public -> <<A <A bag> tuple> maybe> {
  Bag = d: *D fs: *Fs bag$,
  D Fs do_take >> case {
  ; (| *Elem, *D' |) value$ -> (| Elem, d: D' fs: Fs bag$ |) value$
  ; ** -> none$
  }
} ;;

eval <*A bag> *Bag c_clear | clear @public -> <A bag> {
  Bag = d: *D fs: *Fs bag$,
  D Fs do_clear = *D',
  d: D' fs: Fs bag$
} ;;

eval <*A bag> *Bag <A list> *Elems c_add_list | add_list @public -> <A bag> {
  Bag (Elems list.iter) c_add_iter
} ;;

eval <*A bag> *Bag <A iter> *Iter c_add_iter | add_iter @public -> <A bag> {
  Bag = d: *D fs: *Fs bag$,
  D Fs Iter do_add_iter = *D',
  d: D' fs: Fs bag$
} ;;

eval <*A bag> *Bag <A list> *Elems c_delete_list | delete_list @public -> <A bag> {
  Bag (Elems list.iter) c_delete_iter
} ;;

eval <*A bag> *Bag <A iter> *Iter c_delete_iter | delete_iter @public -> <A bag> {
  Bag = d: *D fs: *Fs bag$,
  D Fs Iter do_delete_iter = *D',
  d: D' fs: Fs bag$
} ;;

eval <*A bag> *Bag <A list> *Elems c_delete_all_list | delete_all_list @public -> <A bag> {
  Bag (Elems list.iter) c_delete_all_iter
} ;;

eval <*A bag> *Bag <A iter> *Iter c_delete_all_iter | delete_all_iter @public -> <A bag> {
  Bag = d: *D fs: *Fs bag$,
  D Fs Iter do_delete_all_iter = *D',
  d: D' fs: Fs bag$
} ;;

eval <*A bag> *Bag c_iter | iter @public -> <A iter> {
  Bag = d: *D fs: *Fs bag$,
  D Fs do_iter
} ;;


### framework of faeture

eval <*T[ *A a'bag ]> *FBag f_empty? | empty? @public -> <bool> {
  FBag _feature_a'bag = *Bag_fs,
  FBag Bag_fs do_empty?
} ;;

eval <*T[ *A a'bag ]> *FBag f_size | size @public -> <int> {
  FBag _feature_a'bag = *Bag_fs,
  FBag Bag_fs do_size
} ;;

eval <*T[ *A a'bag ]> *FBag <A> *Elem f_contain? | contain? @public -> <bool> {
  FBag _feature_a'bag = *Bag_fs,
  FBag Bag_fs Elem do_contain?
} ;;

eval <*T[ *A a'bag ]> *FBag <A> *Elem f_get_all | get_all @public -> <A list> {
  FBag _feature_a'bag = *Bag_fs,
  FBag Bag_fs Elem do_get_all
} ;;

eval <*T[ *A a'bag ]> *FBag <A> *Elem f_add | add @public -> <T> {
  FBag _feature_a'bag = *Bag_fs,
  FBag Bag_fs Elem do_add
} ;;

eval <*T[ *A a'bag ]> *FBag <A> *Elem f_remove | remove @public -> <T <A maybe> tuple> {
  FBag _feature_a'bag = *Bag_fs,
  FBag Bag_fs Elem do_remove
} ;;

eval <*T[ *A a'bag ]> *FBag <A> *Elem f_remove_all | remove_all @public -> <T <A list> tuple> {
  FBag _feature_a'bag = *Bag_fs,
  FBag Bag_fs Elem do_remove_all
} ;;

eval <*T[ *A a'bag ]> *FBag <A> *Elem f_delete | delete @public -> <T> {
  FBag _feature_a'bag = *Bag_fs,
  FBag Bag_fs Elem do_delete
} ;;

eval <*T[ *A a'bag ]> *FBag <A> *Elem f_delete_all | delete_all @public -> <T> {
  FBag _feature_a'bag = *Bag_fs,
  FBag Bag_fs Elem do_delete_all
} ;;

eval <*T[ *A a'bag ]> *FBag f_take | take @public -> <<A T tuple> maybe> {
  FBag _feature_a'bag = *Bag_fs,
  FBag Bag_fs do_take
} ;;

eval <*T[ *A a'bag ]> *FBag f_clear | clear @public -> <T> {
  FBag _feature_a'bag = *Bag_fs,
  FBag Bag_fs do_clear
} ;;

eval <*T[ *A a'bag ]> *FBag <A list> *Elems f_add_list | add_list @public -> <T> {
  FBag (Elems list.iter) f_add_iter
} ;;

eval <*T[ *A a'bag ]> *FBag <A iter> *Iter f_add_iter | add_iter @public -> <T> {
  FBag _feature_a'bag = *Bag_fs,
  FBag Bag_fs Iter do_add_iter
} ;;

eval <*T[ *A a'bag ]> *FBag <A list> *Elems f_delete_list | delete_list @public -> <T> {
  FBag (Elems list.iter) f_delete_iter
} ;;

eval <*T[ *A a'bag ]> *FBag <A iter> *Iter f_delete_iter | delete_iter @public -> <T> {
  FBag _feature_a'bag = *Bag_fs,
  FBag Bag_fs Iter do_delete_iter
} ;;

eval <*T[ *A a'bag ]> *FBag <A list> *Elems f_delete_all_list | delete_all_list @public -> <T> {
  FBag (Elems list.iter) f_delete_all_iter
} ;;

eval <*T[ *A a'bag ]> *FBag <A iter> *Iter f_delete_all_iter | delete_all_iter @public -> <T> {
  FBag _feature_a'bag = *Bag_fs,
  FBag Bag_fs Iter do_delete_all_iter
} ;;

eval <*T[ *A a'bag ]> *FBag f_iter | iter @public -> <A iter> {
  FBag _feature_a'bag = *Bag_fs,
  FBag Bag_fs do_iter
} ;;


### subroutines

eval <*D *A bag_fs> *Fs bag_fs_to_col_fs | to_col_fs @public -> <D A col_fs> {
  Fs = empty?_f: *Empty_f size_f: *Size_f *** bag_fs$,
  empty?_f_: (Empty_f value$)
  size_f: Size_f
  iter_f: \ <D> *Z -> <A iter> { Z Fs do_iter }
  col_fs$
} ;;

eval <*D *A bag_fs> *Fs bag_fs_delete_f | delete_f @public -> <D A D fun> {
  Fs delete_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *Z <A> *Elem -> <D> {
      Z Elem &(Fs remove_f) = (| *Z', ** |),
      Z'
    }
  }
} ;;

eval <*D *A bag_fs> *Fs bag_fs_delete_all_f | delete_all_f @public -> <D A D fun> {
  Fs delete_all_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *Z <A> *Elem -> <D> {
      Z Elem &(Fs remove_all_f) = (| *Z', ** |),
      Z'
    }
  }
} ;;

eval <*D> *Z <D *A bag_fs> *Fs do_empty? @public -> <bool> {
  Z &(Fs empty?_f)
} ;;

eval <*D> *Z <D *A bag_fs> *Fs do_size @public -> <int> {
  Z &(Fs size_f)
} ;;

eval <*D> *Z <D *A bag_fs> *Fs <A> *Elem do_contain? @public -> <bool> {
  Z Elem &(Fs contain?_f)
} ;;

eval <*D> *Z <D *A bag_fs> *Fs <A> *Elem do_get_all @public -> <A list> {
  Z Elem &(Fs get_all_f)
} ;;

eval <*D> *Z <D *A bag_fs> *Fs <A> *Elem do_add @public -> <D> {
  Z Elem &(Fs add_f)
} ;;

eval <*D> *Z <D *A bag_fs> *Fs <A> *Elem do_remove @public -> <D <A maybe> tuple> {
  Z Elem &(Fs remove_f)
} ;;

eval <*D> *Z <D *A bag_fs> *Fs <A> *Elem do_remove_all @public -> <D <A list> tuple> {
  Z Elem &(Fs remove_all_f)
} ;;

eval <*D> *Z <D *A bag_fs> *Fs <A> *Elem do_delete @public -> <D> {
  Z Elem &(Fs delete_f)
} ;;

eval <*D> *Z <D *A bag_fs> *Fs <A> *Elem do_delete_all @public -> <D> {
  Z Elem &(Fs delete_all_f)
} ;;

eval <*D> *Z <D *A bag_fs> *Fs do_take @public -> <<A D tuple> maybe> {
  Z &(Fs take_f)
} ;;

eval <*D> *Z <D *A bag_fs> *Fs do_clear @public -> <D> {
  Z &(Fs clear_f)
} ;;

eval <*D> *Z <D *A bag_fs> *Fs <A list> *Elems do_add_list | add_list @public -> <D> {
  Z Fs (Elems list.iter) do_add_iter
} ;;

eval <*D> *Z <D *A bag_fs> *Fs <A iter> *Iter do_add_iter | add_iter @public -> <D> {
  Iter next >> case {
  ; (| *Elem, *Iter' |) value$ -> (Z Fs Elem do_add) Fs Iter' &&
  ; ** -> Z
  }
} ;;

eval <*D> *Z <D *A bag_fs> *Fs <A list> *Elems do_delete_list | delete_list @public -> <D> {
  Z Fs (Elems list.iter) do_delete_iter
} ;;

eval <*D> *Z <D *A bag_fs> *Fs <A iter> *Iter do_delete_iter | delete_iter @public -> <D> {
  Iter next >> case {
  ; (| *Elem, *Iter' |) value$ -> (Z Fs Elem do_delete) Fs Iter' &&
  ; ** -> Z
  }
} ;;

eval <*D> *Z <D *A bag_fs> *Fs <A list> *Elems do_delete_all_list | delete_all_list @public -> <D> {
  Z Fs (Elems list.iter) do_delete_all_iter
} ;;

eval <*D> *Z <D *A bag_fs> *Fs <A iter> *Iter do_delete_all_iter | delete_all_iter @public -> <D> {
  Iter next >> case {
  ; (| *Elem, *Iter' |) value$ -> (Z Fs Elem do_delete_all) Fs Iter' &&
  ; ** -> Z
  }
} ;;

eval <*D> *Z <D *A bag_fs> *Fs do_iter | iter @public -> <A iter> {
  \\ <A iter_res> { Z Fs do_iter_next } iter$
} ;;

eval <*D> *Z <D *A bag_fs> *Fs do_iter_next -> <A iter_res> {
  Z Fs do_take >> case {
  ; (| *Elem, *Z' |) value$ ->
    (| Elem, \\ <A iter_res> { Z' Fs do_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;
