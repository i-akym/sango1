###########################################################################
# MIT License                                                             #
# Copyright (c) 2018 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.sort" ;;

import "sango.list" -> list ;;
import "sango.string" -> str ;;
import "sango.util.avltree" -> avl ;;
import "sango.util.iter" -> iter ;;

alias type <*A sort_d_tree> := <A <A list> avl.tree> ;;

data <*A sort_d> @opaque :=
  extracted: <A list>
  tree: <A sort_d_tree>
  sort_d$ ;;

eval <*A list> *List <A ord_fs> *Ord sort_list | sort @public -> <A list> {
  (List list.iter) Ord sort >> list.new_list
} ;;

eval <*A string> *Str <A ord_fs> *Ord sort_string | sort @public -> <A string> {
  Str str.length = *L,
  L ((Str str.iter) Ord sort) str.new_string
} ;;

eval <*A iter> *Iter <A ord_fs> *Ord sort @public -> <A iter> {
  Iter (Ord avl.new_tree) &\ <A iter> *I <A sort_d_tree> *T -> <A sort_d_tree> {
    I next >> case {
    ; (| *V, *I' |) value$ -> I' (T V add) &&
    ; none$ -> T
    }
  } = *Tree,
  \\ <A iter_res> { (extracted: [] tree: Tree sort_d$) iter_next } iter$
} ;;

eval <*A sort_d_tree> *T <A> *V add -> <A sort_d_tree> {
  T V avl.assoc >> case {
  ; *Q value$ -> Q
  ; none$ -> []
  } = *Vs_r,
  T V [ V ; Vs_r ]  avl.add
} ;;

eval <*A sort_d> *D iter_next -> <A iter_res> {
  D sort_d_take >> case {
  ; (| *V, *D' |) value$ ->
    (| V, \\ <A iter_res> { D' iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;

eval <*A sort_d> *D sort_d_take -> <<A <A sort_d> tuple> maybe> {
  D = extracted: *Extracted tree: *Tree sort_d$,
  Extracted Tree &\ <A list> *Es <A sort_d_tree> *T -> <<A <A sort_d> tuple> maybe> {
    Es case {
    ; [ *E ; *Es' ] -> (| E, extracted: Es' tree: T :: D sort_d$ |) value$
    ; [] ->
      T avl.take >> case {
      ; (| (| **, *Vs |), *T' |) value$ -> (Vs list.reverse) T' &&
      ; none$ -> none$
      }
    }
  }
} ;;
