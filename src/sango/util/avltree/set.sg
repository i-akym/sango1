###########################################################################
# MIT License                                                             #
# Copyright (c) 2021 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.avltree.set" ;;

import "sango.data" -> data ;;
import "sango.tuple" -> tuple ;;
import "sango.util.avltree.base" -> avl ;;
import "sango.util.set" -> set ;;

extend <*A data.d1> :=
  ord: <A ord_fs>
  body: <A avl.tree>
  d$ ;;

eval <*A ord_fs> *Ord <A> *X locator -> <<A avl.node> <A avl.locate> fun> {
  \ <A avl.node> *N -> <A avl.locate> { 
    X (N avl.assoc) Ord compare >> case {
    ; lt$ -> ^^ avl.left$
    ; eq$ -> avl.just$
    ; gt$ -> ^^ avl.right$
    }
  }
} ;;

eval <*A ord_fs> *Ord <A> *X put_new_locator -> <<A avl.node> <A avl.locate> fun> {
  \ <A avl.node> *N -> <A avl.locate> { 
    X (N avl.assoc) Ord compare >> case {
    ; lt$ -> ^^ avl.left$
    ; eq$ -> avl.no_info$ avl.abort$
    ; gt$ -> ^^ avl.right$
    }
  }
} ;;

eval <*A ord_fs> *Ord new_set @public -> <A set.set> {
  ord: Ord body: avl.new_tree d$ = *D,
  d: D fs: set_fs set.set$
} ;;

eval set_fs -> <*A set.set_fs> {
  empty?_f: ^empty?
    size_f: ^size
    get_f: ^get
    contain?_f_: (^contain? value$)
    put_f: ^put
    put_new_f_: (^put_new value$)
    add_f_: (^add value$)
    remove_f: ^remove
    delete_f_: (^delete value$)
    take_f: ^take
    clear_f: ^clear
    set.set_fs$
} ;;

eval <*A data.d1+> *Set_d empty? -> <bool> {
  Set_d size >> zero?
} ;;

eval <*A data.d1+> *Set_d size -> <int> {
  Set_d = body: *Body *** d$,
  Body avl.size
} ;;

eval <*A data.d1+> *Set_d <A> *Elem get -> <A maybe> {
  Set_d = ord: *Ord body: *Body *** d$,
  Body (Ord Elem locator) avl.get >> case {
  ; *E avl.get_done$ -> E value$
  ; ** -> none$
  }
} ;;

eval <*A data.d1+> *Set_d <A> *Elem contain? -> <bool> {
  Set_d Elem get >> something?
} ;;

eval <*A data.d1+> *Set_d <A> *Elem put -> <<A data.d1+> <A maybe> tuple> {
  Set_d = ord: *Ord body: *Body *** d$,
  Body (Ord Elem locator) Elem avl.put >> case {
  ; *Body' avl.put_new_done$ -> (| body: Body' :: Set_d d$, none$ |)
  ; *Body' *Replaced avl.put_replace_done$ -> (| body: Body' :: Set_d d$, Replaced value$ |)
  }
} ;;

eval <*A data.d1+> *Set_d <A> *Elem put_new -> <<A data.d1+> bool tuple> {
  Set_d = ord: *Ord body: *Body *** d$,
  Body (Ord Elem put_new_locator) Elem avl.put >> case {
  ; *Body' avl.put_new_done$ -> (| body: Body' :: Set_d d$, true$ |)
  ; ** avl.put_aborted$ -> (| Set_d, false$ |)
  }
} ;;

eval <*A data.d1+> *Set_d <A> *Elem add -> <A data.d1+> {
  Set_d Elem put >> tuple.pair_first
} ;;

eval <*A data.d1+> *Set_d <A> *Elem remove -> <<A data.d1+> <A maybe> tuple> {
  Set_d = ord: *Ord body: *Body *** d$,
  Body (Ord Elem locator) avl.remove >> case {
  ; *Body' *Removed avl.remove_done$ -> (| body: Body' :: Set_d d$, Removed value$ |)
  ; avl.remove_not_found$ -> (| Set_d, none$ |)
  }
} ;;

eval <*A data.d1+> *Set_d <A> *Elem delete -> <A data.d1+> {
  Set_d Elem remove >> tuple.pair_first
} ;;

eval <*A data.d1+> *Set_d take -> <<A <A data.d1+> tuple> maybe> {
  Set_d = body: *Body *** d$,
  Body avl.take >> case {
  ; (| *E, *Body' |) value$ -> (| E, body: Body' :: Set_d d$ |) value$
  ; none$ -> none$
  }
} ;;

eval <*A data.d1+> *Set_d clear -> <A data.d1+> {
  body: avl.new_tree :: Set_d d$
} ;;
