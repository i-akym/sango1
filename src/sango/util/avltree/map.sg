###########################################################################
# MIT License                                                             #
# Copyright (c) 2021 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.avltree.map" ;;

import "sango.list" -> list ;;
import "sango.tuple" -> tuple ;;
import "sango.util.avltree.base" -> avl ;;
import "sango.util.map" -> map ;;

extend <*A *B map.map_d> :=
  ord: <A ord_fs>
  body: <<A B tuple> avl.tree>
  d$ ;;

eval <*A ord_fs> *Ord <A> *K locator -> <<<A *B tuple> avl.node> <<A B tuple> avl.locate> fun> {
  \ <<A *BB tuple> avl.node> *N -> <<A BB tuple> avl.locate> { 
    K (N avl.assoc >> tuple.pair_first) Ord compare >> case {
    ; lt$ -> ^^ avl.left$
    ; eq$ -> avl.just$
    ; gt$ -> ^^ avl.right$
    }
  }
} ;;

eval map_fs @public -> <*A *B map.map_fs> {
  empty?_f: ^empty?
  size_f: ^size
  get_f: ^get
  assoc_f_: (^assoc value$)
  contain_key?_f_: (^contain_key? value$)
  put_f: ^put
  put_new_f_: (^put_new value$)
  add_f_: (^add value$)
  remove_f: ^remove
  delete_f_: (^delete value$)
  take_f: ^take
  clear_f: ^clear
  map.map_fs$
} ;;

eval <*A ord_fs> *Ord new_map @public -> <A *B map.map> {
  ord: Ord body: avl.new_tree d$ = *D,
  d: D fs: map_fs map.map$
} ;;

eval <*A *B map.map_d+> *Map_d empty? -> <bool> {
  Map_d size >> zero?
} ;;

eval <*A *B map.map_d+> *Map_d size -> <int> {
  Map_d = body: *Body *** d$,
  Body avl.size
} ;;

eval <*A *B map.map_d+> *Map_d <A> *Key get -> <<A B tuple> maybe> {
  Map_d = ord: *Ord body: *Body *** d$,
  Body (Ord Key locator) avl.get
} ;;

eval <*A *B map.map_d+> *Map_d <A> *Key assoc -> <B maybe> {
  (Map_d Key get) ^tuple.pair_second apply_to_something
} ;;

eval <*A *B map.map_d+> *Map_d <A> *Key contain_key? -> <bool> {
  Map_d Key get >> something?
} ;;

eval <*A *B map.map_d+> *Map_d <A> *Key <B> *Value put -> <<A B map.map_d+> <<A B tuple> maybe> tuple> {
  Map_d = ord: *Ord body: *Body *** d$,
  Body (Ord Key locator) (| Key, Value |) avl.put = (| *Body', *KV_ |),
  (| body: Body' :: Map_d d$, KV_ |)
} ;;

eval <*A *B map.map_d+> *Map_d <A> *Key <B> *Value put_new -> <<A B map.map_d+> bool tuple> {
  Map_d Key Value put >> case {
  ; (| **, ** value$ |) -> (| Map_d, false$ |)
  ; (| *Map_d', none$ |) -> (| Map_d', true$ |)
  }
} ;;

eval <*A *B map.map_d+> *Map_d <A> *Key <B> *Value add -> <A B map.map_d+> {
  Map_d Key Value put >> tuple.pair_first
} ;;

eval <*A *B map.map_d+> *Map_d <A> *Key remove -> <<A B map.map_d+> <<A B tuple> maybe> tuple> {
  Map_d = ord: *Ord body: *Body *** d$,
  Body (Ord Key locator) avl.remove = (| *Body', *Removed_ |),
  (| body: Body' :: Map_d d$, Removed_ |)
} ;;

eval <*A *B map.map_d+> *Map_d <A> *Key delete -> <A B map.map_d+> {
  Map_d Key remove >> tuple.pair_first
} ;;

eval <*A *B map.map_d+> *Map_d take -> <<<A B tuple> <A B map.map_d+> tuple> maybe> {
  Map_d = body: *Body *** d$,
  Body avl.take >> case {
  ; (| *KV, *Body' |) value$ -> (| KV, body: Body' :: Map_d d$ |) value$
  ; ** -> none$
  }
} ;;

eval <*A *B map.map_d+> *Map_d clear -> <A B map.map_d+> {
  body: avl.new_tree :: Map_d d$
} ;;
