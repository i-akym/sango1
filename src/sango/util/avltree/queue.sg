###########################################################################
# MIT License                                                             #
# Copyright (c) 2021 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.avltree.queue" ;;

import "sango.util.avltree.base" -> avl ;;
import "sango.util.queue" -> queue ;;

extend <*A queue.queue_d> :=
  body: <A avl.tree>
  count: <int>
  d$ ;;

eval <*A avl.node> *Node locate_head -> <A avl.locate> {
  Node avl.left_ >> case {
  ; ** value$ -> ^^ avl.left$
  ; ** -> avl.just$
  }
} ;;

eval <*A avl.node> *Node locate_enqueue -> <A avl.locate> {
  ^^ avl.right$
} ;;

eval new_queue @public -> <*A queue.queue> {
  body: avl.new_tree count: 0 d$ = *D,
  d: D fs: queue_fs queue.queue$
} ;;

eval queue_fs -> <*A queue.queue_fs> {
  empty?_f: ^empty?
    length_f: ^length
    enqueue_f: ^enqueue
    head_f: ^head
    dequeue_f: ^dequeue
    clear_f: ^clear
    queue.queue_fs$
} ;;

eval <*A queue.queue_d+> *Queue_d empty? -> <bool> {
  Queue_d = count: *Count *** d$,
  Count zero?
} ;;

eval <*A queue.queue_d+> *Queue_d length -> <int> {
  Queue_d = count: *Count *** d$,
  Count
} ;;

eval <*A queue.queue_d+> *Queue_d <A> *Elem enqueue -> <A queue.queue_d+> {
  Queue_d = body: *Body count: *Count *** d$,
  Body ^locate_enqueue Elem avl.put = (| *Body', ** |),
  body: Body' count: (Count inc) :: Queue_d d$
} ;;

eval <*A queue.queue_d+> *Queue_d head -> <A maybe> {
  Queue_d = body: *Body *** d$,
  Body ^locate_head avl.get
} ;;

eval <*A queue.queue_d+> *Queue_d dequeue -> <<A <A queue.queue_d+> tuple> maybe> {
  Queue_d = body: *Body count: *Count *** d$,
  Body avl.take >> case {
  ; (| *Head, *Body' |) value$ ->
    (| Head, body: Body' count: (Count dec) :: Queue_d d$ |) value$
  ; ** -> none$
  }
} ;;

eval <*A queue.queue_d+> *Queue_d clear -> <A queue.queue_d+> {
  body: avl.new_tree count: 0 d$
} ;;
