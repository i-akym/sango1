###########################################################################
# MIT License                                                             #
# Copyright (c) 2021 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.avltree.bag" ;;

import "sango.arith" -> arith ;;
import "sango.data" -> data ;;
import "sango.list" -> list ;;
import "sango.tuple" -> tuple ;;
import "sango.util.avltree.base" -> avl ;;
import "sango.util.bag" -> bag ;;

extend <*A data.d1> :=
  ord: <A ord_fs>
  body: <<A list> avl.tree>
  d$ ;;

eval <*A ord_fs> *Ord <A> *X locator -> <<<A list> avl.node> <<A list> avl.locate> fun> {
  \ <<A list> avl.node> *N -> <<A list> avl.locate> { 
    X (N avl.assoc >> list.head >> value) Ord compare >> case {
    ; lt$ -> ^^ avl.left$
    ; eq$ -> avl.just$
    ; gt$ -> ^^ avl.right$
    }
  }
} ;;

extend <*A avl.aux> :=  # actually <A> is <Z list>
  count: <int>
  mins: <A>
  aux$ ;;

eval <*A list> *Assoc <<<A list> avl.node> maybe> *Left_ <<<A list> avl.node> maybe> *Right_
    build_aux -> <<A list> aux> {
  Assoc list.length = *My_count,
  (| Left_, Right_ |) case {
  ; (| *Left value$, *Right value$ |) ->
    Left avl.aux = count: *L_count mins: *L_mins aux$,
    Right avl.aux = count: *R_count mins: ** aux$,
    (| [ L_count, R_count, My_count ] arith.sum, L_mins |)
  ; (| *Left value$, none$ |) ->
    Left avl.aux = count: *L_count mins: *L_mins aux$,
    (| L_count My_count sum, L_mins |)
  ; (| none$, *Right value$ |) ->
    Right avl.aux = count: *R_count mins: ** aux$,
    (| R_count My_count sum, Assoc |)
  ; (| none$, none$ |) ->
    (| My_count, Assoc |)
  } = (| *Count, *Mins |),
  count: Count mins: Mins aux$
} ;;

eval bag_fs @public -> <*A bag.bag_fs> {
  empty?_f: ^empty?
    size_f: ^size
    contain?_f: ^contain?
    get_all_f: ^get_all
    add_f: ^add
    remove_f: ^remove
    remove_all_f: ^remove_all
    delete_f_: (^delete value$)
    delete_all_f_: (^delete_all value$)
    take_f: ^take
    clear_f: ^clear
    bag.bag_fs$
} ;;

# eval <<<*A list> avl.node> maybe> *Node_ subtree_count -> <int> {
  # Node_ case {
  # ; *Node value$ -> Node avl.aux = count: *Count aux$, Count
  # ; none$ -> 0
  # }
# } ;;

eval <*A ord_fs> *Ord new_bag @public -> <A bag.bag> {
  ord: Ord body: (^build_aux avl.new_tree) d$ = *D,
  d: D fs: bag_fs bag.bag$
} ;;

eval <*A data.d1+> *Bag_d empty? -> <bool> {
  Bag_d size >> zero?
} ;;

eval <*A data.d1+> *Bag_d size -> <int> {
  Bag_d = body: *Body *** d$,
  Body avl.node_ >> case {
  ; *Node value$ -> Node avl.aux = count: *Count *** aux$, Count
  ; none$ -> 0
  }
} ;;

eval <*A data.d1+> *Bag_d <A> *Elem contain? -> <bool> {
  Bag_d Elem get_all >> list.non_empty?
} ;;

eval <*A data.d1+> *Bag_d <A> *Elem get_all -> <A list> {
  Bag_d = ord: *Ord body: *Body *** d$,
  Body (Ord Elem locator) avl.get >> case {
  ; *Elems avl.get_done$ -> Elems
  ; ** -> []
  }
} ;;

eval <*A data.d1+> *Bag_d <A> *Elem add -> <A data.d1+> {
  Bag_d = ord: *Ord body: *Body *** d$,
  Body (Ord Elem locator) [ Elem ; Bag_d Elem get_all ] avl.put >> case {
  ; *Body' avl.put_new_done$ -> body: Body' :: Bag_d d$
  ; *Body' ** avl.put_replace_done$ -> body: Body' :: Bag_d d$
  }
} ;;

eval <*A data.d1+> *Bag_d <A> *Elem remove -> <<A data.d1+> <A maybe> tuple> {
  Bag_d = ord: *Ord body: *Body *** d$,
  Bag_d Elem get_all >> case {
  ; [] ->
    (| Bag_d, none$ |)
  ; [ *E ] ->
    Body (Ord Elem locator) avl.remove = *Body' ** avl.remove_done$,
    (| body: Body' :: Bag_d d$, E value$ |)
  ; [ *E ; *Es ] -> 
    Body (Ord Elem locator) Es avl.put = *Body' ** avl.put_replace_done$,
    (| body: Body' :: Bag_d d$, E value$ |)
  }
} ;;

eval <*A data.d1+> *Bag_d <A> *Elem remove_all -> <<A data.d1+> <A list> tuple> {
  Bag_d = ord: *Ord body: *Body *** d$,
  Body (Ord Elem locator) avl.remove >> case {
  ; *Body' *Removed avl.remove_done$ -> (| body: Body' :: Bag_d d$, Removed |)
  ; avl.remove_not_found$ -> (| Bag_d, [] |)
  }
} ;;

eval <*A data.d1+> *Bag_d <A> *Elem delete -> <A data.d1+> {
  Bag_d Elem remove >> tuple.pair_first
} ;;

eval <*A data.d1+> *Bag_d <A> *Elem delete_all -> <A data.d1+> {
  Bag_d Elem remove_all >> tuple.pair_first
} ;;

eval <*A data.d1+> *Bag_d take -> <<A <A data.d1+> tuple> maybe> {
  Bag_d = ord: *Ord body: *Body *** d$,
  Body avl.node_ >> case {
  ; *Node value$ ->
    Node avl.aux = mins: *Mins *** aux$, 
    Bag_d (Mins list.head >> value) remove = (| *Bag_d', *Removed value$ |),
    (| Removed, Bag_d' |) value$
  ; none$ -> none$
  }
} ;;

eval <*A data.d1+> *Bag_d clear -> <A data.d1+> {
  body: (^build_aux avl.new_tree) :: Bag_d d$
} ;;
