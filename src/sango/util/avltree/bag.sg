###########################################################################
# MIT License                                                             #
# Copyright (c) 2018 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.avltree.bag" ;;

import "sango.list" -> list ;;
import "sango.tuple" -> tuple ;;
import "sango.util.avltree" -> avl ;;
import "sango.util.bag" -> bag ;;

# alias type <*A bag> @public := <<A bag_d> A bag.bag> ;;
# alias type <*A bag_fs> @public := <<A bag_d> A bag.bag_fs> ;;

extend <*A bag.bag_d> :=
  tree: <A <A list> avl.tree>
  size: <int>
  bag_d$ ;;

eval <*A ord_fs> *Ord new_bag @public -> <A bag.bag> {
  d: (tree: (Ord avl.new_tree) size: 0 bag_d$) fs: bag_fs bag.bag$
} ;;

eval bag_fs @public -> <*A bag.bag_fs> {
  empty?_f: ^bag_empty?
    size_f: ^bag_size
    contain?_f: ^bag_contain?
    get_all_f: ^bag_get_all
    add_f: ^bag_add
    remove_f: ^bag_remove
    remove_all_f: ^bag_remove_all
    delete_f_: (^bag_delete value$)
    delete_all_f_: (^bag_delete_all value$)
    take_f: ^bag_take
    clear_f: ^bag_clear
    bag.bag_fs$
} ;;

eval <*A bag.bag_d+> *Bag_d bag_empty? -> <bool> {
  Bag_d = size: *Size *** bag_d$,
  Size >> zero?
} ;;

eval <*A bag.bag_d+> *Bag_d bag_size -> <int> {
  Bag_d = size: *Size *** bag_d$,
  Size
} ;;

eval <*A bag.bag_d+> *Bag_d <A> *Elem bag_contain? -> <bool> {
  Bag_d = tree: *Tree *** bag_d$,
  Tree Elem avl.contain_key?
} ;;

eval <*A bag.bag_d+> *Bag_d <A> *Elem bag_get_all -> <A list> {
  Bag_d = tree: *Tree *** bag_d$,
  Tree Elem avl.assoc >> case {
  ; *Vs value$ -> Vs
  ; none$ -> []
  }
} ;;

eval <*A bag.bag_d+> *Bag_d <A> *Elem bag_add -> <A bag.bag_d+> {
  Bag_d = tree: *Tree size: *Size *** bag_d$,
  Tree Elem avl.assoc >> case {
  ; *Vs value$ -> Tree Elem [ Elem ; Vs ] avl.add
  ; none$ -> Tree Elem [ Elem ] avl.add
  } = *Tree',
  tree: Tree' size: (Size inc) :: Bag_d bag_d$
} ;;

eval <*A bag.bag_d+> *Bag_d <A> *Elem bag_remove -> <<A bag.bag_d+> <A maybe> tuple> {
  Bag_d = tree: *Tree size: *Size *** bag_d$,
  Tree Elem avl.assoc >> case {
  ; [ *V ] value$ -> Tree Elem avl.delete = *Tree', (| tree: Tree' size: (Size dec) :: Bag_d bag_d$, V value$ |)
  ; [ *V ; *Vs ] value$ -> Tree Elem Vs avl.add = *Tree', (| tree: Tree' size: (Size dec) :: Bag_d bag_d$, V value$ |)
  ; none$ -> (| Bag_d, none$ |)
  # ; *X -> X debug.repr >> stdio.print_and_newline, intentional$ "Trepped." new_exception >> throw  # DEBUG
  }
} ;;

eval <*A bag.bag_d+> *Bag_d <A> *Elem bag_remove_all -> <<A bag.bag_d+> <A list> tuple> {
  Bag_d = tree: *Tree size: *Size *** bag_d$,
  Tree Elem avl.assoc >> case {
  ; *Vs value$ -> Tree Elem avl.delete = *Tree', (| tree: Tree' size: (Size (Vs list.length) diff) :: Bag_d bag_d$, Vs |)
  ; none$ -> (| Bag_d, [] |)
  }
} ;;

eval <*A bag.bag_d+> *Bag_d <A> *Elem bag_delete -> <A bag.bag_d+> {
  Bag_d Elem bag_remove >> tuple.pair_first
} ;;

eval <*A bag.bag_d+> *Bag_d <A> *Elem bag_delete_all -> <A bag.bag_d+> {
  Bag_d Elem bag_remove_all >> tuple.pair_first
} ;;

eval <*A bag.bag_d+> *Bag_d bag_take -> <<A <A bag.bag_d+> tuple> maybe> {
  Bag_d = tree: *Tree size: *Size *** bag_d$,
  Tree avl.take >> case {
  ; (| (| *E, ** |), ** |) value$ -> Bag_d E bag_remove = (| *Bag_d', *EE value$ |), (| EE, Bag_d' |) value$
  ; none$ -> none$
  }
} ;;

eval <*A bag.bag_d+> *Bag_d bag_clear -> <A bag.bag_d+> {
  Bag_d = tree: *Tree size: *Size *** bag_d$,
  tree: (Tree avl.clear) size: 0 :: Bag_d bag_d$
} ;;
