###########################################################################
# MIT License                                                             #
# Copyright (c) 2018 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module @alpha "sango.util.array" ;;

data <*A array> @public :=
  d: <A _1+>
  fs: <A array_fs>
  array$ ;;

data <*A array_fs> @public :=
  length_f: <int fun>
  get_f: <<A _1+> int A fun>
  set_f: <<A _1+> int A <A _1+> fun>
  array_fs$ ;;


# -- framework --

eval <*A array> *Array c_length | length @public -> <int> {
  Array = d: *D fs: *Fs array$,
  &(Fs length_f)
} ;;

eval <*A array> *Array <int> *Index c_get | get @public -> <A> {
  Array = d: *D fs: *Fs array$,
  &(Fs length_f) = *L,
  if {
  ; Index lt0? -> bad_arg$ "Negative index." new_exception >> throw
  ; Index L ge? -> bad_arg$ "Too big index." new_exception >> throw
  ; otherwise ->
  },
  D Index &(Fs get_f)
} ;;

eval <*A array> *Array <int> *Index <A> *Value c_set | set @public -> <A array> {
  Array = d: *D fs: *Fs array$,
  &(Fs length_f) = *L,
  if {
  ; Index lt0? -> bad_arg$ "Negative index." new_exception >> throw
  ; Index L ge? -> bad_arg$ "Too big index." new_exception >> throw
  ; otherwise ->
  },
  d: (D Index Value &(Fs set_f)) fs: Fs array$
} ;;

eval <*A array> *Array c_iter | iter @public -> <A iter> {
  \\ <A iter_res> { Array 0 c_iter_next } iter$
} ;;

eval <*A array> *Array <int> *Index c_iter_next -> <A iter_res> {
  Array = d: *D fs: *Fs array$,
  &(Fs length_f) = *L,
  if {
  ; Index L lt? ->
    (| D Index &(Fs get_f),
      \\ <A iter_res> { Array (Index inc) c_iter_next } iter$
    |) value$
  ; otherwise -> none$
  }
} ;;
