###########################################################################
# MIT License                                                             #
# Copyright (c) 2018 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.map" ;;

import "sango.list" -> list ;;
import "sango.tuple" -> tuple ;;
import "sango.util.iter" -> iter ;;

### definition of common-behavior object

data <*A *B map> @public :=
  d: <A B _2+>
  fs: <<A B _2+> A B map_fs>
  map$
++ as_a'map -> [ A B a'map ] ;;


### definition of function set

data <*D *A *B map_fs> @public :=
  empty?_f: <D bool fun>
  size_f: <D int fun>
  get_f: <D A <<A B tuple> maybe> fun>
  assoc_f_: <<D A <B maybe> fun> maybe>
  contain_key?_f_: <<D A bool fun> maybe>
  put_f: <D A B <D <<A B tuple> maybe> tuple> fun>
  put_new_f_: <<D A B <D bool tuple> fun> maybe>
  add_f_: <<D A B D fun> maybe>
  remove_f: <D A <D <<A B tuple> maybe> tuple> fun>
  delete_f_: <<D A D fun> maybe>
  take_f: <D <<<A B tuple> D tuple> maybe> fun>
  clear_f: <D D fun>
  map_fs$ ;;


### definition of feature

feature <*T!> [ *A *B a'map ] @public -> <T A B map_fo> ;;

data <*T *A *B map_fo> @public :=
  d: <T A B map_fo_d+>
  fs: <<T A B map_fo_d+> A B map_fs>
  rev_f: <<T A B map_fo_d+> T fun>
  map_fo$ ;;

data <*T *A *B map_fo_d> @public :=
  <A B map> cmap_fo_d$ ;;  # local dcon


### implementation of common-behavior object

eval <*A *B map> *Map c_empty? | empty? @public -> <bool> {
  Map = d: *D fs: *Fs map$,
  D Fs _empty?
} ;;

eval <*A *B map> *Map c_size | size @public -> <int> {
  Map = d: *D fs: *Fs map$,
  D Fs _size
} ;;

eval <*A *B map> *Map <A> *Key c_get | get @public -> <<A B tuple> maybe> {
  Map = d: *D fs: *Fs map$,
  D Fs Key _get
} ;;

eval <*A *B map> *Map <A> *Key c_assoc | assoc @public -> <B maybe> {
  Map = d: *D fs: *Fs map$,
  D Fs Key _assoc
} ;;

eval <*A *B map> *Map <A> *Key c_contain_key? | contain_key? @public -> <bool> {
  Map = d: *D fs: *Fs map$,
  D Fs Key _contain_key?
} ;;

eval <*A *B map> *Map <A> *Key <B> *Value c_put | put @public -> <<A B map> <<A B tuple> maybe> tuple> {
  Map = d: *D fs: *Fs map$,
  D Fs Key Value _put = (| *D', *Replaced_kv_ |),
  (| d: D' fs: Fs map$, Replaced_kv_ |)
} ;;

eval <*A *B map> *Map <A> *Key <B> *Value c_put_new | put_new @public -> <<A B map> bool tuple> {
  Map = d: *D fs: *Fs map$,
  D Fs Key Value _put_new = (| *D', *Succeeded? |),
  (| d: D' fs: Fs map$, Succeeded? |)
} ;;

eval <*A *B map> *Map <A> *Key <B> *Value c_add | add @public -> <A B map> {
  Map = d: *D fs: *Fs map$,
  D Fs Key Value _add = *D',
  D' fs: Fs map$
} ;;

eval <*A *B map> *Map <A> *Key c_remove | remove @public -> <<A B map> <<A B tuple> maybe> tuple> {
  Map = d: *D fs: *Fs map$,
  D Fs Key _remove = (| *D', *Removed_kv_ |),
  (| D' fs: Fs map$, Removed_kv_ |)
} ;;

eval <*A *B map> *Map <A> *Key c_delete | delete @public -> <A B map> {
  Map = d: *D fs: *Fs map$,
  D Fs Key _delete = *D',
  D' fs: Fs map$
} ;;

eval <*A *B map> *Map c_take | take @public -> <<<A B tuple> <A B map> tuple> maybe> {
  Map = d: *D fs: *Fs map$,
  D Fs _take >> case {
  ; (| *KV, *D' |) value$ -> (| KV, D' Fs map$ |) value$
  ; ** -> none$
  }
} ;;

eval <*A *B map> *Map c_clear | clear @public -> <A B map> {
  Map = d: *D fs: *Fs map$,
  D Fs _clear = *D',
  D' Fs map$
} ;;

eval <*A *B map> *Map <<A B tuple> list> *KVs c_add_list | add_list @public -> <A B map> {
  Map (KVs list.iter) c_add_iter
} ;;

eval <*A *B map> *Map <<A B tuple> iter> *Iter c_add_iter | add_iter @public -> <A B map> {
  Map = d: *D fs: *Fs map$,
  D Iter &\ <A B _2+> *MD <<A B tuple> iter> *I -> <A B _2+> {
    I next >> case {
    ; (| (| *K, *V |), *I' |) value$ -> (MD Fs K V _add) I' &&
    ; ** -> MD
    }
  } = *D',
  D' Fs map$
} ;;

eval <*A *B map> *Map <A list> *Ks c_delete_list | delete_list @public -> <A B map> {
  Map (Ks list.iter) c_delete_iter
} ;;

eval <*A *B map> *Map <A iter> *Iter c_delete_iter | delete_iter @public -> <A B map> {
  Map = d: *D fs: *Fs map$,
  D Iter &\ <A B _2+> *MD <A iter> *I -> <A B _2+> {
    I next >> case {
    ; (| *K, *I' |) value$ -> (MD Fs K _delete) I' &&
    ; ** -> MD
    }
  } = *D',
  D' Fs map$
} ;;

eval <*A *B map> *Map c_iter | iter @public -> <<A B tuple> iter> {
  \\ <<A B tuple> iter_res> { Map c_iter_next } iter$
} ;;

eval <*A *B map> *Map c_iter_next -> <<A B tuple> iter_res> {
  Map take >> case {
  ; (| *KV, *Map' |) value$ ->
    (| KV, \\ <<A B tuple> iter_res> { Map' c_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;


### framework of faeture

eval <*T![ *A *B a'map ]> *FMap f_empty? | empty? @public -> <bool> {
  FMap _feature_a'map = *Map_fo,
  Map_fo fo_empty?
} ;;

eval <*T! *A *B map_fo> *Map_fo fo_empty? | empty? @public -> <bool> {
  Map_fo = d: *D fs: *Fs rev_f: *Rev_f map_fo$,
  D Fs _empty?
} ;;

eval <*T![ *A *B a'map ]> *FMap f_size | size @public -> <int> {
  FMap _feature_a'map = *Map_fo,
  Map_fo fo_size
} ;;

eval <*T! *A *B map_fo> *Map_fo fo_size | size @public -> <int> {
  Map_fo = d: *D fs: *Fs rev_f: *Rev_f map_fo$,
  D Fs _size
} ;;

eval <*T![ *A *B a'map ]> *FMap <A> *Key f_get | get @public -> <<A B tuple> maybe> {
  FMap _feature_a'map = *Map_fo,
  Map_fo Key fo_get
} ;;

eval <*T! *A *B map_fo> *Map_fo <A> *Key fo_get | get @public -> <<A B tuple> maybe> {
  Map_fo = d: *D fs: *Fs rev_f: *Rev_f map_fo$,
  D Fs Key _get
} ;;

eval <*T![ *A *B a'map ]> *FMap <A> *Key f_assoc | assoc @public -> <B maybe> {
  FMap _feature_a'map = *Map_fo,
  Map_fo Key fo_assoc
} ;;

eval <*T! *A *B map_fo> *Map_fo <A> *Key fo_assoc | assoc @public -> <B maybe> {
  Map_fo = d: *D fs: *Fs rev_f: *Rev_f map_fo$,
  D Fs Key _assoc
} ;;

eval <*T![ *A *B a'map ]> *FMap <A> *Key f_contain_key? | contain_key? @public -> <bool> {
  FMap _feature_a'map = *Map_fo,
  Map_fo Key fo_contain_key?
} ;;

eval <*T! *A *B map_fo> *Map_fo <A> *Key fo_contain_key? | contain_key? @public -> <bool> {
  Map_fo = d: *D fs: *Fs rev_f: *Rev_f map_fo$,
  D Fs Key _contain_key?
} ;;

eval <*T![ *A *B a'map ]> *FMap <A> *Key <B> *Value f_put | put @public -> <T <<A B tuple> maybe> tuple> {
  FMap _feature_a'map = *Map_fo,
  Map_fo Key Value fo_put = (| *Map_fo', *Replaced_kv_ |),
  Map_fo' = d: *D' fs: *Fs' rev_f: *Rev_f' map_fo$,
  (| D' &Rev_f', Replaced_kv_ |)
} ;;

eval <*T! *A *B map_fo> *Map_fo <A> *Key <B> *Value fo_put | put @public -> <<T A B map_fo> <<A B tuple> maybe> tuple> {
  Map_fo = d: *D fs: *Fs rev_f: *Rev_f map_fo$,
  D Fs Key Value _put = (| *D', *Replaced_kv_ |),
  (| d: D' fs: Fs rev_f: Rev_f map_fo$, Replaced_kv_ |)
} ;;

eval <*T![ *A *B a'map ]> *FMap <A> *Key <B> *Value f_put_new | put_new @public -> <T bool tuple> {
  FMap _feature_a'map = *Map_fo,
  Map_fo Key Value fo_put_new = (| *Map_fo', *Succeeded? |),
  Map_fo' = d: *D' fs: *Fs' rev_f: *Rev_f' map_fo$,
  (| D' &Rev_f', Succeeded? |)
} ;;

eval <*T! *A *B map_fo> *Map_fo <A> *Key <B> *Value fo_put_new | put_new @public -> <<T A B map_fo> bool tuple> {
  Map_fo = d: *D fs: *Fs rev_f: *Rev_f map_fo$,
  D Fs Key Value _put_new = (| *D', *Succeeded? |),
  (| d: D' fs: Fs rev_f: Rev_f map_fo$, Succeeded? |)
} ;;

eval <*T![ *A *B a'map ]> *FMap <A> *Key <B> *Value f_add | add @public -> <T> {
  FMap _feature_a'map = *Map_fo,
  Map_fo Key Value fo_add = *Map_fo',
  Map_fo' = d: *D' fs: *Fs' rev_f: *Rev_f' map_fo$,
  D' &Rev_f'
} ;;

eval <*T! *A *B map_fo> *Map_fo <A> *Key <B> *Value fo_add | add @public -> <T A B map_fo> {
  Map_fo = d: *D fs: *Fs rev_f: *Rev_f map_fo$,
  D Fs Key Value _add = *D',
  d: D' fs: Fs rev_f: Rev_f map_fo$
} ;;

eval <*T![ *A *B a'map ]> *FMap <A> *Key f_remove | remove @public -> <T <<A B tuple> maybe> tuple> {
  FMap _feature_a'map = *Map_fo,
  Map_fo Key fo_remove = (| *Map_fo', *Removed_kv_ |),
  Map_fo' = d: *D' fs: *Fs' rev_f: *Rev_f' map_fo$,
  (| D' &Rev_f', Removed_kv_ |)
} ;;

eval <*T! *A *B map_fo> *Map_fo <A> *Key fo_remove | remove @public -> <<T A B map_fo> <<A B tuple> maybe> tuple> {
  Map_fo = d: *D fs: *Fs rev_f: *Rev_f map_fo$,
  D Fs Key _remove = (| *D', *Removed_kv_ |),
  (| d: D' fs: Fs rev_f: Rev_f map_fo$, Removed_kv_ |)
} ;;

eval <*T![ *A *B a'map ]> *FMap <A> *Key f_delete | delete @public -> <T> {
  FMap _feature_a'map = *Map_fo,
  Map_fo Key fo_delete = *Map_fo',
  Map_fo' = d: *D' fs: *Fs' rev_f: *Rev_f' map_fo$,
  D' &Rev_f'
} ;;

eval <*T! *A *B map_fo> *Map_fo <A> *Key fo_delete | delete @public -> <T A B map_fo> {
  Map_fo = d: *D fs: *Fs rev_f: *Rev_f map_fo$,
  D Fs Key _delete = *D',
  d: D' fs: Fs rev_f: Rev_f map_fo$
} ;;

eval <*T![ *A *B a'map ]> *FMap f_take | take @public -> <<<A B tuple> T tuple> maybe> {
  FMap _feature_a'map = *Map_fo,
  Map_fo fo_take >> case {
  ; (| *KV, d: *D' fs: *Fs' rev_f: *Rev_f' map_fo$ |) value$ -> (| KV, D' &Rev_f' |) value$
  ; ** -> none$
  }
} ;;

eval <*T! *A *B map_fo> *Map_fo fo_take | take @public -> <<<A B tuple> <T A B map_fo> tuple> maybe> {
  Map_fo = d: *D fs: *Fs rev_f: *Rev_f map_fo$,
  D Fs _take >> case {
  ; (| *KV, *D' |) value$ -> (| KV, d: D' fs: Fs rev_f: Rev_f map_fo$ |) value$
  ; ** -> none$
  }
} ;;

eval <*T![ *A *B a'map ]> *FMap f_clear | clear @public -> <T> {
  FMap _feature_a'map = *Map_fo,
  Map_fo fo_clear = *Map_fo',
  Map_fo' = d: *D' fs: *Fs' rev_f: *Rev_f' map_fo$,
  D' &Rev_f'
} ;;

eval <*T! *A *B map_fo> *Map_fo fo_clear | clear @public -> <T A B map_fo> {
  Map_fo = d: *D fs: *Fs rev_f: *Rev_f map_fo$,
  D Fs _clear = *D',
  d: D' fs: Fs rev_f: Rev_f map_fo$
} ;;

eval <*T![ *A *B a'map ]> *FMap <<A B tuple> list> *KVs f_add_list | add_list @public -> <T> {
  FMap (KVs list.iter) f_add_iter
} ;;

eval <*T! *A *B map_fo> *Map_fo <<A B tuple> list> *KVs fo_add_list | add_list @public -> <T A B map_fo> {
  Map_fo (KVs list.iter) fo_add_iter
} ;;

eval <*T![ *A *B a'map ]> *FMap <<A B tuple> iter> *Iter f_add_iter | add_iter @public -> <T> {
  FMap _feature_a'map = *Map_fo,
  Map_fo Iter fo_add_iter = *Map_fo',
  Map_fo' = d: *D' fs: *Fs' rev_f: *Rev_f' map_fo$,
  D' &Rev_f'
} ;;

eval <*T! *A *B map_fo> *Map_fo <<A B tuple> iter> *Iter fo_add_iter | add_iter @public -> <T A B map_fo> {
  Iter next >> case {
  ; (| (| *K, *V |), *Iter' |) value$ -> (Map_fo K V add) Iter' &&
  ; ** -> Map_fo
  }
} ;;

eval <*T![ *A *B a'map ]> *FMap <A list> *Ks f_delete_list | delete_list @public -> <T> {
  FMap (Ks list.iter) f_delete_iter
} ;;

eval <*T! *A *B map_fo> *Map_fo <A list> *Ks fo_delete_list | delete_list @public -> <T A B map_fo> {
  Map_fo (Ks list.iter) fo_delete_iter
} ;;

eval <*T![ *A *B a'map ]> *FMap <A iter> *Iter f_delete_iter | delete_iter @public -> <T> {
  FMap _feature_a'map = *Map_fo,
  Map_fo Iter fo_delete_iter = *Map_fo',
  Map_fo' = d: *D' fs: *Fs' rev_f: *Rev_f' map_fo$,
  D' &Rev_f'
} ;;

eval <*T! *A *B map_fo> *Map_fo <A iter> *Iter fo_delete_iter | delete_iter @public -> <T A B map_fo> {
  Iter next >> case {
  ; (| *K, *Iter' |) value$ -> (Map_fo K delete) Iter' &&
  ; ** -> Map_fo
  }
} ;;

eval <*T![ *A *B a'map ]> *FMap f_iter | iter @public -> <<A B tuple> iter> {
  \\ <<A B tuple> iter_res> { FMap f_iter_next } iter$
} ;;

eval <*T![ *A *B a'map ]> *FMap f_iter_next -> <<A B tuple> iter_res> {
  FMap take >> case {
  ; (| *KV, *FMap' |) value$ ->
    (| KV, \\ <<A B tuple> iter_res> { FMap' f_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;

eval <*T! *A *B map_fo> *Map_fo fo_iter | iter @public -> <<A B tuple> iter> {
  \\ <<A B tuple> iter_res> { Map_fo fo_iter_next } iter$
} ;;

eval <*T! *A *B map_fo> *Map_fo fo_iter_next -> <<A B tuple> iter_res> {
  Map_fo take >> case {
  ; (| *KV, *Map_fo' |) value$ ->
    (| KV, \\ <<A B tuple> iter_res> { Map_fo' fo_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;


### feature implementation of common-behavior object

eval <*A *B map> *Map as_a'map -> <<A B map> A B map_fo> {
  d: (Map cmap_fo_d$) fs: cmap_fo_fs rev_f: ^cmap_rev_f map_fo$
} ;;

eval cmap_fo_fs -> <<*T *A *B map_fo_d+> A B map_fs> {
  empty?_f: ^cfo_empty?
  size_f: ^cfo_size
  get_f: ^cfo_get
  assoc_f_: (^cfo_assoc value$)
  contain_key?_f_: (^cfo_contain_key? value$)
  put_f: ^cfo_put
  put_new_f_: (^cfo_put_new value$)
  add_f_: (^cfo_add value$)
  remove_f: ^cfo_remove
  delete_f_: (^cfo_delete value$)
  take_f: ^cfo_take
  clear_f: ^cfo_clear
  map_fs$
} ;;

eval <<*A *B map> A B map_fo_d+> *Map_fo_d cmap_rev_f -> <A B map> {
  Map_fo_d = *Map cmap_fo_d$,
  Map
} ;;

eval <*T *A *B map_fo_d+> *Map_fo_d cfo_empty? -> <bool> {
  Map_fo_d = *Map cmap_fo_d$,
  Map c_empty?
} ;;

eval <*T *A *B map_fo_d+> *Map_fo_d cfo_size -> <int> {
  Map_fo_d = *Map cmap_fo_d$,
  Map c_size
} ;;

eval <*T *A *B map_fo_d+> *Map_fo_d <A> *Key cfo_get -> <<A B tuple> maybe> {
  Map_fo_d = *Map cmap_fo_d$,
  Map Key c_get
} ;;

eval <*T *A *B map_fo_d+> *Map_fo_d <A> *Key cfo_assoc -> <B maybe> {
  Map_fo_d = *Map cmap_fo_d$,
  Map Key c_assoc
} ;;

eval <*T *A *B map_fo_d+> *Map_fo_d <A> *Key cfo_contain_key? -> <bool> {
  Map_fo_d = *Map cmap_fo_d$,
  Map Key c_contain_key?
} ;;

eval <*T *A *B map_fo_d+> *Map_fo_d <A> *Key <B> *Value cfo_put -> <<T A B map_fo_d> <<A B tuple> maybe> tuple> {
  Map_fo_d = *Map cmap_fo_d$,
  Map Key Value c_put = (| *Map', *Replaced_kv_ |),
  (| Map' cmap_fo_d$, Replaced_kv_ |)
} ;;

eval <*T *A *B map_fo_d+> *Map_fo_d <A> *Key <B> *Value cfo_put_new -> <<T A B map_fo_d> bool tuple> {
  Map_fo_d = *Map cmap_fo_d$,
  Map Key Value c_put_new = (| *Map', *Succeeded? |),
  (| Map' cmap_fo_d$, Succeeded? |)
} ;;

eval <*T *A *B map_fo_d+> *Map_fo_d <A> *Key <B> *Value cfo_add -> <T A B map_fo_d> {
  Map_fo_d = *Map cmap_fo_d$,
  Map Key Value c_add = *Map',
  Map' cmap_fo_d$
} ;;

eval <*T *A *B map_fo_d+> *Map_fo_d <A> *Key cfo_remove -> <<T A B map_fo_d> <<A B tuple> maybe> tuple> {
  Map_fo_d = *Map cmap_fo_d$,
  Map Key c_remove = (| *Map', *Removed_kv_ |),
  (| Map' cmap_fo_d$, Removed_kv_ |)
} ;;

eval <*T *A *B map_fo_d+> *Map_fo_d <A> *Key cfo_delete -> <T A B map_fo_d> {
  Map_fo_d = *Map cmap_fo_d$,
  Map Key c_delete = *Map',
  Map' cmap_fo_d$
} ;;

eval <*T *A *B map_fo_d+> *Map_fo_d cfo_take -> <<<A B tuple> <T A B map_fo_d> tuple> maybe> {
  Map_fo_d = *Map cmap_fo_d$,
  Map c_take >> case {
  ; (| *KV, *Map' |) value$ -> (| KV, Map' cmap_fo_d$ |) value$
  ; ** -> none$
  }
} ;;

eval <*T *A *B map_fo_d+> *Map_fo_d cfo_clear -> <T A B map_fo_d> {
  Map_fo_d = *Map cmap_fo_d$,
  Map c_clear = *Map',
  Map' cmap_fo_d$
} ;;


### subroutines

eval <*D *A *B map_fs> *Fs map_fs_assoc_f | assoc_f @public -> <D A <B maybe> fun> {
  Fs assoc_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *M <A> *Key -> <B maybe> {
      (M Key &(Fs get_f)) ^tuple.pair_second apply_to_something
    }
  }
} ;;

eval <*D *A *B map_fs> *Fs map_fs_contain_key?_f | contain_key?_f @public -> <D A bool fun> {
  Fs contain_key?_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *M <A> *Key -> <bool> {
      M Key &(Fs get_f) >> something?
    }
  }
} ;;

eval <*D *A *B map_fs> *Fs map_fs_put_new_f | put_new_f @public -> <D A B <D bool tuple> fun> {
  Fs put_new_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *M <A> *Key <B> *Value -> <D bool tuple> {
      M Key &(Fs contain_key?_f) >> case {
      ; true$ -> (| M, false$ |)
      ; ** -> (| M Key Value &(Fs add_f), true$ |)
      }
    }
  }
} ;;

eval <*D *A *B map_fs> *Fs map_fs_add_f | add_f @public -> <D A B D fun> {
  Fs add_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *M <A> *Key <B> *Value -> <D> {
      M Key Value &(Fs put_f) >> tuple.pair_first
    }
  }
} ;;

eval <*D *A *B map_fs> *Fs map_fs_delete_f | delete_f @public -> <D A D fun> {
  Fs delete_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *M <A> *Key -> <D> {
      M Key &(Fs remove_f) >> tuple.pair_first
    }
  }
} ;;

eval <*D> *MD <D *A *B map_fs> *Fs _empty? -> <bool> {
  MD &(Fs empty?_f)
} ;;

eval <*D> *MD <D *A *B map_fs> *Fs _size -> <int> {
  MD &(Fs size_f)
} ;;

eval <*D> *MD <D *A *B map_fs> *Fs <A> *Key _get -> <<A B tuple> maybe> {
  MD Key &(Fs get_f)
} ;;

eval <*D> *MD <D *A *B map_fs> *Fs <A> *Key _assoc -> <B maybe> {
  MD Key &(Fs assoc_f)
} ;;

eval <*D> *MD <D *A *B map_fs> *Fs <A> *Key _contain_key? -> <bool> {
  MD Key &(Fs contain_key?_f)
} ;;

eval <*D> *MD <D *A *B map_fs> *Fs <A> *Key <B> *Value _put -> <D <<A B tuple> maybe> tuple>  {
  MD Key Value &(Fs put_f)
} ;;

eval <*D> *MD <D *A *B map_fs> *Fs <A> *Key <B> *Value _put_new -> <D bool tuple>  {
  MD Key Value &(Fs put_new_f)
} ;;

eval <*D> *MD <D *A *B map_fs> *Fs <A> *Key <B> *Value _add -> <D>  {
  MD Key Value &(Fs add_f)
} ;;

eval <*D> *MD <D *A *B map_fs> *Fs <A> *Key _remove -> <D <<A B tuple> maybe> tuple>  {
  MD Key &(Fs remove_f)
} ;;

eval <*D> *MD <D *A *B map_fs> *Fs <A> *Key _delete -> <D>  {
  MD Key &(Fs delete_f)
} ;;

eval <*D> *MD <D *A *B map_fs> *Fs _take -> <<<A B tuple> D tuple> maybe> {
  MD &(Fs take_f)
} ;;

eval <*D> *MD <D *A *B map_fs> *Fs _clear -> <D> {
  MD &(Fs clear_f)
} ;;
