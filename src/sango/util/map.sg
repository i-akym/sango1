###########################################################################
# MIT License                                                             #
# Copyright (c) 2018 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.map" ;;

import "sango.list" -> list ;;
import "sango.tuple" -> tuple ;;
import "sango.util.iter" -> iter ;;

### function set

data <*D *A *B map_fs> @public :=
  empty?_f: <D bool fun>
  size_f: <D int fun>
  get_f: <D A <<A B tuple> maybe> fun>
  assoc_f_: <<D A <B maybe> fun> maybe>
  contain_key?_f_: <<D A bool fun> maybe>
  put_f: <D A B <D <<A B tuple> maybe> tuple> fun>
  put_new_f_: <<D A B <D bool tuple> fun> maybe>
  add_f_: <<D A B D fun> maybe>
  remove_f: <D A <D <<A B tuple> maybe> tuple> fun>
  delete_f_: <<D A D fun> maybe>
  take_f: <D <<<A B tuple> D tuple> maybe> fun>
  clear_f: <D D fun>
  map_fs$ ;;

eval <*D *A *B map_fs> *Fs map_fs_assoc_f | assoc_f @public -> <D A <B maybe> fun> {
  Fs assoc_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *M <A> *Key -> <B maybe> {
      (M Key &(Fs get_f)) ^tuple.pair_second apply_to_something
    }
  }
} ;;

eval <*D *A *B map_fs> *Fs map_fs_contain_key?_f | contain_key?_f @public -> <D A bool fun> {
  Fs contain_key?_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *M <A> *Key -> <bool> {
      M Key &(Fs get_f) >> something?
    }
  }
} ;;

eval <*D *A *B map_fs> *Fs map_fs_put_new_f | put_new_f @public -> <D A B <D bool tuple> fun> {
  Fs put_new_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *M <A> *Key <B> *Value -> <D bool tuple> {
      M Key &(Fs contain_key?_f) >> case {
      ; true$ -> (| M, false$ |)
      ; ** -> (| M Key Value &(Fs add_f), true$ |)
      }
    }
  }
} ;;

eval <*D *A *B map_fs> *Fs map_fs_add_f | add_f @public -> <D A B D fun> {
  Fs add_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *M <A> *Key <B> *Value -> <D> {
      M Key Value &(Fs put_f) >> tuple.pair_first
    }
  }
} ;;

eval <*D *A *B map_fs> *Fs map_fs_delete_f | delete_f @public -> <D A D fun> {
  Fs delete_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *M <A> *Key -> <D> {
      M Key &(Fs remove_f) >> tuple.pair_first
    }
  }
} ;;

eval <*D *A *B map_fs> *Fs map_fs_to_col_fs | to_col_fs @public -> <D <A B tuple> col_fs> {
  Fs = empty?_f: *Empty_f size_f: *Size_f *** map_fs$,
  empty?_f_: (Empty_f value$)
  size_f: Size_f
  iter_f: \ <D> *Z -> <<A B tuple> iter> { Z Fs do_iter }
  col_fs$
} ;;


### generic

data <*A *B map> @public :=
  empty?_f: <bool fun>
  size_f: <int fun>
  get_f: <A <<A B tuple> maybe> fun>
  assoc_f: <A <B maybe> fun>
  contain_key?_f: <A bool fun>
  put_f: <A B <<A B map> <<A B tuple> maybe> tuple> fun>
  put_new_f: <A B <<A B map> bool tuple> fun>
  add_f: <A B <A B map> fun>
  remove_f: <A <<A B map> <<A B tuple> maybe> tuple> fun>
  delete_f: <A <A B map> fun>
  take_f: <<<<A B tuple> <A B map> tuple> maybe> fun>
  clear_f: <<A B map> fun>
  map$
++ a'map_impl -> [ A B a'map ] ;;

eval <*D> *Z <D *A *B map_fs> *Fs to_generic_map @public -> <A B map> {
  empty?_f:
    \\ <bool> { Z Fs do_empty? }
  size_f:
    \\ <int> { Z Fs do_size }
  get_f:
    \ <A> *X -> <<A B tuple> maybe> { Z Fs X do_get }
  assoc_f:
    \ <A> *X -> <B maybe> { Z Fs X do_assoc }
  contain_key?_f:
    \ <A> *X -> <bool> { Z Fs X do_contain_key? }
  put_f:
    \ <A> *X <B> *Y -> <<A B map> <<A B tuple> maybe> tuple> {
      Z Fs X Y do_put = (| *Z', *Replaced_ |),
      (| Z' Fs to_generic_map, Replaced_ |)
    }
  put_new_f:
    \ <A> *X <B> *Y -> <<A B map> bool tuple> {
      Z Fs X Y do_put_new = (| *Z', *Succeeded? |),
      (| Z' Fs to_generic_map, Succeeded? |)
    }
  add_f:
    \ <A> *X <B> *Y -> <A B map> {
      Z Fs X Y do_add = *Z',
      Z' Fs to_generic_map
    }
  remove_f:
    \ <A> *X -> <<A B map> <<A B tuple> maybe> tuple> {
      Z Fs X do_remove = (| *Z', *Removed_ |),
      (| Z' Fs to_generic_map, Removed_ |)
    }
  delete_f:
    \ <A> *X -> <A B map> {
      Z Fs X do_delete = *Z',
      Z' Fs to_generic_map
    }
  take_f:
    \\ <<<A B tuple> <A B map> tuple> maybe> {
      Z Fs do_take >> case {
      ; (| *KV, *Z' |) value$ -> (| KV, Z' Fs to_generic_map |) value$
      ; ** -> none$
      }
    }
  clear_f:
    \\ <A B map> {
      Z Fs do_clear = *Z',
      Z' Fs to_generic_map
    }
  map$
} ;;

eval a'map_impl -> <<*A *B map> A B map_fs> {
  empty?_f: ^g_empty?
  size_f: ^g_size
  get_f: ^g_get
  assoc_f_: (^g_assoc value$)
  contain_key?_f_: (^g_contain_key? value$)
  put_f: ^g_put
  put_new_f_: (^g_put_new value$)
  add_f_: (^g_add value$)
  remove_f: ^g_remove
  delete_f_: (^g_delete value$)
  take_f: ^g_take
  clear_f: ^g_clear
  map_fs$
} ;;

eval <*A *B map> *Map g_empty? | empty? @public -> <bool> {
  &(Map empty?_f)
} ;;

eval <*A *B map> *Map g_size | size @public -> <int> {
  &(Map size_f)
} ;;

eval <*A *B map> *Map <A> *Key g_get | get @public -> <<A B tuple> maybe> {
  Key &(Map get_f)
} ;;

eval <*A *B map> *Map <A> *Key g_assoc | assoc @public -> <B maybe> {
  Key &(Map assoc_f)
} ;;

eval <*A *B map> *Map <A> *Key g_contain_key? | contain_key? @public -> <bool> {
  Key &(Map contain_key?_f)
} ;;

eval <*A *B map> *Map <A> *Key <B> *Value g_put | put @public -> <<A B map> <<A B tuple> maybe> tuple> {
  Key Value &(Map put_f)
} ;;

eval <*A *B map> *Map <A> *Key <B> *Value g_put_new | put_new @public -> <<A B map> bool tuple> {
  Key Value &(Map put_new_f)
} ;;

eval <*A *B map> *Map <A> *Key <B> *Value g_add | add @public -> <A B map> {
  Key Value &(Map add_f)
} ;;

eval <*A *B map> *Map <A> *Key g_remove | remove @public -> <<A B map> <<A B tuple> maybe> tuple> {
  Key &(Map remove_f)
} ;;

eval <*A *B map> *Map <A> *Key g_delete | delete @public -> <A B map> {
  Key &(Map delete_f)
} ;;

eval <*A *B map> *Map g_take | take @public -> <<<A B tuple> <A B map> tuple> maybe> {
  &(Map take_f)
} ;;

eval <*A *B map> *Map g_clear | clear @public -> <A B map> {
  &(Map clear_f)
} ;;

eval <*A *B map> *Map g_iter | iter @public -> <<A B tuple> iter> {
  \\ <<A B tuple> iter_res> { Map g_iter_next } iter$
} ;;

eval <*A *B map> *Z g_iter_next -> <<A B tuple> iter_res> {
  Z g_take >> case {
  ; (| *KV, *Z' |) value$ ->
    (| KV, \\ <<A B tuple> iter_res> { Z' g_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;

eval <*A *B map> *Map <<A B tuple> list> *KVs g_add_list | add_list @public -> <A B map> {
  Map (KVs list.iter) g_add_iter
} ;;

eval <*A *B map> *Map <<A B tuple> iter> *Iter g_add_iter | add_iter @public -> <A B map> {
  Map
  Iter
  \ <A B map> *M <A B tuple> *KV -> <A B map> { KV = (| *K, *V |), M K V g_add }
  iter.fold
} ;;

eval <*A *B map> *Map <A list> *Ks g_delete_list | delete_list @public -> <A B map> {
  Map (Ks list.iter) g_delete_iter
} ;;

eval <*A *B map> *Map <A iter> *Iter g_delete_iter | delete_iter @public -> <A B map> {
  Map
  Iter
  \ <A B map> *M <A> *K -> <A B map> { M K g_delete }
  iter.fold
} ;;


### feature

feature <*T> [ *A *B a'map ] @public -> <T A B map_fs> ;;

eval <*T[ *A *B a'map ]> *FMap f_to_generic_map | to_generic_map @public -> <A B map> {
  FMap (FMap _feature_a'map) to_generic_map
} ;;

eval <*T[ *A *B a'map ]> *FMap f_empty? | empty? @public -> <bool> {
  FMap _feature_a'map = *Map_fs,
  FMap Map_fs do_empty?
} ;;

eval <*T[ *A *B a'map ]> *FMap f_size | size @public -> <int> {
  FMap _feature_a'map = *Map_fs,
  FMap Map_fs do_size
} ;;

eval <*T[ *A *B a'map ]> *FMap <A> *Key f_get | get @public -> <<A B tuple> maybe> {
  FMap _feature_a'map = *Map_fs,
  FMap Map_fs Key do_get
} ;;

eval <*T[ *A *B a'map ]> *FMap <A> *Key f_assoc | assoc @public -> <B maybe> {
  FMap _feature_a'map = *Map_fs,
  FMap Map_fs Key do_assoc
} ;;

eval <*T[ *A *B a'map ]> *FMap <A> *Key f_contain_key? | contain_key? @public -> <bool> {
  FMap _feature_a'map = *Map_fs,
  FMap Map_fs Key do_contain_key?
} ;;

eval <*T[ *A *B a'map ]> *FMap <A> *Key <B> *Value f_put | put @public -> <T <<A B tuple> maybe> tuple> {
  FMap _feature_a'map = *Map_fs,
  FMap Map_fs Key Value do_put
} ;;

eval <*T[ *A *B a'map ]> *FMap <A> *Key <B> *Value f_put_new | put_new @public -> <T bool tuple> {
  FMap _feature_a'map = *Map_fs,
  FMap Map_fs Key Value do_put_new
} ;;

eval <*T[ *A *B a'map ]> *FMap <A> *Key <B> *Value f_add | add @public -> <T> {
  FMap _feature_a'map = *Map_fs,
  FMap Map_fs Key Value do_add
} ;;

eval <*T[ *A *B a'map ]> *FMap <A> *Key f_remove | remove @public -> <T <<A B tuple> maybe> tuple> {
  FMap _feature_a'map = *Map_fs,
  FMap Map_fs Key do_remove
} ;;

eval <*T[ *A *B a'map ]> *FMap <A> *Key f_delete | delete @public -> <T> {
  FMap _feature_a'map = *Map_fs,
  FMap Map_fs Key do_delete
} ;;

eval <*T[ *A *B a'map ]> *FMap f_take | take @public -> <<<A B tuple> T tuple> maybe> {
  FMap _feature_a'map = *Map_fs,
  FMap Map_fs do_take
} ;;

eval <*T[ *A *B a'map ]> *FMap f_clear | clear @public -> <T> {
  FMap _feature_a'map = *Map_fs,
  FMap Map_fs do_clear
} ;;

eval <*T[ *A *B a'map ]> *FMap <<A B tuple> list> *KVs f_add_list | add_list @public -> <T> {
  FMap (KVs list.iter) f_add_iter
} ;;

eval <*T[ *A *B a'map ]> *FMap <<A B tuple> iter> *Iter f_add_iter | add_iter @public -> <T> {
  FMap _feature_a'map = *Map_fs,
  FMap Map_fs Iter do_add_iter
} ;;

eval <*T[ *A *B a'map ]> *FMap <A list> *Ks f_delete_list | delete_list @public -> <T> {
  FMap (Ks list.iter) f_delete_iter
} ;;

eval <*T[ *A *B a'map ]> *FMap <A iter> *Iter f_delete_iter | delete_iter @public -> <T> {
  FMap _feature_a'map = *Map_fs,
  FMap Map_fs Iter do_delete_iter
} ;;

eval <*T[ *A *B a'map ]> *FMap f_iter | iter @public -> <<A B tuple> iter> {
  FMap _feature_a'map = *Map_fs,
  FMap Map_fs do_iter
} ;;


### incarnation

data <*T *A *B map_inc> @protected :=
  org: <T>
  fo: <T A B map_fs>
  map_inc$
++ inc_a'col_impl -> [ <A B tuple> a'col ] ;;

eval inc_a'col_impl -> <<*T *A *B map_inc> <A B tuple> col_fs> {
  empty?_f_:
    (\ <*TT *AA *BB map_inc> *I -> <bool> {
       I = *ID *IFs map_inc$,
       ID IFs do_empty?
     } value$)
  size_f:
    \ <*TT *AA *BB map_inc> *I -> <int> {
      I = *ID *IFs map_inc$,
      ID IFs do_size
    }
  iter_f:
    \ <*TT *AA *BB map_inc> *I -> <<AA BB tuple> iter> {
      I = *ID *IFs map_inc$,
      ID IFs do_iter
    }
  col_fs$
} ;;


### subroutines

eval <*D> *Z <D *A *B map_fs> *Fs do_empty? @public -> <bool> {
  Z &(Fs empty?_f)
} ;;

eval <*D> *Z <D *A *B map_fs> *Fs do_size @public -> <int> {
  Z &(Fs size_f)
} ;;

eval <*D> *Z <D *A *B map_fs> *Fs <A> *Key do_get @public -> <<A B tuple> maybe> {
  Z Key &(Fs get_f)
} ;;

eval <*D> *Z <D *A *B map_fs> *Fs <A> *Key do_assoc @public -> <B maybe> {
  Z Key &(Fs assoc_f)
} ;;

eval <*D> *Z <D *A *B map_fs> *Fs <A> *Key do_contain_key? @public -> <bool> {
  Z Key &(Fs contain_key?_f)
} ;;

eval <*D> *Z <D *A *B map_fs> *Fs <A> *Key <B> *Value do_put @public -> <D <<A B tuple> maybe> tuple>  {
  Z Key Value &(Fs put_f)
} ;;

eval <*D> *Z <D *A *B map_fs> *Fs <A> *Key <B> *Value do_put_new @public -> <D bool tuple>  {
  Z Key Value &(Fs put_new_f)
} ;;

eval <*D> *Z <D *A *B map_fs> *Fs <A> *Key <B> *Value do_add @public -> <D>  {
  Z Key Value &(Fs add_f)
} ;;

eval <*D> *Z <D *A *B map_fs> *Fs <A> *Key do_remove @public -> <D <<A B tuple> maybe> tuple>  {
  Z Key &(Fs remove_f)
} ;;

eval <*D> *Z <D *A *B map_fs> *Fs <A> *Key do_delete @public -> <D>  {
  Z Key &(Fs delete_f)
} ;;

eval <*D> *Z <D *A *B map_fs> *Fs do_take @public -> <<<A B tuple> D tuple> maybe> {
  Z &(Fs take_f)
} ;;

eval <*D> *Z <D *A *B map_fs> *Fs do_clear @public -> <D> {
  Z &(Fs clear_f)
} ;;

eval <*D> *Z <D *A *B map_fs> *Fs <<A B tuple> list> *KVs do_add_list | add_list @public -> <D> {
  Z Fs (KVs list.iter) do_add_iter
} ;;

eval <*D> *Z <D *A *B map_fs> *Fs <<A B tuple> iter> *Iter do_add_iter | add_iter @public -> <D> {
  Z
  Iter
  \ <D> *Y <A B tuple> *KV -> <D> { KV = (| *K, *V |), Y Fs K V do_add }
  iter.fold
} ;;

eval <*D> *Z <D *A *B map_fs> *Fs <A list> *Ks do_delete_list | delete_list @public -> <D> {
  Z Fs (Ks list.iter) do_delete_iter
} ;;

eval <*D> *Z <D *A *B map_fs> *Fs <A iter> *Iter do_delete_iter | delete_iter @public -> <D> {
  Z
  Iter
  \ <D> *Y <A> *K -> <D> { Y Fs K do_delete }
  iter.fold
} ;;

eval <*D> *Z <D *A *B map_fs> *Fs do_iter | iter @public -> <<A B tuple> iter> {
  \\ <<A B tuple> iter_res> { Z Fs do_iter_next } iter$
} ;;

eval <*D> *Z <D *A *B map_fs> *Fs do_iter_next -> <<A B tuple> iter_res> {
  Z Fs do_take >> case {
  ; (| *KV, *Z' |) value$ ->
    (| KV, \\ <<A B tuple> iter_res> { Z' Fs do_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;
