###########################################################################
# MIT License                                                             #
# Copyright (c) 2024 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module @beta "sango.util.set.shared" ;;

import "sango.list" -> list ;;

data <*A! shared_set_h> @public :=
  extract_f: <<A iter> fun>
  empty?_f: <bool fun>
  size_f: <int fun>
  get_f: <A <A maybe> fun>
  contain?_f_: <<A bool fun> maybe>
  put_f: <A <A maybe> fun>
  put_new_f_: <<A bool fun> maybe>
  add_f_: <<A void fun>  maybe>
  remove_f: <A <A maybe> fun>
  delete_f_: <<A void fun> maybe>
  take_f: <<A maybe> fun>
  clear_f: <void fun>
  shared_set_h$ ;;

eval <*A! shared_set_h> *Set_h extract @public -> <A iter> {
  &(Set_h extract_f)
} ;;

eval <*A! shared_set_h> *Set_h empty? @public -> <bool> {
  &(Set_h empty?_f)
} ;;

eval <*A! shared_set_h> *Set_h size @public -> <int> {
  &(Set_h size_f)
} ;;

eval <*A! shared_set_h> *Set_h <A> *Elem get @public -> <A maybe> {
  Elem &(Set_h get_f)
} ;;

eval <*A! shared_set_h> *Set_h <A> *Elem contain? @public -> <bool> {
  Set_h contain?_f_ >> case {
  ; *F value$ -> Elem &F
  ; ** -> Set_h Elem get >> something?
  }
} ;;

eval <*A! shared_set_h> *Set_h <A> *Elem put @public -> <A maybe> {
  Elem &(Set_h put_f)
} ;;

eval <*A! shared_set_h> *Set_h <A> *Elem put_new @public -> <bool> {
  Set_h put_new_f_ >> case {
  ; *F value$ -> Elem &F
  ; ** ->
    Set_h Elem get >> case {
    ; none$ -> Set_h Elem put, true$
    ; ** -> false$
    }
  }
} ;;

eval <*A! shared_set_h> *Set_h <A> *Elem add @public -> <void> {
  Set_h add_f_ >> case {
  ; *F value$ -> Elem &F
  ; ** -> Set_h Elem put >> ignore
  }
} ;;

eval <*A! shared_set_h> *Set_h <A> *Elem remove @public -> <A maybe> {
  Elem &(Set_h remove_f)
} ;;

eval <*A! shared_set_h> *Set_h <A> *Elem delete @public -> <void> {
  Set_h delete_f_ >> case {
  ; *F value$ -> Elem &F
  ; ** -> Set_h Elem remove >> ignore
  }
} ;;

eval <*A! shared_set_h> *Set_h take @public -> <A maybe> {
  &(Set_h take_f)
} ;;

eval <*A! shared_set_h> *Set_h clear @public -> <void> {
  &(Set_h clear_f)
} ;;

eval <*A! shared_set_h> *Set_h <A list> *Elems add_list @public -> <void> {
  Set_h (Elems list.iter) add_iter
} ;;

eval <*A! shared_set_h> *Set_h <A iter> *Iter add_iter @public -> <void> {
  Iter next >> case {
  ; (| *E, *Iter' |) value$ -> Set_h E add, Set_h Iter' &&
  ; ** ->
  }
} ;;

eval <*A! shared_set_h> *Set_h <A list> *Elems delete_list @public -> <void> {
  Set_h (Elems list.iter) delete_iter
} ;;

eval <*A! shared_set_h> *Set_h <A iter> *Iter delete_iter @public -> <void> {
  Iter next >> case {
  ; (| *E, *Iter' |) value$ -> Set_h E delete, Set_h Iter' &&
  ; ** ->
  }
} ;;
