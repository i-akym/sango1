###########################################################################
# MIT License                                                             #
# Copyright (c) 2024 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module @beta "sango.util.set.shared.box" ;;

import "sango.actor.util" -> actu ;;
import "sango.entity.box" -> box ;;
import "sango.list" -> list ;;
import "sango.util.set" -> set ;;
import "sango.util.set.shared" -> shset ;;

eval <*T![ *A! set.a'set ]> *FSet f_create_box | create_box @public -> <A shset.shared_set_h> {
  FSet (FSet set._feature_a'set) do_create_box
} ;;

eval <*D!> *Set_d <D *A! set.set_fs> *Set_fs do_create_box | create_box @public -> <A shset.shared_set_h> {
  Set_d none$ box.create_box = *Box,
  Box actu.create_box_monitor = *Mon,

  extract_f: \\ <A iter> { Mon Set_fs extract }
  empty?_f: \\ <bool> { Mon Set_fs empty? }
  size_f: \\ <int> { Mon Set_fs size }
  get_f: \ <A> *Elem -> <A maybe> { Mon Set_fs Elem get }
  contain?_f_: (\ <A> *Elem -> <bool> { Mon Set_fs Elem contain? } value$)
  put_f: \ <A> *Elem -> <A maybe> { Mon Set_fs Elem put }
  put_new_f_: (\ <A> *Elem -> <bool> { Mon Set_fs Elem put_new } value$)
  add_f_: (\ <A> *Elem -> <void> { Mon Set_fs Elem add } value$)
  remove_f: \ <A> *Elem -> <A maybe> { Mon Set_fs Elem remove }
  delete_f_: (\ <A> *Elem -> <void> { Mon Set_fs Elem delete } value$)
  take_f: \\ <A maybe> { Mon Set_fs take }
  clear_f: \\ <void> { Mon Set_fs clear }
  shset.shared_set_h$
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! set.set_fs> *Set_fs extract -> <A iter> {
  Mon
    \ <D box.box_h> *Box -> <D> {
      Box box.read
    }
    actu.run = *Z,
  Z Set_fs set.do_iter
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! set.set_fs> *Set_fs empty? -> <bool> {
  Mon
    \ <D box.box_h> *Box -> <D> {
      Box box.read
    } actu.run = *Z,
  Z Set_fs set.do_empty?
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! set.set_fs> *Set_fs size -> <int> {
  Mon
    \ <D box.box_h> *Box -> <D> {
      Box box.read
    } actu.run = *Z,
  Z Set_fs set.do_size
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! set.set_fs> *Set_fs <A> *Elem get -> <A maybe> {
  Mon
    \ <D box.box_h> *Box -> <D> {
      Box box.read
    } actu.run = *Z,
  Z Set_fs Elem set.do_get
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! set.set_fs> *Set_fs <A> *Elem contain? -> <bool> {
  Mon
    \ <D box.box_h> *Box -> <D> {
      Box box.read
    } actu.run = *Z,
  Z Set_fs Elem set.do_contain?
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! set.set_fs> *Set_fs <A> *Elem put -> <A maybe> {
  Mon
    \ <D box.box_h> *Box -> <A maybe> {
      Box box.read = *Z,
      Z Set_fs Elem set.do_put = (| *Z', *Replaced_ |),
      Box Z' box.write,
      Replaced_
    } actu.run
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! set.set_fs> *Set_fs <A> *Elem put_new -> <bool> {
  Mon
    \ <D box.box_h> *Box -> <bool> {
      Box box.read = *Z,
      Z Set_fs Elem set.do_put_new = (| *Z', *Succeeded? |),
      Box Z' box.write,
      Succeeded?
    } actu.run
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! set.set_fs> *Set_fs <A> *Elem add -> <void> {
  Mon
    \ <D box.box_h> *Box -> <void> {
      Box box.read = *Z,
      Z Set_fs Elem set.do_add = *Z',
      Box Z' box.write >> ignore
    } actu.run
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! set.set_fs> *Set_fs <A> *Elem remove -> <A maybe> {
  Mon
    \ <D box.box_h> *Box -> <A maybe> {
      Box box.read = *Z,
      Z Set_fs Elem set.do_remove = (| *Z', *Removed_ |),
      Box Z' box.write,
      Removed_
    } actu.run
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! set.set_fs> *Set_fs <A> *Elem delete -> <void> {
  Mon
    \ <D box.box_h> *Box -> <void> {
      Box box.read = *Z,
      Z Set_fs Elem set.do_delete = *Z',
      Box Z' box.write >> ignore
    } actu.run
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! set.set_fs> *Set_fs take -> <A maybe> {
  Mon
    \ <D box.box_h> *Box -> <A maybe> {
      Box box.read = *Z,
      Z Set_fs set.do_take >> case {
      ; (| *Elem, *Z' |) value$ -> Box Z' box.write, Elem value$
      ; ** -> none$
      }
    } actu.run
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! set.set_fs> *Set_fs clear -> <void> {
  Mon
    \ <D box.box_h> *Box -> <void> {
      Box box.read = *Z,
      Z Set_fs set.do_clear = *Z',
      Box Z' box.write >> ignore
    } actu.run
} ;;
