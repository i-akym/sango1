###########################################################################
# MIT License                                                             #
# Copyright (c) 2021 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.set.hashset" ;;

import "sango.util.avltree.map" -> avlmap ;;
import "sango.util.map" -> map ;;
import "sango.util.set" -> set ;;
import "sango.util.set.simpleset" -> sset ;;

extend <*A _1> :=
  eq_fs: <A eq_fs>
  col: <int <A set.set> map.map>
  count: <int>
  hash_set_d$ ;;

eval new_set @public -> <*A set.set> {
  hard_eq_fs new_set
} ;;

eval <*A eq_fs> *Eq new_set_eq | new_set @public -> <A set.set> {
  d: (Eq (int_ord_fs avlmap.new_map) 0 hash_set_d$)
    fs: set_fs
    set.set$
} ;;

eval set_fs -> <*A set.set_fs> {
  empty?_f: ^empty?
    size_f: ^size
    get_f: ^get
    contain?_f_: (^contain? value$)
    put_f: ^put
    put_new_f_: (^put_new value$)
    add_f_: (^add value$)
    remove_f: ^remove
    delete_f_: (^delete value$)
    take_f: ^take
    clear_f: ^clear
    set.set_fs$
} ;;

eval <*A _1+> *Set_d empty? -> <bool> {
  Set_d = *Eq *Col *Count hash_set_d$,
  Count zero?
} ;;

eval <*A _1+> *Set_d size -> <int> {
  Set_d = *Eq *Col *Count hash_set_d$,
  Count
} ;;

eval <*A _1+> *Set_d <A> *Elem get -> <A maybe> {
  Set_d = *Eq *Col *Count hash_set_d$,
  Col (Elem &(Eq hash_f)) map.assoc >> case {
  ; *S value$ -> S Elem set.get
  ; ** -> none$
  }
} ;;

eval <*A _1+> *Set_d <A> *Elem contain? -> <bool> {
  Set_d Elem get >> something?
} ;;

eval <*A _1+> *Set_d <A> *Elem put -> <<A _1+> <A maybe> tuple> {
  Set_d = *Eq *Col *Count hash_set_d$,
  Elem &(Eq hash_f) = *H,
  Col H map.assoc >> case {
  ; *S value$ ->
    S Elem set.put >> case {
    ; (| *S', none$ |) -> (| Col H S' map.add, Count inc, none$ |)
    ; (| *S', *R |) -> (| Col H S' map.add, Count, R |)
    } = (| *Col', *Count', *Replaced_ |),
    (| col: Col' count: Count' :: Set_d hash_set_d$, Replaced_ |)
  ; ** ->
    Eq sset.new_set = *S,
    S Elem set.add = *S',
    Col H S' map.add = *Col',
    Count inc = *Count',
    (| col: Col' count: Count' :: Set_d hash_set_d$, none$ |)
  }
} ;;

eval <*A _1+> *Set_d <A> *Elem put_new -> <<A _1+> bool tuple> {
  Set_d Elem contain? >> case {
  ; true$ -> (| Set_d, false$ |)
  ; ** -> (| Set_d Elem add, true$ |)
  }
} ;;

eval <*A _1+> *Set_d <A> *Elem add -> <A _1+> {
  Set_d Elem put = (| *Set_d', ** |),
  Set_d'
} ;;

eval <*A _1+> *Set_d <A> *Elem remove -> <<A _1+> <A maybe> tuple> {
  Set_d = *Eq *Col *Count hash_set_d$,
  Elem &(Eq hash_f) = *H,
  Col H map.assoc >> case {
  ; *S value$ ->
    S Elem set.remove >> case {
    ; (| **, none$ |) -> (| Col, Count, none$ |)
    ; (| *S', *R |) || S' set.empty? -> (| Col H map.delete, Count dec, R |)
    ; (| *S', *R |) -> (| Col H S' map.add, Count dec, R |)
    } = (| *Col', *Count', *Removed_ |),
    (| col: Col' count: Count' :: Set_d hash_set_d$, Removed_ |)
  ; ** -> (| Set_d, none$ |)
  }
} ;;

eval <*A _1+> *Set_d <A> *Elem delete -> <A _1+> {
  Set_d Elem remove = (| *Set_d', ** |),
  Set_d'
} ;;

eval <*A _1+> *Set_d take -> <<A <A _1+> tuple> maybe> {
  Set_d = *Eq *Col *Count hash_set_d$,
  Col map.take >> case {
  ; (| (| *H, *S |), *Col' |) value$ ->
    S set.take = (| *E, *S' |) value$,
    Count dec = *Count',
    S' set.empty? >> case {
    ; true$ ->
      (| E, col: Col' count: Count' :: Set_d hash_set_d$ |) value$
    ; ** ->
      Col' H S' map.add = *Col'',
      (| E, col: Col'' count: Count' :: Set_d hash_set_d$ |) value$
    }
  ; ** -> none$
  }
} ;;

eval <*A _1+> *Set_d clear -> <A _1+> {
  Set_d = *Eq *Col *Count hash_set_d$,
  col: (Col map.clear) count: 0 :: Set_d hash_set_d$
} ;;

