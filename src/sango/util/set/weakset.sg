###########################################################################
# MIT License                                                             #
# Copyright (c) 2021 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module @alpha "sango.util.set.weakset" ;;

import "sango.entity.existence" -> ex ;;
import "sango.list" -> list ;;
import "sango.tuple" -> tuple ;;
import "sango.util.map.weakkeymap" -> wkmap ;;

data <*A set_h> @opaque :=
  map: <A void wkmap.map_h>
  set_h$ ;;

eval <*A! ex.dress_fs> *Dress_fs create_weak_set @public -> <A set_h> {
  Dress_fs (\ <void> *X -> <void> { X }) wkmap.create_weak_key_map = *M,
  map: M set_h$
} ;;

eval <*A set_h> *Set_h all_elems @public -> <A list> {
  ((Set_h map) wkmap.all_kvs) ^tuple.pair_first list.map
} ;;

eval <*A set_h> *Set_h empty? @public -> <bool> {
  (Set_h map) wkmap.empty?
} ;;

eval <*A set_h> *Set_h size @public -> <int> {
  (Set_h map) wkmap.size
} ;;

eval <*A set_h> *Set_h <A> *X get @public -> <A maybe> {
  ((Set_h map) X wkmap.get) ^tuple.pair_first apply_to_something
} ;;

eval <*A set_h> *Set_h <A> *X contain? @public -> <bool> {
  (Set_h map) X wkmap.contain_key?
} ;;

eval <*A set_h> *Set_h <A> *X put @public -> <A maybe> {
  ((Set_h map) X void$ wkmap.put) ^tuple.pair_first apply_to_something
} ;;

eval <*A set_h> *Set_h <A> *X put_new @public -> <bool> {
  (Set_h map) X void$ wkmap.put_new
} ;;

eval <*A set_h> *Set_h <A> *X add @public -> <void> {
  (Set_h map) X void$ wkmap.add
} ;;

eval <*A set_h> *Set_h <A> *X remove @public -> <A maybe> {
  ((Set_h map) X wkmap.remove) ^tuple.pair_first apply_to_something
} ;;

eval <*A set_h> *Set_h <A> *X delete @public -> <void> {
  (Set_h map) X wkmap.delete
} ;;

eval <*A set_h> *Set_h take @public -> <A maybe> {
  ((Set_h map) wkmap.take) ^tuple.pair_first apply_to_something
} ;;

eval <*A set_h> *Set_h clear @public -> <void> {
  (Set_h map) wkmap.clear
} ;;

eval <*A set_h> *Set_h <A list> *Xs add_list @public -> <void> {
  Set_h (Xs list.iter) add_iter
} ;;

eval <*A set_h> *Set_h <A iter> *Iter add_iter @public -> <void> {
  Iter next >> case {
  ; (| *X, *Iter' |) value$ -> Set_h X add, Set_h Iter' &&
  ; ** ->
  }
} ;;

eval <*A set_h> *Set_h <A list> *Xs delete_list @public -> <void> {
  Set_h (Xs list.iter) delete_iter
} ;;

eval <*A set_h> *Set_h <A iter> *Iter delete_iter @public -> <void> {
  Iter next >> case {
  ; (| *X, *Iter' |) value$ -> Set_h X delete, Set_h Iter' &&
  ; ** ->
  }
} ;;
