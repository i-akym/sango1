###########################################################################
# MIT License                                                             #
# Copyright (c) 2021 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.ralist" ;;

import "sango.list" -> list ;;
import "sango.tuple" -> tuple ;;
import "sango.util.iter" -> iter ;;

### definition of common-behavior object

alias type <*A d> @public := <A _1+> ;;

data <+*A ralist> @public :=
  d: <A d>
  fs: <<A d> A ralist_fs>
  ralist$ ;;

data <+*A! fxralist> @opaque :=
  <A ralist> fxralist$
++ as_a'ralist -> [ A a'ralist ]
;;

eval <*A! ralist> *Ralist as_fxralist @public -> <A fxralist> {
  Ralist fxralist$
} ;;

eval <*A! fxralist> *FxRalist as_ralist @public -> <A ralist> {
  FxRalist = *Ralist fxralist$, Ralist
} ;;


### definition of function set

data <*D *A ralist_fs> @public :=
  empty?_f: <D bool fun>
  length_f: <D int fun>
  elem_f: <D int <A maybe> fun>
  first_f_: <<D <A maybe> fun> maybe>
  last_f_: <<D <A maybe> fun> maybe>
  tail_f_: <<D <D maybe> fun> maybe>
  insert_at_f: <D int A D fun>
  append_f_: <<D A D fun> maybe>
  remove_at_f: <D int <D <A maybe> tuple> fun>
  replace_at_f_: <<D int A <D <A maybe> tuple> fun> maybe>
  take_f_: <<D int D fun> maybe>
  drop_f_: <<D int D fun> maybe>
  clear_f: <D D fun>
  ralist_fs$ ;;


### definition of feature

feature <*T!> [ *A a'ralist ] @public -> <T A ralist_fo> ;;

data <*T! *A ralist_fo> @public :=
  d: <T>
  fs: <T A ralist_fs>
  ralist_fo$
++ as_a'col -> [ A a'col ] ;;


### implementation of common-behavior object

eval <*A ralist> *Ralist c_empty? | empty? @public -> <bool> {
  Ralist = d: *D fs: *Fs ralist$,
  D Fs _empty?
} ;;

eval <*A! fxralist> *FxRalist fx_empty? | empty? @public -> <bool> {
  (FxRalist as_ralist) c_empty?
} ;;

eval <*A ralist> *Ralist c_non_empty? | non_empty? @public -> <bool> {
  Ralist c_empty? >> not
} ;;

eval <*A! fxralist> *FxRalist fx_non_empty? | non_empty? @public -> <bool> {
  (FxRalist as_ralist) c_non_empty?
} ;;

eval <*A ralist> *Ralist c_length | length @public -> <int> {
  Ralist = d: *D fs: *Fs ralist$,
  D Fs _length
} ;;

eval <*A! fxralist> *FxRalist fx_length | length @public -> <int> {
  (FxRalist as_ralist) c_length
} ;;

eval <*A ralist> *Ralist <int> *Index c_elem | elem @public -> <A maybe> {
  Ralist = d: *D fs: *Fs ralist$,
  D Fs Index _elem
} ;;

eval <*A! fxralist> *FxRalist <int> *Index fx_elem | elem @public -> <A maybe> {
  (FxRalist as_ralist) Index c_elem
} ;;

eval <*A ralist> *Ralist c_first | first | head @public -> <A maybe> {
  Ralist = d: *D fs: *Fs ralist$,
  D Fs _first
} ;;

eval <*A! fxralist> *FxRalist fx_first | first | head @public -> <A maybe> {
  (FxRalist as_ralist) c_first
} ;;

eval <*A ralist> *Ralist c_last | last @public -> <A maybe> {
  Ralist = d: *D fs: *Fs ralist$,
  D Fs _last
} ;;

eval <*A! fxralist> *FxRalist fx_last | last @public -> <A maybe> {
  (FxRalist as_ralist) c_last
} ;;

eval <*A ralist> *Ralist c_tail | tail @public -> <<A ralist> maybe> {
  Ralist = d: *D fs: *Fs ralist$,
  D Fs _tail >> case {
  ; *D' value$ -> (d: D' fs: Fs ralist$) value$
  ; ** -> none$
  }
} ;;

eval <*A! fxralist> *FxRalist fx_tail | tail @public -> <<A fxralist> maybe> {
  (FxRalist as_ralist) c_tail >> case {
  ; *Ralist' value$ -> (Ralist' as_fxralist) value$
  ; ** -> none$
  }
} ;;

eval <*A ralist> *Ralist <int> *Index <A> *Elem c_insert_at | insert_at @public -> <A ralist> {
  Ralist = d: *D fs: *Fs ralist$,
  D Fs Index Elem _insert_at = *D',
  d: D' fs: Fs ralist$
} ;;

eval <*A! fxralist> *FxRalist <int> *Index <A> *Elem fx_insert_at | insert_at @public -> <A fxralist> {
  (FxRalist as_ralist) Index Elem c_insert_at = *Ralist',
  Ralist' as_fxralist
} ;;

eval <*A ralist> *Ralist <A> *Elem c_append | append @public -> <A ralist> {
  Ralist = d: *D fs: *Fs ralist$,
  D Fs Elem _append = *D',
  d: D' fs: Fs ralist$
} ;;

eval <*A! fxralist> *FxRalist <A> *Elem fx_append | append @public -> <A fxralist> {
  (FxRalist as_ralist) Elem c_append = *Ralist',
  Ralist' as_fxralist
} ;;

eval <*A ralist> *Ralist <int> *Index c_remove_at | remove_at @public -> <<A ralist> <A maybe> tuple> {
  Ralist = d: *D fs: *Fs ralist$,
  D Fs Index _remove_at >> case {
  ; (| *D', *Removed value$ |) -> (| d: D' fs: Fs ralist$, Removed value$ |)
  ; ** -> (| Ralist, none$ |)
  }
} ;;

eval <*A! fxralist> *FxRalist <int> *Index fx_remove_at | remove_at @public -> <<A fxralist> <A maybe> tuple> {
  (FxRalist as_ralist) Index c_remove_at = (| *Ralist', *Removed_ |),
  (| Ralist' as_fxralist, Removed_ |)
} ;;

eval <*A ralist> *Ralist <int> *Index c_delete_at | delete_at @public -> <A ralist> {
  Ralist = d: *D fs: *Fs ralist$,
  D Fs Index _delete_at = *D',
  d: D' fs: Fs ralist$
} ;;

eval <*A! fxralist> *FxRalist <int> *Index fx_delete_at | delete_at @public -> <A fxralist> {
  (FxRalist as_ralist) Index c_delete_at = *Ralist',
  Ralist' as_fxralist
} ;;

eval <*A ralist> *Ralist <int> *Index <A> *Elem c_replace_at | replace_at @public -> <<A ralist> <A maybe> tuple> {
  Ralist = d: *D fs: *Fs ralist$,
  D Fs Index Elem _replace_at >> case {
  ; (| *D', *Replaced value$ |) -> (| d: D' fs: Fs ralist$, Replaced value$ |)
  ; ** -> (| Ralist, none$ |)
  }
} ;;

eval <*A! fxralist> *FxRalist <int> *Index <A> *Elem fx_replace_at | replace_at @public -> <<A fxralist> <A maybe> tuple> {
  (FxRalist as_ralist) Index Elem c_replace_at = (| *Ralist', *Replaced_ |),
  (| Ralist' as_fxralist, Replaced_ |)
} ;;

eval <*A ralist> *Ralist <int> *Index <A> *Elem c_update_at | update_at @public -> <A ralist> {
  Ralist = d: *D fs: *Fs ralist$,
  D Fs Index Elem _update_at = *D',
  d: D' fs: Fs ralist$
} ;;

eval <*A! fxralist> *FxRalist <int> *Index <A> *Elem fx_update_at | update_at @public -> <A fxralist> {
  (FxRalist as_ralist) Index Elem c_update_at = *Ralist',
  Ralist' as_fxralist
} ;;

eval <*A ralist> *Ralist <int> *Count c_take | take @public -> <A ralist> {
  Ralist = d: *D fs: *Fs ralist$,
  D Fs Count _take = *D',
  d: D' fs: Fs ralist$
} ;;

eval <*A! fxralist> *FxRalist <int> *Count fx_take | take @public -> <A fxralist> {
  (FxRalist as_ralist) Count c_take = *Ralist',
  Ralist' as_fxralist
} ;;

eval <*A ralist> *Ralist <int> *Count c_drop | drop @public -> <A ralist> {
  Ralist = d: *D fs: *Fs ralist$,
  D Fs Count _drop = *D',
  d: D' fs: Fs ralist$
} ;;

eval <*A! fxralist> *FxRalist <int> *Count fx_drop | drop @public -> <A fxralist> {
  (FxRalist as_ralist) Count c_drop = *Ralist',
  Ralist' as_fxralist
} ;;

eval <*A ralist> *Ralist c_clear | clear @public -> <A ralist> {
  Ralist = d: *D fs: *Fs ralist$,
  D Fs _clear = *D',
  d: D' fs: Fs ralist$
} ;;

eval <*A! fxralist> *FxRalist fx_clear | clear @public -> <A fxralist> {
  (FxRalist as_ralist) c_clear = *Ralist',
  Ralist' as_fxralist
} ;;

eval <*A ralist> *Ralist <A list> *Elems c_append_list | append_list @public -> <A ralist> {
  Ralist (Elems list.iter) c_append_iter
} ;;

eval <*A ralist> *Ralist <A iter> *Iter c_append_iter | append_iter @public -> <A ralist> {
  Iter next >> case {
  ; (| *Elem, *Iter' |) value$ -> (Ralist Elem c_append) Iter' &&
  ; ** -> Ralist
  }
} ;;

eval <*A! fxralist> *FxRalist <A list> *Elems fx_append_list | append_list @public -> <A fxralist> {
  (FxRalist as_ralist) Elems c_append_list = *Ralist',
  Ralist' as_fxralist
} ;;

eval <*A! fxralist> *FxRalist <A iter> *Iter fx_append_iter | append_iter @public -> <A fxralist> {
  (FxRalist as_ralist) Iter c_append_iter = *Ralist',
  Ralist' as_fxralist
} ;;

eval <*A ralist> *Ralist c_iter | iter @public -> <A iter> {
  \\ <A iter_res> { Ralist c_iter_next } iter$
} ;;

eval <*A ralist> *Ralist c_iter_next -> <A iter_res> {
  Ralist c_first >> case {
  ; *Elem value$ ->
    (| Elem, \\ <A iter_res> { (Ralist c_tail >> value) c_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;

eval <*A! fxralist> *FxRalist fx_iter | iter @public -> <A iter> {
  (FxRalist as_ralist) c_iter
} ;;


### framework of faeture

eval <*T![ *A a'ralist ]> *FRalist f_empty? | empty? @public -> <bool> {
  FRalist _feature_a'ralist = *Ralist_fo,
  Ralist_fo fo_empty?
} ;;

eval <*T! *A ralist_fo> *Ralist_fo fo_empty? | empty? @public -> <bool> {
  Ralist_fo = d: *D fs: *Fs ralist_fo$,
  D Fs _empty?
} ;;

eval <*T![ *A a'ralist ]> *FRalist f_non_empty? | non_empty? @public -> <bool> {
  FRalist f_empty? >> not
} ;;

eval <*T! *A ralist_fo> *Ralist_fo fo_non_empty? | non_empty? @public -> <bool> {
  Ralist_fo fo_empty? >> not
} ;;

eval <*T![ *A a'ralist ]> *FRalist f_length | length @public -> <int> {
  FRalist _feature_a'ralist = *Ralist_fo,
  Ralist_fo fo_length
} ;;

eval <*T! *A ralist_fo> *Ralist_fo fo_length | length @public -> <int> {
  Ralist_fo = d: *D fs: *Fs ralist_fo$,
  D Fs _length
} ;;

eval <*T![ *A a'ralist ]> *FRalist <int> *Index f_elem | elem @public -> <A maybe> {
  FRalist _feature_a'ralist = *Ralist_fo,
  Ralist_fo Index fo_elem
} ;;

eval <*T! *A ralist_fo> *Ralist_fo <int> *Index fo_elem | elem @public -> <A maybe> {
  Ralist_fo = d: *D fs: *Fs ralist_fo$,
  D Fs Index _elem
} ;;

eval <*T![ *A a'ralist ]> *FRalist <int> *Index f_first | first | head @public -> <A maybe> {
  FRalist _feature_a'ralist = *Ralist_fo,
  Ralist_fo fo_first
} ;;

eval <*T! *A ralist_fo> *Ralist_fo fo_first | first | head @public -> <A maybe> {
  Ralist_fo = d: *D fs: *Fs ralist_fo$,
  D Fs _first
} ;;

eval <*T![ *A a'ralist ]> *FRalist <int> *Index f_last | last @public -> <A maybe> {
  FRalist _feature_a'ralist = *Ralist_fo,
  Ralist_fo fo_last
} ;;

eval <*T! *A ralist_fo> *Ralist_fo fo_last | last @public -> <A maybe> {
  Ralist_fo = d: *D fs: *Fs ralist_fo$,
  D Fs _last
} ;;

eval <*T![ *A a'ralist ]> *FRalist f_tail | tail @public -> <T maybe> {
  FRalist _feature_a'ralist = *Ralist_fo,
  Ralist_fo fo_tail >> case {
  ; *Ralist_fo' value$ ->
    Ralist_fo' = d: *D' fs: *Fs' ralist_fo$,
    D' value$
  ; ** -> none$
  }
} ;;

eval <*T! *A ralist_fo> *Ralist_fo fo_tail | tail @public -> <<T A ralist_fo> maybe> {
  Ralist_fo = d: *D fs: *Fs ralist_fo$,
  D Fs _tail >> case {
  ; *D' value$ -> (d: D' fs: Fs ralist_fo$) value$
  ; ** -> none$
  }
} ;;

eval <*T![ *A a'ralist ]> *FRalist <int> *Index <A> *Elem f_insert_at | insert_at @public -> <T> {
  FRalist _feature_a'ralist = *Ralist_fo,
  Ralist_fo Index Elem fo_insert_at = *Ralist_fo',
  Ralist_fo' = d: *D' fs: *Fs' ralist_fo$,
  D'
} ;;

eval <*T! *A ralist_fo> *Ralist_fo <int> *Index <A> *Elem fo_insert_at | insert_at @public -> <T A ralist_fo> {
  Ralist_fo = d: *D fs: *Fs ralist_fo$,
  D Fs Index Elem _insert_at = *D',
  d: D' fs: Fs ralist_fo$
} ;;

eval <*T![ *A a'ralist ]> *FRalist <A> *Elem f_append | append @public -> <T> {
  FRalist _feature_a'ralist = *Ralist_fo,
  Ralist_fo Elem fo_append = *Ralist_fo',
  Ralist_fo' = d: *D' fs: *Fs' ralist_fo$,
  D'
} ;;

eval <*T! *A ralist_fo> *Ralist_fo <A> *Elem fo_append | append @public -> <T A ralist_fo> {
  Ralist_fo = d: *D fs: *Fs ralist_fo$,
  D Fs Elem _append = *D',
  d: D' fs: Fs ralist_fo$
} ;;

eval <*T![ *A a'ralist ]> *FRalist <int> *Index f_remove_at | remove_at @public -> <T <A maybe> tuple> {
  FRalist _feature_a'ralist = *Ralist_fo,
  Ralist_fo Index fo_remove_at = (| *Ralist_fo', *Removed_ |),
  Ralist_fo' = d: *D' fs: *Fs' ralist_fo$,
  (| D', Removed_ |)
} ;;

eval <*T! *A ralist_fo> *Ralist_fo <int> *Index fo_remove_at | remove_at @public -> <<T A ralist_fo> <A maybe> tuple> {
  Ralist_fo = d: *D fs: *Fs ralist_fo$,
  D Fs Index _remove_at = (| *D', *Removed_ |),
  (| d: D' fs: Fs ralist_fo$, Removed_ |)
} ;;

eval <*T![ *A a'ralist ]> *FRalist <int> *Index f_delete_at | delete_at @public -> <T> {
  FRalist _feature_a'ralist = *Ralist_fo,
  Ralist_fo Index fo_delete_at = *Ralist_fo',
  Ralist_fo' = d: *D' fs: *Fs' ralist_fo$,
  D'
} ;;

eval <*T! *A ralist_fo> *Ralist_fo <int> *Index fo_delete_at | delete_at @public -> <T A ralist_fo> {
  Ralist_fo = d: *D fs: *Fs ralist_fo$,
  D Fs Index _delete_at = *D',
  d: D' fs: Fs ralist_fo$
} ;;

eval <*T![ *A a'ralist ]> *FRalist <int> *Index <A> *Elem f_replace_at | replace_at @public -> <T <A maybe> tuple> {
  FRalist _feature_a'ralist = *Ralist_fo,
  Ralist_fo Index Elem fo_replace_at = (| *Ralist_fo', *Replaced_ |),
  Ralist_fo' = d: *D' fs: *Fs' ralist_fo$,
  (| D', Replaced_ |)
} ;;

eval <*T! *A ralist_fo> *Ralist_fo <int> *Index <A> *Elem fo_replace_at | replace_at @public -> <<T A ralist_fo> <A maybe> tuple> {
  Ralist_fo = d: *D fs: *Fs ralist_fo$,
  D Fs Index Elem _replace_at = (| *D', *Replaced_ |),
  (| d: D' fs: Fs ralist_fo$, Replaced_ |)
} ;;

eval <*T![ *A a'ralist ]> *FRalist <int> *Index <A> *Elem f_update_at | update_at @public -> <T> {
  FRalist _feature_a'ralist = *Ralist_fo,
  Ralist_fo Index Elem fo_update_at = *Ralist_fo',
  Ralist_fo' = d: *D' fs: *Fs' ralist_fo$,
  D'
} ;;

eval <*T! *A ralist_fo> *Ralist_fo <int> *Index <A> *Elem fo_update_at | update_at @public -> <T A ralist_fo> {
  Ralist_fo = d: *D fs: *Fs ralist_fo$,
  D Fs Index Elem _update_at = *D',
  d: D' fs: Fs ralist_fo$
} ;;

eval <*T![ *A a'ralist ]> *FRalist <int> *Count f_take | take @public -> <T> {
  FRalist _feature_a'ralist = *Ralist_fo,
  Ralist_fo Count fo_take = *Ralist_fo',
  Ralist_fo' = d: *D' fs: *Fs' ralist_fo$,
  D'
} ;;

eval <*T! *A ralist_fo> *Ralist_fo <int> *Count fo_take | take @public -> <T A ralist_fo> {
  Ralist_fo = d: *D fs: *Fs ralist_fo$,
  D Fs Count _take = *D',
  d: D' fs: Fs ralist_fo$
} ;;

eval <*T![ *A a'ralist ]> *FRalist <int> *Count f_drop | drop @public -> <T> {
  FRalist _feature_a'ralist = *Ralist_fo,
  Ralist_fo Count fo_drop = *Ralist_fo',
  Ralist_fo' = d: *D' fs: *Fs' ralist_fo$,
  D'
} ;;

eval <*T! *A ralist_fo> *Ralist_fo <int> *Count fo_drop | drop @public -> <T A ralist_fo> {
  Ralist_fo = d: *D fs: *Fs ralist_fo$,
  D Fs Count _drop = *D',
  d: D' fs: Fs ralist_fo$
} ;;

eval <*T![ *A a'ralist ]> *FRalist f_clear | clear @public -> <T> {
  FRalist _feature_a'ralist = *Ralist_fo,
  Ralist_fo fo_clear = *Ralist_fo',
  Ralist_fo' = d: *D' fs: *Fs' ralist_fo$,
  D'
} ;;

eval <*T! *A ralist_fo> *Ralist_fo fo_clear | clear @public -> <T A ralist_fo> {
  Ralist_fo = d: *D fs: *Fs ralist_fo$,
  D Fs _clear = *D',
  d: D' fs: Fs ralist_fo$
} ;;

eval <*T![ *A a'ralist ]> *FRalist <A list> *Elems f_append_list | append_list @public -> <T> {
  FRalist (Elems list.iter) f_append_iter
} ;;

eval <*T! *A ralist_fo> *Ralist_fo <A list> *Elems fo_append_list | append_list @public -> <T A ralist_fo> {
  Ralist_fo (Elems list.iter) fo_append_iter
} ;;

eval <*T![ *A a'ralist ]> *FRalist <A iter> *Iter f_append_iter | append_iter @public -> <T> {
  FRalist _feature_a'ralist = *Ralist_fo,
  Ralist_fo Iter fo_append_iter = *Ralist_fo',
  Ralist_fo' = d: *D' fs: *Fs' ralist_fo$,
  D'
} ;;

eval <*T! *A ralist_fo> *Ralist_fo <A iter> *Iter fo_append_iter | append_iter @public -> <T A ralist_fo> {
  Iter next >> case {
  ; (| *Elem, *Iter' |) value$ -> (Ralist_fo Elem fo_append) Iter' &&
  ; ** -> Ralist_fo
  }
} ;;

eval <*T![ *A a'ralist ]> *FRalist f_iter | iter @public -> <A iter> {
  FRalist _feature_a'ralist = *Ralist_fo,
  Ralist_fo fo_iter
} ;;

eval <*T! *A ralist_fo> *Ralist_fo fo_iter | iter @public -> <A iter> {
  \\ <A iter_res> { Ralist_fo fo_iter_next } iter$
} ;;

eval <*T! *A ralist_fo> *Ralist_fo fo_iter_next -> <A iter_res> {
  Ralist_fo fo_first >> case {
  ; *Elem value$ ->
    (| Elem, \\ <A iter_res> { (Ralist_fo fo_tail >> value) fo_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;


### feature implementation of feature object

eval <*T! *A ralist_fo> *Ralist_fo as_a'col -> <A col> {
  Ralist_fo [] &\ <T A ralist_fo> *Fo <A list> *EsR -> <A list> {
    Fo fo_first >> case {
    ; *E value$ -> (Fo fo_tail >> value) [ E ; EsR ] &&
    ; ** -> EsR list.reverse
    }
  } = *Es,
  d: (Es fo_col_d$) fs: ralist_fo_col_fs col$
} ;;

extend <*A _1> -> fo_col_d := <A list> fo_col_d$ ;;

eval ralist_fo_col_fs -> <<*A col_d> A col_fs> {
  empty?_f_: (\ <A col_d> *D -> <bool> {
    D = *Es fo_col_d$, Es list.empty?
  } value$)
  size_f: \ <A col_d> *D -> <int> {
    D = *Es fo_col_d$, Es list.length
  }
  take_f: \ <A col_d> *D
      -> <<A <A col_d> tuple> maybe> {
    D = *Es fo_col_d$, Es case {
    ; [ *E ; *Es' ] -> (| E, Es' fo_col_d$ |) value$
    ; ** -> none$
    }
  }
  col_fs$
} ;;


### feature implementation of common-behavior object

eval <*A! fxralist> *FxRalist as_a'ralist -> <<A fxralist> A ralist_fo> {
  d: FxRalist fs: fxralist_fo_fs ralist_fo$
} ;;

eval fxralist_fo_fs -> <<*A! fxralist> A ralist_fs> {
  empty?_f: ^fx_empty?
  length_f: ^fx_length
  elem_f: ^fx_elem
  first_f_: (^fx_first value$)
  last_f_: (^fx_last value$)
  tail_f_: (^fx_tail value$)
  insert_at_f: ^fx_insert_at
  append_f_: (^fx_append value$)
  remove_at_f: ^fx_remove_at
  replace_at_f_: (^fx_replace_at value$)
  take_f_: (^fx_take value$)
  drop_f_: (^fx_drop value$)
  clear_f: ^fx_clear
  ralist_fs$
} ;;


### subroutines

eval <*D *A ralist_fs> *Fs ralist_fs_first_f | first_f @public -> <D <A maybe> fun> {
  Fs first_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *LD -> <A maybe> {
      LD 0 &(Fs elem_f)
    }
  }
} ;;

eval <*D *A ralist_fs> *Fs ralist_fs_last_f | last_f @public -> <D <A maybe> fun> {
  Fs last_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *LD -> <A maybe> {
      LD (LD &(Fs length_f) >> dec) &(Fs elem_f)
    }
  }
} ;;

eval <*D *A ralist_fs> *Fs ralist_fs_tail_f | tail_f @public -> <D <D maybe> fun> {
  Fs tail_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *LD -> <D maybe> {
      LD &(Fs empty?_f) >> case {
      ; true$ -> none$
      ; ** -> (LD 0 &(Fs delete_at_f)) value$
      }
    }
  }
} ;;

eval <*D *A ralist_fs> *Fs ralist_fs_append_f | append_f @public -> <D A D fun> {
  Fs append_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *LD <A> *X -> <D> {
      LD (LD &(Fs length_f)) X &(Fs insert_at_f)
    }
  }
} ;;

eval <*D *A ralist_fs> *Fs ralist_fs_delete_at_f | delete_at_f @public -> <D int D fun> {
  \ <D> *LD <int> *Index -> <D> {
    LD Index &(Fs remove_at_f) >> tuple.pair_first
  }
} ;;

eval <*D *A ralist_fs> *Fs ralist_fs_replace_at_f | replace_at_f @public -> <D int A <D <A maybe> tuple> fun> {
  Fs replace_at_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *LD <int> *Index <A> *X -> <D <A maybe> tuple> {
      LD Index &(Fs remove_at_f) >> case {
      ; (| *LD', *Removed value$ |) -> (| LD' Index X &(Fs insert_at_f), Removed value$ |)
      ; ** -> (| LD, none$ |)
      }
    }
  }
} ;;

eval <*D *A ralist_fs> *Fs ralist_fs_update_at_f | update_at_f @public -> <D int A D fun> {
  \ <D> *LD <int> *Index <A> *Elem -> <D> {
    LD Index Elem &(Fs replace_at_f) >> tuple.pair_first
  }
} ;;

eval <*D *A ralist_fs> *Fs ralist_fs_take_f | take_f @public -> <<D> int <D> fun> {
  Fs take_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *LD <int> *Count -> <D> {
      if {
      ; Count ge0? ->
      ; otherwise -> bad_arg$ "Negative count." new_exception >> throw
      },
      Fs empty?_f = *Empty?_f,
      Fs first_f = *First_f,
      Fs tail_f = *Tail_f,
      Fs append_f = *Append_f,
      Count LD (LD &(Fs clear_f))
          &\ <int> *CC <D> *LD_from <D> *LD_to -> <D> {
        (| LD_from &Empty?_f, CC |) case {
        ; (| true$, ** |) -> LD_to
        ; (| **, 0 |) -> LD_to
        ; ** -> (CC dec) (LD_from &Tail_f >> value) (LD_to (LD_from &First_f >> value) &Append_f) &&
        }
      }
    }
  }
} ;;

eval <*D *A ralist_fs> *Fs ralist_fs_drop_f | drop_f @public -> <D int D fun> {
  Fs take_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *LD <int> *Count -> <D> {
      if {
      ; Count ge0? ->
      ; otherwise -> bad_arg$ "Negative count." new_exception >> throw
      },
      Fs empty?_f = *Empty?_f,
      Fs tail_f = *Tail_f,
      Count LD &\ <int> *CC <D> *DD -> <D> {
        (| DD &Empty?_f, CC |) case {
        ; (| true$, ** |) -> DD
        ; (| **, 0 |) -> DD
        ; ** -> (CC dec) (DD &Tail_f >> value) &&
        }
      }
    }
  }
} ;;

eval <*D> *LD <D *A ralist_fs> *Fs _empty? -> <bool> {
  LD &(Fs empty?_f)
} ;;

eval <*D> *LD <D *A ralist_fs> *Fs _length -> <int> {
  LD &(Fs length_f)
} ;;

eval <*D> *LD <D *A ralist_fs> *Fs <int> *Index _elem -> <A maybe> {
  LD Index &(Fs elem_f)
} ;;

eval <*D> *LD <D *A ralist_fs> *Fs _first -> <A maybe> {
  LD &(Fs first_f)
} ;;

eval <*D> *LD <D *A ralist_fs> *Fs _last -> <A maybe> {
  LD &(Fs last_f)
} ;;

eval <*D> *LD <D *A ralist_fs> *Fs _tail -> <D maybe> {
  LD &(Fs tail_f)
} ;;

eval <*D> *LD <D *A ralist_fs> *Fs <int> *Index <A> *Elem _insert_at -> <D> {
  LD Index Elem &(Fs insert_at_f)
} ;;

eval <*D> *LD <D *A ralist_fs> *Fs <A> *Elem _append -> <D> {
  LD Elem &(Fs append_f)
} ;;

eval <*D> *LD <D *A ralist_fs> *Fs <int> *Index _remove_at -> <D <A maybe> tuple> {
  LD Index &(Fs remove_at_f)
} ;;

eval <*D> *LD <D *A ralist_fs> *Fs <int> *Index _delete_at -> <D> {
  LD Index &(Fs delete_at_f)
} ;;

eval <*D> *LD <D *A ralist_fs> *Fs <int> *Index <A> *Elem _replace_at -> <D <A maybe> tuple> {
  LD Index Elem &(Fs replace_at_f)
} ;;

eval <*D> *LD <D *A ralist_fs> *Fs <int> *Index <A> *Elem _update_at -> <D> {
  LD Index Elem &(Fs update_at_f)
} ;;

eval <*D> *LD <D *A ralist_fs> *Fs <int> *Count _take -> <D> {
  LD Count &(Fs take_f)
} ;;

eval <*D> *LD <D *A ralist_fs> *Fs <int> *Count _drop -> <D> {
  LD Count &(Fs drop_f)
} ;;

eval <*D> *LD <D *A ralist_fs> *Fs _clear -> <D> {
  LD &(Fs clear_f)
} ;;
