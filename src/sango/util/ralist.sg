###########################################################################
# MIT License                                                             #
# Copyright (c) 2021 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.ralist" ;;

import "sango.list" -> list ;;
import "sango.tuple" -> tuple ;;
import "sango.util.iter" -> iter ;;
import "sango.util.ralist.feature" -> feat ;;

### function set

data <*D *A ralist_fs> @public :=
  empty?_f: <D bool fun>
  length_f: <D int fun>
  elem_f: <D int <A maybe> fun>
  first_f_: <<D <A maybe> fun> maybe>
  last_f_: <<D <A maybe> fun> maybe>
  tail_f_: <<D <D maybe> fun> maybe>
  insert_at_f: <D int A D fun>
  append_f_: <<D A D fun> maybe>
  remove_at_f: <D int <D <A maybe> tuple> fun>
  replace_at_f_: <<D int A <D <A maybe> tuple> fun> maybe>
  take_f_: <<D int D fun> maybe>
  drop_f_: <<D int D fun> maybe>
  clear_f: <D D fun>
  ralist_fs$ ;;

eval <*D *A ralist_fs> *Fs ralist_fs_first_f | first_f @public -> <D <A maybe> fun> {
  Fs first_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *LD -> <A maybe> {
      LD 0 &(Fs elem_f)
    }
  }
} ;;

eval <*D *A ralist_fs> *Fs ralist_fs_last_f | last_f @public -> <D <A maybe> fun> {
  Fs last_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *LD -> <A maybe> {
      LD (LD &(Fs length_f) >> dec) &(Fs elem_f)
    }
  }
} ;;

eval <*D *A ralist_fs> *Fs ralist_fs_tail_f | tail_f @public -> <D <D maybe> fun> {
  Fs tail_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *LD -> <D maybe> {
      LD &(Fs empty?_f) >> case {
      ; true$ -> none$
      ; ** -> (LD 0 &(Fs delete_at_f)) value$
      }
    }
  }
} ;;

eval <*D *A ralist_fs> *Fs ralist_fs_append_f | append_f @public -> <D A D fun> {
  Fs append_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *LD <A> *X -> <D> {
      LD (LD &(Fs length_f)) X &(Fs insert_at_f)
    }
  }
} ;;

eval <*D *A ralist_fs> *Fs ralist_fs_delete_at_f | delete_at_f @public -> <D int D fun> {
  \ <D> *LD <int> *Index -> <D> {
    LD Index &(Fs remove_at_f) >> tuple.pair_first
  }
} ;;

eval <*D *A ralist_fs> *Fs ralist_fs_replace_at_f | replace_at_f @public -> <D int A <D <A maybe> tuple> fun> {
  Fs replace_at_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *LD <int> *Index <A> *X -> <D <A maybe> tuple> {
      LD Index &(Fs remove_at_f) >> case {
      ; (| *LD', *Removed value$ |) -> (| LD' Index X &(Fs insert_at_f), Removed value$ |)
      ; ** -> (| LD, none$ |)
      }
    }
  }
} ;;

eval <*D *A ralist_fs> *Fs ralist_fs_update_at_f | update_at_f @public -> <D int A D fun> {
  \ <D> *LD <int> *Index <A> *Elem -> <D> {
    LD Index Elem &(Fs replace_at_f) >> tuple.pair_first
  }
} ;;

eval <*D *A ralist_fs> *Fs ralist_fs_take_f | take_f @public -> <<D> int <D> fun> {
  Fs take_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *LD <int> *Count -> <D> {
      if {
      ; Count ge0? ->
      ; otherwise -> bad_arg$ "Negative count." new_exception >> throw
      },
      Fs empty?_f = *Empty?_f,
      Fs first_f = *First_f,
      Fs tail_f = *Tail_f,
      Fs append_f = *Append_f,
      Count LD (LD &(Fs clear_f))
          &\ <int> *CC <D> *LD_from <D> *LD_to -> <D> {
        (| LD_from &Empty?_f, CC |) case {
        ; (| true$, ** |) -> LD_to
        ; (| **, 0 |) -> LD_to
        ; ** -> (CC dec) (LD_from &Tail_f >> value) (LD_to (LD_from &First_f >> value) &Append_f) &&
        }
      }
    }
  }
} ;;

eval <*D *A ralist_fs> *Fs ralist_fs_drop_f | drop_f @public -> <D int D fun> {
  Fs take_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *LD <int> *Count -> <D> {
      if {
      ; Count ge0? ->
      ; otherwise -> bad_arg$ "Negative count." new_exception >> throw
      },
      Fs empty?_f = *Empty?_f,
      Fs tail_f = *Tail_f,
      Count LD &\ <int> *CC <D> *DD -> <D> {
        (| DD &Empty?_f, CC |) case {
        ; (| true$, ** |) -> DD
        ; (| **, 0 |) -> DD
        ; ** -> (CC dec) (DD &Tail_f >> value) &&
        }
      }
    }
  }
} ;;

eval <*D *A ralist_fs> *Fs ralist_fs_to_col_fs | to_col_fs @public -> <D A col_fs> {
  Fs = empty?_f: *Empty_f length_f: *Length_f *** ralist_fs$,
  empty?_f_: (Empty_f value$)
  size_f: Length_f
  iter_f: \ <D> *Z -> <A iter> { Z Fs do_iter }
  col_fs$
} ;;


### combined object

data <*A ralist> @opaque :=
  empty?_f: <bool fun>
  length_f: <int fun>
  elem_f: <int <A maybe> fun>
  first_f: <<A maybe> fun>
  last_f: <<A maybe> fun>
  tail_f: <<<A ralist> maybe> fun>
  insert_at_f: <int A <A ralist> fun>
  append_f: <A <A ralist> fun>
  remove_at_f: <int <<A ralist> <A maybe> tuple> fun>
  replace_at_f: <int A <<A ralist> <A maybe> tuple> fun>
  take_f: <int <A ralist> fun>
  drop_f: <int <A ralist> fun>
  clear_f: <<A ralist> fun>
  ralist$
++ a'ralist_impl -> [ A feat.a'ralist ] ;;

eval <*D> *Z <D *A ralist_fs> *Fs combine @public -> <A ralist> {
  empty?_f:
    \\ <bool> { Z Fs do_empty? }
  length_f:
    \\ <int> { Z Fs do_length }
  elem_f:
    \ <int> *I -> <A maybe> { Z Fs I do_elem }
  first_f:
    \\ <A maybe> { Z Fs do_first }
  last_f:
    \\ <A maybe> { Z Fs do_last }
  tail_f:
    \\ <<A ralist> maybe> {
      Z Fs do_tail >> case {
      ; *Z' value$ -> (Z' Fs combine) value$
      ; ** -> none$
      }
    }
  insert_at_f:
    \ <int> *I <A> *X -> <A ralist> {
      Z Fs I X do_insert_at = *Z',
      Z' Fs combine
    }
  append_f:
    \ <A> *X -> <A ralist> {
      Z Fs X do_append = *Z',
      Z' Fs combine
    }
  remove_at_f:
    \ <int> *I -> <<A ralist> <A maybe> tuple> {
      Z Fs I do_remove_at = (| *Z', *Removed_ |),
      (| Z' Fs combine, Removed_ |)
    }
  replace_at_f:
    \ <int> *I <A> *X -> <<A ralist> <A maybe> tuple> {
      Z Fs I X do_replace_at = (| *Z', *Replaced_ |),
      (| Z' Fs combine, Replaced_ |)
    }
  take_f:
    \ <int> *C -> <A ralist> {
      Z Fs C do_take = *Z',
      Z' Fs combine
    }
  drop_f:
    \ <int> *C -> <A ralist> {
      Z Fs C do_drop = *Z',
      Z' Fs combine
    }
  clear_f:
    \\ <A ralist>  {
      Z Fs do_clear = *Z',
      Z' Fs combine
    }
  ralist$
} ;;

eval a'ralist_impl -> <<*A ralist> A ralist_fs> {
  empty?_f: ^empty?
  length_f: ^length
  elem_f: ^elem
  first_f_: (^first value$)
  last_f_: (^last value$)
  tail_f_: (^tail value$)
  insert_at_f: ^insert_at
  append_f_: (^append value$)
  remove_at_f: ^remove_at
  replace_at_f_: (^replace_at value$)
  take_f_: (^take value$)
  drop_f_: (^drop value$)
  clear_f: ^clear
  ralist_fs$
} ;;

eval <*A ralist> *Ralist empty? @public -> <bool> {
  &(Ralist empty?_f)
} ;;

eval <*A ralist> *Ralist non_empty? @public -> <bool> {
  Ralist empty? >> not
} ;;

eval <*A ralist> *Ralist length @public -> <int> {
  &(Ralist length_f)
} ;;

eval <*A ralist> *Ralist <int> *Index elem @public -> <A maybe> {
  Index &(Ralist elem_f)
} ;;

eval <*A ralist> *Ralist first | head @public -> <A maybe> {
  &(Ralist first_f)
} ;;

eval <*A ralist> *Ralist last @public -> <A maybe> {
  &(Ralist last_f)
} ;;

eval <*A ralist> *Ralist tail @public -> <<A ralist> maybe> {
  &(Ralist tail_f)
} ;;

eval <*A ralist> *Ralist <int> *Index <A> *Elem insert_at @public -> <A ralist> {
  Index Elem &(Ralist insert_at_f)
} ;;

eval <*A ralist> *Ralist <A> *Elem append @public -> <A ralist> {
  Elem &(Ralist append_f)
} ;;

eval <*A ralist> *Ralist <int> *Index remove_at @public -> <<A ralist> <A maybe> tuple> {
  Index &(Ralist remove_at_f)
} ;;

eval <*A ralist> *Ralist <int> *Index delete_at @public -> <A ralist> {
  Index &(Ralist remove_at_f) >> tuple.pair_first
} ;;

eval <*A ralist> *Ralist <int> *Index <A> *Elem replace_at @public -> <<A ralist> <A maybe> tuple> {
  Index Elem &(Ralist replace_at_f)
} ;;

eval <*A ralist> *Ralist <int> *Index <A> *Elem update_at @public -> <A ralist> {
  Index Elem &(Ralist replace_at_f) >> tuple.pair_first
} ;;

eval <*A ralist> *Ralist <int> *Count take @public -> <A ralist> {
  Count &(Ralist take_f)
} ;;

eval <*A ralist> *Ralist <int> *Count drop @public -> <A ralist> {
  Count &(Ralist drop_f)
} ;;

eval <*A ralist> *Ralist clear @public -> <A ralist> {
  &(Ralist clear_f)
} ;;

eval <*A ralist> *Ralist iter @public -> <A iter> {
  \\ <A iter_res> { Ralist iter_next } iter$
} ;;

eval <*A ralist> *Z iter_next -> <A iter_res> {
  Z first >> case {
  ; *E value$ ->
    (| E, \\ <A iter_res> { (Z 1 drop) iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;

eval <*A ralist> *Ralist <A list> *Elems append_list @public -> <A ralist> {
  Ralist (Elems list.iter) append_iter
} ;;

eval <*A ralist> *Ralist <A iter> *Iter append_iter @public -> <A ralist> {
  Ralist
  Iter
  \ <A ralist> *Y <A> *E -> <A ralist> { Y E append }
  iter.fold
} ;;


### subroutines

eval <*D> *Z <D *A ralist_fs> *Fs do_empty? @public -> <bool> {
  Z &(Fs empty?_f)
} ;;

eval <*D> *Z <D *A ralist_fs> *Fs do_length @public -> <int> {
  Z &(Fs length_f)
} ;;

eval <*D> *Z <D *A ralist_fs> *Fs <int> *Index do_elem @public -> <A maybe> {
  Z Index &(Fs elem_f)
} ;;

eval <*D> *Z <D *A ralist_fs> *Fs do_first @public -> <A maybe> {
  Z &(Fs first_f)
} ;;

eval <*D> *Z <D *A ralist_fs> *Fs do_last @public -> <A maybe> {
  Z &(Fs last_f)
} ;;

eval <*D> *Z <D *A ralist_fs> *Fs do_tail @public -> <D maybe> {
  Z &(Fs tail_f)
} ;;

eval <*D> *Z <D *A ralist_fs> *Fs <int> *Index <A> *Elem do_insert_at @public -> <D> {
  Z Index Elem &(Fs insert_at_f)
} ;;

eval <*D> *Z <D *A ralist_fs> *Fs <A> *Elem do_append @public -> <D> {
  Z Elem &(Fs append_f)
} ;;

eval <*D> *Z <D *A ralist_fs> *Fs <int> *Index do_remove_at @public -> <D <A maybe> tuple> {
  Z Index &(Fs remove_at_f)
} ;;

eval <*D> *Z <D *A ralist_fs> *Fs <int> *Index do_delete_at @public -> <D> {
  Z Index &(Fs delete_at_f)
} ;;

eval <*D> *Z <D *A ralist_fs> *Fs <int> *Index <A> *Elem do_replace_at @public -> <D <A maybe> tuple> {
  Z Index Elem &(Fs replace_at_f)
} ;;

eval <*D> *Z <D *A ralist_fs> *Fs <int> *Index <A> *Elem do_update_at @public -> <D> {
  Z Index Elem &(Fs update_at_f)
} ;;

eval <*D> *Z <D *A ralist_fs> *Fs <int> *Count do_take @public -> <D> {
  Z Count &(Fs take_f)
} ;;

eval <*D> *Z <D *A ralist_fs> *Fs <int> *Count do_drop @public -> <D> {
  Z Count &(Fs drop_f)
} ;;

eval <*D> *Z <D *A ralist_fs> *Fs do_clear @public -> <D> {
  Z &(Fs clear_f)
} ;;

eval <*D> *Z <D *A ralist_fs> *Fs <A list> *Elems do_append_list | append_list @public -> <D> {
  Z Fs (Elems list.iter) do_append_iter
} ;;

eval <*D> *Z <D *A ralist_fs> *Fs <A iter> *Iter do_append_iter | append_iter @public -> <D> {
  Z
  Iter
  \ <D> *Y <A> *E -> <D> { Y Fs E do_append }
  iter.fold
} ;;

eval <*D> *Z <D *A ralist_fs> *Fs do_iter | iter @public -> <A iter> {
  \\ <A iter_res> { Z Fs do_iter_next } iter$
} ;;

eval <*D> *Z <D *A ralist_fs> *Fs do_iter_next -> <A iter_res> {
  if {
  ; Z Fs do_empty? -> none$
  ; otherwise ->
    (| Z Fs do_first >> value, \\ <A iter_res> { (Z Fs do_tail >> value) Fs do_iter_next } iter$ |) value$
  }
} ;;
