###########################################################################
# MIT License                                                             #
# Copyright (c) 2018 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.set" ;;

import "sango.list" -> list ;;
import "sango.util.iter" -> iter ;;

### function set

data <*D *A set_fs> @public :=
  empty?_f: <D bool fun>
  size_f: <D int fun>
  get_f: <D A <A maybe> fun>
  contain?_f_: <<D A bool fun> maybe>
  put_f: <D A <D <A maybe> tuple> fun>
  put_new_f_: <<D A <D bool tuple> fun> maybe>
  add_f_: <<D A D fun>  maybe>
  remove_f: <D A <D <A maybe> tuple> fun>
  delete_f_: <<D A D fun> maybe>
  take_f: <D <<A D tuple> maybe> fun>
  clear_f: <D D fun>
  set_fs$ ;;

eval <*D *A set_fs> *Fs set_fs_contain?_f | contain?_f @public -> <D A bool fun> {
  Fs contain?_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *Z <A> *Elem -> <bool> {
      Z Elem &(Fs get_f) >> something? 
    }
  }
} ;;

eval <*D *A set_fs> *Fs set_fs_put_new_f | put_new_f @public -> <D A <D bool tuple> fun> {
  Fs put_new_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *Z <A> *Elem -> <D bool tuple> {
      Z Elem &(Fs contain?_f) >> case {
      ; true$ -> (| Z, false$ |)
      ; ** -> (| Z Elem &(Fs add_f), true$ |)
      }
    }
  }
} ;;

eval <*D *A set_fs> *Fs set_fs_add_f | add_f @public -> <D A D fun> {
  Fs add_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *Z <A> *Elem -> <D> {
      Z Elem &(Fs put_f) = (| *Z', ** |),
      Z'
    }
  }
} ;;

eval <*D *A set_fs> *Fs set_fs_delete_f | delete_f @public -> <D A D fun> {
  Fs delete_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *Z <A> *Elem -> <D> {
      Z Elem &(Fs remove_f) = (| *Z', ** |),
      Z'
    }
  }
} ;;

eval <*D *A set_fs> *Fs set_fs_to_col_fs | to_col_fs @public -> <D A col_fs> {
  Fs = empty?_f: *Empty_f size_f: *Size_f *** set_fs$,
  empty?_f_: (Empty_f value$)
  size_f: Size_f
  iter_f: \ <D> *Z -> <A iter> { Z Fs do_iter }
  col_fs$
} ;;


### generic

data <*A set> @opaque :=
  empty?_f: <bool fun>
  size_f: <int fun>
  get_f: <A <A maybe> fun>
  contain?_f: <A bool fun>
  put_f: <A <<A set> <A maybe> tuple> fun>
  put_new_f: <A <<A set> bool tuple> fun>
  add_f: <A <A set> fun>
  remove_f: <A <<A set> <A maybe> tuple> fun>
  delete_f: <A <A set> fun>
  take_f: <<<A <A set> tuple> maybe> fun>
  clear_f: <<A set> fun>
  set$
++ a'set_impl -> [ A a'set ] ;;

eval <*D> *Z <D *A set_fs> *Fs to_generic_set @public -> <A set> {
  empty?_f:
    \\ <bool> { Z Fs do_empty? }
  size_f:
    \\ <int> { Z Fs do_size }
  get_f:
    \ <A> *X -> <A maybe> { Z Fs X do_get }
  contain?_f:
    \ <A> *X -> <bool> { Z Fs X do_contain? }
  put_f:
    \ <A> *X -> <<A set> <A maybe> tuple> {
      Z Fs X do_put = (| *Z', *Replaced_ |),
      (| Z' Fs to_generic_set, Replaced_ |)
    }
  put_new_f:
    \ <A> *X -> <<A set> bool tuple> {
      Z Fs X do_put_new = (| *Z', *Succeeded? |),
      (| Z' Fs to_generic_set, Succeeded? |)
    }
  add_f:
    \ <A> *X -> <A set> {
      Z Fs X do_add = *Z',
      Z' Fs to_generic_set
    }
  remove_f:
    \ <A> *X -> <<A set> <A maybe> tuple> {
      Z Fs X do_remove = (| *Z', *Removed_ |),
      (| Z' Fs to_generic_set, Removed_ |)
    }
  delete_f:
    \ <A> *X -> <A set> {
      Z Fs X do_delete = *Z',
      Z' Fs to_generic_set
    }
  take_f:
    \\ <<A <A set> tuple> maybe> {
      Z Fs do_take >> case {
      ; (| *E, *Z' |) value$ -> (| E, Z' Fs to_generic_set |) value$
      ; ** -> none$
      }
    }
  clear_f:
    \\ <A set> {
      Z Fs do_clear = *Z', 
      Z' Fs to_generic_set
    }
  set$
} ;;

eval a'set_impl -> <<*A set> A set_fs> {
  empty?_f: ^g_empty?
  size_f: ^g_size
  get_f: ^g_get
  contain?_f_: (^g_contain? value$)
  put_f: ^g_put
  put_new_f_: (^g_put_new value$)
  add_f_: (^g_add value$)
  remove_f: ^g_remove
  delete_f_: (^g_delete value$)
  take_f: ^g_take
  clear_f: ^g_clear
  set_fs$
} ;;

eval <*A set> *Set g_empty? | empty? @public -> <bool> {
  &(Set empty?_f)
} ;;

eval <*A set> *Set g_size | size @public -> <int> {
  &(Set size_f)
} ;;

eval <*A set> *Set <A> *Elem g_get | get @public -> <A maybe> {
  Elem &(Set get_f)
} ;;

eval <*A set> *Set <A> *Elem g_contain? | contain? @public -> <bool> {
  Elem &(Set contain?_f)
} ;;

eval <*A set> *Set <A> *Elem g_put | put @public -> <<A set> <A maybe> tuple> {
  Elem &(Set put_f)
} ;;

eval <*A set> *Set <A> *Elem g_put_new | put_new @public -> <<A set> bool tuple> {
  Elem &(Set put_new_f)
} ;;

eval <*A set> *Set <A> *Elem g_add | add @public -> <A set> {
  Elem &(Set add_f)
} ;;

eval <*A set> *Set <A> *Elem g_remove | remove @public -> <<A set> <A maybe> tuple> {
  Elem &(Set remove_f)
} ;;

eval <*A set> *Set <A> *Elem g_delete | delete @public -> <A set> {
  Elem &(Set delete_f)
} ;;

eval <*A set> *Set g_take | take @public -> <<A <A set> tuple> maybe> {
  &(Set take_f)
} ;;

eval <*A set> *Set g_clear | clear @public -> <A set> {
  &(Set clear_f)
} ;;

eval <*A set> *Set g_iter | iter @public -> <A iter> {
  \\ <A iter_res> { Set g_iter_next } iter$
} ;;

eval <*A set> *Z g_iter_next -> <A iter_res> {
  Z g_take >> case {
  ; (| *E, *Z' |) value$ ->
    (| E, \\ <A iter_res> { Z' g_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;

eval <*A set> *Set <A list> *Elems g_contain_just_list? | contain_just_list? | contain_just? @public -> <bool> {
  Set (Elems list.iter) g_contain_just_iter?
} ;;

eval <*A set> *Set <A iter> *Iter g_contain_just_iter? | contain_just_iter? | contain_just? @public -> <bool> {
  Iter Set &\ <A iter> *I <A set> *Y -> <bool> {
    I next >> case {
    ; (| *E, *I' |) value$ ->
      Y E g_remove >> case {
      ; (| *Y', ** value$ |) -> I' Y' &&
      ; ** -> false$
      }
    ; none$ -> Y g_empty?
    }
  }
} ;;

eval <*A set> *Set <A list> *Elems g_add_list | add_list @public -> <A set> {
  Set (Elems list.iter) g_add_iter
} ;;

eval <*A set> *Set <A iter> *Iter g_add_iter | add_iter @public -> <A set> {
  Set
  Iter
  \ <A set> *Y <A> *E -> <A set> { Y E g_add }
  iter.fold
} ;;

eval <*A set> *Set <A list> *Elems g_delete_list | delete_list @public -> <A set> {
  Set (Elems list.iter) g_delete_iter
} ;;

eval <*A set> *Set <A iter> *Iter g_delete_iter | delete_iter @public -> <A set> {
  Set
  Iter
  \ <A set> *Y <A> *E -> <A set> { Y E g_delete }
  iter.fold
} ;;

eval <*A set> *Set <A bool fun> *Filter g_filter | filter @public -> <A set> {
  (Set g_clear) ((Set g_iter) Filter iter.add_filter) g_add_iter
} ;;

eval <*A set> *Set0 <A set> *Set1 g_intersection | intersection @public -> <A set> {
  Set0 
  \ <A> *X -> <bool> { Set1 X g_contain? }
  g_filter
} ;;

eval <*A set> *Set0 <A set> *Set1 g_difference | difference @public -> <A set> {
  Set0
  \ <A> *X -> <bool> { Set1 X g_contain? >> not }
  g_filter
} ;;


### faeture

feature <*T> [ *A a'set ] @public -> <T A set_fs> ;;

eval <*T[ *A a'set ]> *FSet f_to_generic_set | to_generic_set @public -> <A set> {
  FSet (FSet _feature_a'set) to_generic_set
} ;;

eval <*T[ *A a'set ]> *FSet f_empty? | empty? @public -> <bool> {
  FSet _feature_a'set = *Set_fs,
  FSet Set_fs do_empty?
} ;;

eval <*T[ *A a'set ]> *FSet f_size | size @public -> <int> {
  FSet _feature_a'set = *Set_fs,
  FSet Set_fs do_size
} ;;

eval <*T[ *A a'set ]> *FSet <A> *Elem f_get | get @public -> <A maybe> {
  FSet _feature_a'set = *Set_fs,
  FSet Set_fs Elem do_get
} ;;

eval <*T[ *A a'set ]> *FSet <A> *Elem f_contain? | contain? @public -> <bool> {
  FSet _feature_a'set = *Set_fs,
  FSet Set_fs Elem do_contain?
} ;;

eval <*T[ *A a'set ]> *FSet <A> *Elem f_put | put @public -> <T <A maybe> tuple> {
  FSet _feature_a'set = *Set_fs,
  FSet Set_fs Elem do_put
} ;;

eval <*T[ *A a'set ]> *FSet <A> *Elem f_put_new | put_new @public -> <T bool tuple> {
  FSet _feature_a'set = *Set_fs,
  FSet Set_fs Elem do_put_new
} ;;

eval <*T[ *A a'set ]> *FSet <A> *Elem f_add | add @public -> <T> {
  FSet _feature_a'set = *Set_fs,
  FSet Set_fs Elem do_add
} ;;

eval <*T[ *A a'set ]> *FSet <A> *Elem f_remove | remove @public -> <T <A maybe> tuple> {
  FSet _feature_a'set = *Set_fs,
  FSet Set_fs Elem do_remove
} ;;

eval <*T[ *A a'set ]> *FSet <A> *Elem f_delete | delete @public -> <T> {
  FSet _feature_a'set = *Set_fs,
  FSet Set_fs Elem do_delete
} ;;

eval <*T[ *A a'set ]> *FSet f_take | take @public -> <<A T tuple> maybe> {
  FSet _feature_a'set = *Set_fs,
  FSet Set_fs do_take
} ;;

eval <*T[ *A a'set ]> *FSet f_clear | clear @public -> <T> {
  FSet _feature_a'set = *Set_fs,
  FSet Set_fs do_clear
} ;;

eval <*T[ *A a'set ]> *FSet <A list> *Elems f_contain_just_list? | contain_just_list? | contain_just? @public -> <bool> {
  FSet (Elems list.iter) f_contain_just_iter?
} ;;

eval <*T[ *A a'set ]> *FSet <A iter> *Iter f_contain_just_iter? | contain_just_iter? | contain_just? @public -> <bool> {
  FSet _feature_a'set = *Set_fs,
  FSet Set_fs Iter do_contain_just_iter?
} ;;

eval <*T[ *A a'set ]> *FSet <A list> *Elems f_add_list | add_list @public -> <T> {
  FSet (Elems list.iter) f_add_iter
} ;;

eval <*T[ *A a'set ]> *FSet <A iter> *Iter f_add_iter | add_iter @public -> <T> {
  FSet _feature_a'set = *Set_fs,
  FSet Set_fs Iter do_add_iter
} ;;

eval <*T[ *A a'set ]> *FSet <A list> *Elems f_delete_list | delete_list @public -> <T> {
  FSet (Elems list.iter) f_delete_iter
} ;;

eval <*T[ *A a'set ]> *FSet <A iter> *Iter f_delete_iter | delete_iter @public -> <T> {
  FSet _feature_a'set = *Set_fs,
  FSet Set_fs Iter do_delete_iter
} ;;

eval <*T[ *A a'set ]> *FSet f_iter | iter @public -> <A iter> {
  FSet _feature_a'set = *Set_fs,
  FSet Set_fs do_iter
} ;;


### incarnation

data <*T *A set_inc> @protected :=
  org: <T>
  fo: <T A set_fs>
  set_inc$
++ inc_a'col_impl -> [ A a'col ] ;;

eval <*T[ *A a'set ]> *FSet incarnate @public -> <T A set_inc> {
  org: FSet
  fo: (FSet _feature_a'set)
  set_inc$
} ;;

eval inc_a'col_impl -> <<*T *A set_inc> A col_fs> {
  empty?_f_:
    (\ <*TT *AA set_inc> *I -> <bool> {
       I = *ID *IFs set_inc$,
       ID IFs do_empty?
     } value$)
  size_f:
    \ <*TT *AA set_inc> *I -> <int> {
      I = *ID *IFs set_inc$,
      ID IFs do_size
    }
  iter_f:
    \ <*TT *AA set_inc> *I -> <AA iter> {
      I = *ID *IFs set_inc$,
      ID IFs do_iter
    }
  col_fs$
} ;;


### subroutines

eval <*D> *Z <D *A set_fs> *Fs do_empty? | empty? @public -> <bool> {
  Z &(Fs empty?_f)
} ;;

eval <*D> *Z <D *A set_fs> *Fs do_size | size @public -> <int> {
  Z &(Fs size_f)
} ;;

eval <*D> *Z <D *A set_fs> *Fs <A> *Elem do_get | get @public -> <A maybe> {
  Z Elem &(Fs get_f)
} ;;

eval <*D> *Z <D *A set_fs> *Fs <A> *Elem do_contain? | contain? @public -> <bool> {
  Z Elem &(Fs contain?_f)
} ;;

eval <*D> *Z <D *A set_fs> *Fs <A> *Elem do_put | put @public -> <D <A maybe> tuple> {
  Z Elem &(Fs put_f)
} ;;

eval <*D> *Z <D *A set_fs> *Fs <A> *Elem do_put_new | put_new @public -> <D bool tuple> {
  Z Elem &(Fs put_new_f)
} ;;

eval <*D> *Z <D *A set_fs> *Fs <A> *Elem do_add | add @public -> <D> {
  Z Elem &(Fs add_f)
} ;;

eval <*D> *Z <D *A set_fs> *Fs <A> *Elem do_remove | remove @public -> <D <A maybe> tuple> {
  Z Elem &(Fs remove_f)
} ;;

eval <*D> *Z <D *A set_fs> *Fs <A> *Elem do_delete | delete @public -> <D> {
  Z Elem &(Fs delete_f)
} ;;

eval <*D> *Z <D *A set_fs> *Fs do_take | take @public -> <<A D tuple> maybe> {
  Z &(Fs take_f)
} ;;

eval <*D> *Z <D *A set_fs> *Fs do_clear | clear @public -> <D> {
  Z &(Fs clear_f)
} ;;

eval <*D> *Z <D *A set_fs> *Fs <A list> *Elems do_contain_just_list? | contain_just_list? | contain_just? @public -> <bool> {
  Z Fs (Elems list.iter) do_contain_just_iter?
} ;;

eval <*D> *Z <D *A set_fs> *Fs <A iter> *Iter do_contain_just_iter? | contain_just_iter? | contain_just? @public -> <bool> {
  Iter Z &\ <A iter> *I <D> *Y -> <bool> {
    I next >> case {
    ; (| *E, *I' |) value$ ->
      Y Fs E do_remove >> case {
      ; (| *Y', ** value$ |) -> I' Y' &&
      ; ** -> false$
      }
    ; none$ -> Y Fs do_empty?
    }
  }
} ;;

eval <*D> *Z <D *A set_fs> *Fs <A list> *Elems do_add_list | add_list @public -> <D> {
  Z Fs (Elems list.iter) do_add_iter
} ;;

eval <*D> *Z <D *A set_fs> *Fs <A iter> *Iter do_add_iter | add_iter @public -> <D> {
  Z
  Iter
  \ <D> *Y <A> *E -> <D> { Y Fs E do_add }
  iter.fold
} ;;

eval <*D> *Z <D *A set_fs> *Fs <A list> *Elems do_delete_list | delete_list @public -> <D> {
  Z Fs (Elems list.iter) do_delete_iter
} ;;

eval <*D> *Z <D *A set_fs> *Fs <A iter> *Iter do_delete_iter | delete_iter @public -> <D> {
  Z
  Iter
  \ <D> *Y <A> *E -> <D> { Y Fs E do_delete }
  iter.fold
} ;;

eval <*D> *Z <D *A set_fs> *Fs do_iter | iter @public -> <A iter> {
  \\ <A iter_res> { Z Fs do_iter_next } iter$
} ;;

eval <*D> *Z <D *A set_fs> *Fs do_iter_next -> <A iter_res> {
  Z Fs do_take >> case {
  ; (| *E, *Z' |) value$ ->
    (| E, \\ <A iter_res> { Z' Fs do_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;

eval <*D> *Z <D *A set_fs> *Fs <A bool fun> *Filter do_filter | filter @public -> <D> {
  (Z Fs do_clear) Fs ((Z Fs do_iter) Filter iter.add_filter) do_add_iter
} ;;

eval <*D> *Z0 <D *A set_fs> *Fs <D> *Z1 do_intersection | intersection @public -> <D> {
  Z0 Fs
  \ <A> *X -> <bool> { Z1 Fs X do_contain? }
  do_filter
} ;;

eval <*D> *Z0 <D *A set_fs> *Fs <D> *Z1 do_difference | difference @public -> <D> {
  Z0 Fs
  \ <A> *X -> <bool> { Z1 Fs X do_contain? >> not }
  do_filter
} ;;
