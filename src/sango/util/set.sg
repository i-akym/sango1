###########################################################################
# MIT License                                                             #
# Copyright (c) 2018 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.set" ;;

import "sango.list" -> list ;;
import "sango.util.iter" -> iter ;;

### definition of common-behavior object

alias type <*A d> @public := <A _1+> ;;

data <*A set> @public :=
  d: <A d>
  fs: <<A d> A set_fs>
  set$
++ as_a'set -> [ A a'set ]
;;


### definition of function set

data <*D *A set_fs> @public :=
  empty?_f: <D bool fun>
  size_f: <D int fun>
  get_f: <D A <A maybe> fun>
  contain?_f_: <<D A bool fun> maybe>
  put_f: <D A <D <A maybe> tuple> fun>
  put_new_f_: <<D A <D bool tuple> fun> maybe>
  add_f_: <<D A D fun>  maybe>
  remove_f: <D A <D <A maybe> tuple> fun>
  delete_f_: <<D A D fun> maybe>
  take_f: <D <<A D tuple> maybe> fun>
  clear_f: <D D fun>
  set_fs$ ;;


### definition of feature

feature <*T!> [ *A a'set ] @public -> <T A set_fo> ;;

alias type <*A fd> @public := <A _1+> ;;
alias type <*T *A fr> @public := <<A fd> T fun> ;;
alias type <*T *A fx> @public := <<A fd> <T A fr> tuple> ;;

data <*T *A set_fo> @public :=
  fd: <A fd>
  fr: <T A fr>
  fs: <<T A fx> A set_fs>
  set_fo$ ;;


### implementation of common-behavior object

eval <*A set> *Set c_empty? | empty? @public -> <bool> {
  Set = d: *D fs: *Fs set$,
  D Fs _empty?
} ;;

eval <*A set> *Set c_size | size @public -> <int> {
  Set = d: *D fs: *Fs set$,
  D Fs _size
} ;;

eval <*A set> *Set <A> *Elem c_get | get @public -> <A maybe> {
  Set = d: *D fs: *Fs set$,
  D Fs Elem _get
} ;;

eval <*A set> *Set <A> *Elem c_contain? | contain? @public -> <bool> {
  Set = d: *D fs: *Fs set$,
  D Fs Elem _contain?
} ;;

eval <*A set> *Set <A> *Elem c_put | put @public -> <<A set> <A maybe> tuple> {
  Set = d: *D fs: *Fs set$,
  D Fs Elem _put = (| *D', *Replaced_ |),
  (| d: D' fs: Fs set$, Replaced_ |)
} ;;

eval <*A set> *Set <A> *Elem c_put_new | put_new @public -> <<A set> bool tuple> {
  Set = d: *D fs: *Fs set$,
  D Fs Elem _put_new = (| *D', *Succeeded? |),
  (| d: D' fs: Fs set$, Succeeded? |)
} ;;

eval <*A set> *Set <A> *Elem c_add | add @public -> <A set> {
  Set = d: *D fs: *Fs set$,
  D Fs Elem _add = *D',
  d: D' fs: Fs set$
} ;;

eval <*A set> *Set <A> *Elem c_remove | remove @public -> <<A set> <A maybe> tuple> {
  Set = d: *D fs: *Fs set$,
  D Fs Elem _remove = (| *D', *Removed_ |),
  (| d: D' fs: Fs set$, Removed_ |)
} ;;

eval <*A set> *Set <A> *Elem c_delete | delete @public -> <A set> {
  Set = d: *D fs: *Fs set$,
  D Fs Elem _delete = *D',
  d: D' fs: Fs set$
} ;;

eval <*A set> *Set c_take | take @public -> <<A <A set> tuple> maybe> {
  Set = d: *D fs: *Fs set$,
  D Fs _take >> case {
  ; (| *E, *D' |) value$ -> (| E, d: D' fs: Fs set$ |) value$
  ; ** -> none$
  }
} ;;

eval <*A set> *Set c_clear | clear @public -> <A set> {
  Set = d: *D fs: *Fs set$,
  D Fs _clear = *D',
  d: D' fs: Fs set$
} ;;

eval <*A set> *Set <A list> *Elems c_contain_just_list? | contain_just_list? | contain_just? @public -> <bool> {
  Set (Elems list.iter) c_contain_just_iter?
} ;;

eval <*A set> *Set <A iter> *Iter c_contain_just_iter? | contain_just_iter? | contain_just? @public -> <bool> {
  Iter Set &\ <A iter> *I <A set> *S -> <bool> {
    I next >> case {
    ; (| *E, *I' |) value$ ->
      S E c_remove >> case {
      ; (| *S', ** value$ |) -> I' S' &&
      ; ** -> false$
      }
    ; none$ -> S empty?
    }
  }
} ;;

eval <*A set> *Set <A list> *Elems c_add_list | add_list @public -> <A set> {
  Set (Elems list.iter) c_add_iter
} ;;

eval <*A set> *Set <A iter> *Iter c_add_iter | add_iter @public -> <A set> {
  Iter next >> case {
  ; (| *E, *Iter' |) value$ -> (Set E add) Iter' &&
  ; ** -> Set
  }
} ;;

eval <*A set> *Set <A list> *Elems c_delete_list | delete_list @public -> <A set> {
  Set (Elems list.iter) c_delete_iter
} ;;

eval <*A set> *Set <A iter> *Iter c_delete_iter | delete_iter @public -> <A set> {
  Iter next >> case {
  ; (| *E, *Iter' |) value$ -> (Set E delete) Iter' &&
  ; ** -> Set
  }
} ;;

eval <*A set> *Set c_iter | iter @public -> <A iter> {
  \\ <A iter_res> { Set c_iter_next } iter$
} ;;

eval <*A set> *Set c_iter_next -> <A iter_res> {
  Set c_take >> case {
  ; (| *E, *Set' |) value$ ->
    (| E, \\ <A iter_res> { Set' c_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;

eval <*A set> *Set <A bool fun> *Filter c_filter | filter @public -> <A set> {
  (Set c_clear) ((Set iter) Filter iter.add_filter) c_add_iter
} ;;

eval <*A set> *Set0 <A set> *Set1 c_intersection | intersection @public -> <A set> {
  Set0
    \ <A> *X -> <bool> { Set1 X c_contain? }
    filter
} ;;

eval <*A set> *Set0 <A set> *Set1 c_difference | difference @public -> <A set> {
  Set0
    \ <A> *X -> <bool> { Set1 X c_contain? >> not }
    filter
} ;;


### framework of faeture

eval <*T![ *A a'set ]> *FSet f_empty? | empty? @public -> <bool> {
  FSet _feature_a'set = *Set_fo,
  Set_fo fo_empty?
} ;;

eval <*T! *A set_fo> *Set_fo fo_empty? | empty? @public -> <bool> {
  Set_fo = fd: *D fr: *R fs: *Fs set_fo$,
  (| D, R |) Fs _empty?
} ;;

eval <*T![ *A a'set ]> *FSet f_size | size @public -> <int> {
  FSet _feature_a'set = *Set_fo,
  Set_fo fo_size
} ;;

eval <*T! *A set_fo> *Set_fo fo_size | size @public -> <int> {
  Set_fo = fd: *D fr: *R fs: *Fs set_fo$,
  (| D, R |) Fs _size
} ;;

eval <*T![ *A a'set ]> *FSet <A> *Elem f_get | get @public -> <A maybe> {
  FSet _feature_a'set = *Set_fo,
  Set_fo Elem fo_get
} ;;

eval <*T! *A set_fo> *Set_fo <A> *Elem fo_get | get @public -> <A maybe> {
  Set_fo = fd: *D fr: *R fs: *Fs set_fo$,
  (| D, R |) Fs Elem _get
} ;;

eval <*T![ *A a'set ]> *FSet <A> *Elem f_contain? | contain? @public -> <bool> {
  FSet _feature_a'set = *Set_fo,
  Set_fo Elem fo_contain?
} ;;

eval <*T! *A set_fo> *Set_fo <A> *Elem fo_contain? | contain? @public -> <bool> {
  Set_fo = fd: *D fr: *R fs: *Fs set_fo$,
  (| D, R |) Fs Elem _contain?
} ;;

eval <*T![ *A a'set ]> *FSet <A> *Elem f_put | put @public -> <T <A maybe> tuple> {
  FSet _feature_a'set = *Set_fo,
  Set_fo Elem fo_put = (| *Set_fo', *Replaced_ |),
  Set_fo' = fd: *D' fr: *R' fs: *Fs' set_fo$,
  (| D' &R', Replaced_ |)
} ;;

eval <*T! *A set_fo> *Set_fo <A> *Elem fo_put | put @public -> <<T A set_fo> <A maybe> tuple> {
  Set_fo = fd: *D fr: *R fs: *Fs set_fo$,
  (| D, R |) Fs Elem _put = (| (| *D', *R' |), *Replaced_ |),
  (| fd: D' fr: R' fs: Fs set_fo$, Replaced_ |)
} ;;

eval <*T![ *A a'set ]> *FSet <A> *Elem f_put_new | put_new @public -> <T bool tuple> {
  FSet _feature_a'set = *Set_fo,
  Set_fo Elem fo_put_new = (| *Set_fo', *Succeeded? |),
  Set_fo' = fd: *D' fr: *R' fs: *Fs' set_fo$,
  (| D' &R', Succeeded? |)
} ;;

eval <*T! *A set_fo> *Set_fo <A> *Elem fo_put_new | put_new @public -> <<T A set_fo> bool tuple> {
  Set_fo = fd: *D fr: *R fs: *Fs set_fo$,
  (| D, R |) Fs Elem _put_new = (| (| *D', *R' |), *Succeeded? |),
  (| fd: D' fr: R' fs: Fs set_fo$, Succeeded? |)
} ;;

eval <*T![ *A a'set ]> *FSet <A> *Elem f_add | add @public -> <T> {
  FSet _feature_a'set = *Set_fo,
  Set_fo Elem fo_add = *Set_fo',
  Set_fo' = fd: *D' fr: *R' fs: *Fs' set_fo$,
  D' &R'
} ;;

eval <*T! *A set_fo> *Set_fo <A> *Elem fo_add | add @public -> <T A set_fo> {
  Set_fo = fd: *D fr: *R fs: *Fs set_fo$,
  (| D, R |) Fs Elem _add = (| *D', *R' |),
  fd: D' fr: R' fs: Fs set_fo$
} ;;

eval <*T![ *A a'set ]> *FSet <A> *Elem f_remove | remove @public -> <T <A maybe> tuple> {
  FSet _feature_a'set = *Set_fo,
  Set_fo Elem fo_remove = (| *Set_fo', *Removed_ |),
  Set_fo' = fd: *D' fr: *R' fs: *Fs' set_fo$,
  (| D' &R', Removed_ |)
} ;;

eval <*T! *A set_fo> *Set_fo <A> *Elem fo_remove | remove @public -> <<T A set_fo> <A maybe> tuple> {
  Set_fo = fd: *D fr: *R fs: *Fs set_fo$,
  (| D, R |) Fs Elem _remove = (| (| *D', *R' |), *Removed_ |),
  (| fd: D' fr: R' fs: Fs set_fo$, Removed_ |)
} ;;

eval <*T![ *A a'set ]> *FSet <A> *Elem f_delete | delete @public -> <T> {
  FSet _feature_a'set = *Set_fo,
  Set_fo Elem fo_delete = *Set_fo',
  Set_fo' = fd: *D' fr: *R' fs: *Fs' set_fo$,
  D' &R'
} ;;

eval <*T! *A set_fo> *Set_fo <A> *Elem fo_delete | delete @public -> <T A set_fo> {
  Set_fo = fd: *D fr: *R fs: *Fs set_fo$,
  (| D, R |) Fs Elem _delete = (| *D', *R' |),
  fd: D' fr: R' fs: Fs set_fo$
} ;;

eval <*T![ *A a'set ]> *FSet f_take | take @public -> <<A T tuple> maybe> {
  FSet _feature_a'set = *Set_fo,
  Set_fo fo_take >> case {
  ; (| *Elem, fd: *D' fr: *R' fs: *Fs' set_fo$ |) value$ -> (| Elem, D' &R' |) value$
  ; ** -> none$
  }
} ;;

eval <*T! *A set_fo> *Set_fo fo_take | take @public -> <<A <T A set_fo> tuple> maybe> {
  Set_fo = fd: *D fr: *R fs: *Fs set_fo$,
  (| D, R |) Fs _take >> case {
  ; (| *Elem, (| *D', *R' |) |) value$ -> (| Elem, fd: D' fr: R' fs: Fs set_fo$ |) value$
  ; ** -> none$
  }
} ;;

eval <*T![ *A a'set ]> *FSet f_clear | clear @public -> <T> {
  FSet _feature_a'set = *Set_fo,
  Set_fo fo_clear = *Set_fo',
  Set_fo' = fd: *D' fr: *R' fs: *Fs' set_fo$,
  D' &R'
} ;;

eval <*T! *A set_fo> *Set_fo fo_clear | clear @public -> <T A set_fo> {
  Set_fo = fd: *D fr: *R fs: *Fs set_fo$,
  (| D, R |) Fs _clear = (| *D', *R' |),
  fd: D' fr: R' fs: Fs set_fo$
} ;;

eval <*T![ *A a'set ]> *FSet <A list> *Elems f_contain_just_list? | contain_just_list? | contain_just? @public -> <bool> {
  FSet (Elems list.iter) f_contain_just_iter?
} ;;

eval <*T! *A set_fo> *Set_fo <A list> *Elems fo_contain_just_list? | contain_just_list? | contain_list? @public -> <bool> {
  Set_fo (Elems list.iter) fo_contain_just_iter?
} ;;

eval <*T![ *A a'set ]> *FSet <A iter> *Iter f_contain_just_iter? | contain_just_iter? | contain_just? @public -> <bool> {
  FSet _feature_a'set = *Set_fo,
  Set_fo Iter fo_contain_just_iter?
} ;;

eval <*T! *A set_fo> *Set_fo <A iter> *Iter fo_contain_just_iter? | contain_just_iter? | contain_just? @public -> <bool> {
  Iter Set_fo &\ <A iter> *I <T A set_fo> *S -> <bool> {
    I next >> case {
    ; (| *E, *I' |) value$ ->
      S E fo_remove >> case {
      ; (| *S', ** value$ |) -> I' S' &&
      ; ** -> false$
      }
    ; none$ -> S fo_empty?
    }
  }
} ;;

eval <*T![ *A a'set ]> *FSet <A list> *Elems f_add_list | add_list @public -> <T> {
  FSet (Elems list.iter) f_add_iter
} ;;

eval <*T! *A set_fo> *Set_fo <A list> *Elems fo_add_list | add_list @public -> <T A set_fo> {
  Set_fo (Elems list.iter) fo_add_iter
} ;;

eval <*T![ *A a'set ]> *FSet <A iter> *Iter f_add_iter | add_iter @public -> <T> {
  FSet _feature_a'set = *Set_fo,
  Set_fo Iter fo_add_iter = *Set_fo',
  Set_fo' = fd: *D' fr: *R' fs: *Fs' set_fo$,
  D' &R'
} ;;

eval <*T! *A set_fo> *Set_fo <A iter> *Iter fo_add_iter | add_iter @public -> <T A set_fo> {
  Iter next >> case {
  ; (| *Elem, *Iter' |) value$ -> (Set_fo Elem fo_add) Iter' &&
  ; ** -> Set_fo
  }
} ;;

eval <*T![ *A a'set ]> *FSet <A list> *Elems f_delete_list | delete_list @public -> <T> {
  FSet (Elems list.iter) f_delete_iter
} ;;

eval <*T! *A set_fo> *Set_fo <A list> *Elems fo_delete_list | delete_list @public -> <T A set_fo> {
  Set_fo (Elems list.iter) fo_delete_iter
} ;;

eval <*T![ *A a'set ]> *FSet <A iter> *Iter f_delete_iter | delete_iter @public -> <T> {
  FSet _feature_a'set = *Set_fo,
  Set_fo Iter fo_delete_iter = *Set_fo',
  Set_fo' = fd: *D' fr: *R' fs: *Fs' set_fo$,
  D' &R'
} ;;

eval <*T! *A set_fo> *Set_fo <A iter> *Iter fo_delete_iter | delete_iter @public -> <T A set_fo> {
  Iter next >> case {
  ; (| *Elem, *Iter' |) value$ -> (Set_fo Elem fo_delete) Iter' &&
  ; ** -> Set_fo
  }
} ;;

eval <*T![ *A a'set ]> *FSet f_iter | iter @public -> <A iter> {
  \\ <A iter_res> { FSet f_iter_next } iter$
} ;;

eval <*T![ *A a'set ]> *FSet f_iter_next -> <A iter_res> {
  FSet f_take >> case {
  ; (| *Elem, *FSet' |) value$ ->
    (| Elem, \\ <A iter_res> { FSet' f_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;

eval <*T! *A set_fo> *Set_fo fo_iter | iter @public -> <A iter> {
  \\ <A iter_res> { Set_fo fo_iter_next } iter$
} ;;

eval <*T! *A set_fo> *Set_fo fo_iter_next -> <A iter_res> {
  Set_fo fo_take >> case {
  ; (| *Elem, *Set_fo' |) value$ ->
    (| Elem, \\ <A iter_res> { Set_fo' fo_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;


### feature implementation of common-behavior object

eval <*A set> *Set as_a'set -> <<A set> A set_fo> {
  Set cfd$ = *FD,
  \ <A fd> *X -> <A set> {
    X = *S cfd$, S
  } = *FR,
  fd: FD fr: FR fs: cset_fo_fs set_fo$
} ;;

extend <*A _1+> -> cfd := <A set> cfd$ ;;

eval cset_fo_fs -> <<<*A set> A fx> A set_fs> {
  empty?_f: ^cfo_empty?
  size_f: ^cfo_size
  get_f: ^cfo_get
  contain?_f_: (^cfo_contain? value$)
  put_f: ^cfo_put
  put_new_f_: (^cfo_put_new value$)
  add_f_: (^cfo_add value$)
  remove_f: ^cfo_remove
  delete_f_: (^cfo_delete value$)
  take_f: ^cfo_take
  clear_f: ^cfo_clear
  set_fs$
} ;;

eval <*T *A fx> *Fx cfo_empty? -> <bool> {
  Fx = (| *Set cfd$, *R |),
  Set c_empty?
} ;;

eval <*T *A fx> *Fx cfo_size -> <int> {
  Fx = (| *Set cfd$, *R |),
  Set c_size
} ;;

eval <*T *A fx> *Fx <A> *Elem cfo_get -> <A maybe> {
  Fx = (| *Set cfd$, *R |),
  Set Elem c_get
} ;;

eval <*T *A fx> *Fx <A> *Elem cfo_contain? -> <bool> {
  Fx = (| *Set cfd$, *R |),
  Set Elem c_contain?
} ;;

eval <*T *A fx> *Fx <A> *Elem cfo_put -> <<T A fx> <A maybe> tuple> {
  Fx = (| *Set cfd$, *R |),
  Set Elem c_put = (| *Set', *Replaced_ |),
  (| (| Set' cfd$, R |), Replaced_ |)
} ;;

eval <*T *A fx> *Fx <A> *Elem cfo_put_new -> <<T A fx> bool tuple> {
  Fx = (| *Set cfd$, *R |),
  Set Elem c_put_new = (| *Set', *Succeeded? |),
  (| (| Set' cfd$, R |), Succeeded? |)
} ;;

eval <*T *A fx> *Fx <A> *Elem cfo_add -> <T A fx> {
  Fx = (| *Set cfd$, *R |),
  Set Elem c_add = *Set',
  (| Set' cfd$, R |)
} ;;

eval <*T *A fx> *Fx <A> *Elem cfo_remove -> <<T A fx> <A maybe> tuple> {
  Fx = (| *Set cfd$, *R |),
  Set Elem c_remove = (| *Set', *Removed_ |),
  (| (| Set' cfd$, R |), Removed_ |)
} ;;

eval <*T *A fx> *Fx <A> *Elem cfo_delete -> <T A fx> {
  Fx = (| *Set cfd$, *R |),
  Set Elem c_delete = *Set',
  (| Set' cfd$, R |)
} ;;

eval <*T *A fx> *Fx cfo_take -> <<A <T A fx> tuple> maybe> {
  Fx = (| *Set cfd$, *R |),
  Set c_take >> case {
  ; (| *Elem, *Set' |) value$ -> (| Elem, (| Set' cfd$, R |) |) value$
  ; ** -> none$
  }
} ;;

eval <*T *A fx> *Fx cfo_clear -> <T A fx> {
  Fx = (| *Set cfd$, *R |),
  Set c_clear = *Set',
  (| Set' cfd$, R |)
} ;;


### subroutines

eval <*D *A set_fs> *Fs set_fs_contain?_f | contain?_f @public -> <D A bool fun> {
  Fs contain?_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *SD <A> *Elem -> <bool> {
      SD Elem &(Fs get_f) >> something? 
    }
  }
} ;;

eval <*D *A set_fs> *Fs set_fs_put_new_f | put_new_f @public -> <D A <D bool tuple> fun> {
  Fs put_new_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *SD <A> *Elem -> <D bool tuple> {
      SD Elem &(Fs contain?_f) >> case {
      ; true$ -> (| SD, false$ |)
      ; ** -> (| SD Elem &(Fs add_f), true$ |)
      }
    }
  }
} ;;

eval <*D *A set_fs> *Fs set_fs_add_f | add_f @public -> <D A D fun> {
  Fs add_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *SD <A> *Elem -> <D> {
      SD Elem &(Fs put_f) = (| *SD', ** |),
      SD'
    }
  }
} ;;

eval <*D *A set_fs> *Fs set_fs_delete_f | delete_f @public -> <D A D fun> {
  Fs delete_f_ >> case {
  ; *F value$ -> F
  ; none$ ->
    \ <D> *SD <A> *Elem -> <D> {
      SD Elem &(Fs remove_f) = (| *SD', ** |),
      SD'
    }
  }
} ;;

eval <*D> *SD <D *A set_fs> *Fs _empty? -> <bool> {
  SD &(Fs empty?_f)
} ;;

eval <*D> *SD <D *A set_fs> *Fs _size -> <int> {
  SD &(Fs size_f)
} ;;

eval <*D> *SD <D *A set_fs> *Fs <A> *Elem _get -> <A maybe> {
  SD Elem &(Fs get_f)
} ;;

eval <*D> *SD <D *A set_fs> *Fs <A> *Elem _contain? -> <bool> {
  SD Elem &(Fs contain?_f)
} ;;

eval <*D> *SD <D *A set_fs> *Fs <A> *Elem _put -> <D <A maybe> tuple> {
  SD Elem &(Fs put_f)
} ;;

eval <*D> *SD <D *A set_fs> *Fs <A> *Elem _put_new -> <D bool tuple> {
  SD Elem &(Fs put_new_f)
} ;;

eval <*D> *SD <D *A set_fs> *Fs <A> *Elem _add -> <D> {
  SD Elem &(Fs add_f)
} ;;

eval <*D> *SD <D *A set_fs> *Fs <A> *Elem _remove -> <D <A maybe> tuple> {
  SD Elem &(Fs remove_f)
} ;;

eval <*D> *SD <D *A set_fs> *Fs <A> *Elem _delete -> <D> {
  SD Elem &(Fs delete_f)
} ;;

eval <*D> *SD <D *A set_fs> *Fs _take -> <<A D tuple> maybe> {
  SD &(Fs take_f)
} ;;

eval <*D> *SD <D *A set_fs> *Fs _clear -> <D> {
  SD &(Fs clear_f)
} ;;
