###########################################################################
# MIT License                                                             #
# Copyright (c) 2024 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module @beta "sango.util.col" ;;

### combined object

data <*A col> @opaque :=
  empty?_f: <bool fun>
  size_f: <int fun>
  iter_f: <<A iter> fun>
  col$
++ a'col_impl -> [ A a'col ] ;;

eval <*D> *Z <D *A col_fs> *Fs combine @public -> <A col> {
  empty?_f:
    \\ <bool> { Z Fs do_empty? }
  size_f:
    \\ <int> { Z Fs do_size }
  iter_f:
    \\ <A iter> { Z Fs do_iter }
  col$
} ;;

eval a'col_impl -> <<*A col> A col_fs> {
  empty?_f_: (^empty? value$)
  size_f: ^size
  iter_f: ^iter
  col_fs$
} ;;

eval <*A col> *Col empty? @public -> <bool> {
  &(Col empty?_f)
} ;;

eval <*A col> *Col size @public -> <int> {
  &(Col size_f)
} ;;

eval <*A col> *Col iter @public -> <A iter> {
  &(Col iter_f)
} ;;


### subroutines

eval <*D> *Z <D *A col_fs> *Fs do_empty? | empty? @public -> <bool> {
  Z &(Fs empty?_f)
} ;;

eval <*D> *Z <D *A col_fs> *Fs do_size | size @public -> <int> {
  Z &(Fs size_f)
} ;;

eval <*D> *Z <D *A col_fs> *Fs do_iter | iter @public -> <A iter> {
  Z &(Fs iter_f)
} ;;
