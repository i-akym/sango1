###########################################################################
# MIT License                                                             #
# Copyright (c) 2018 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.stack.liststack" ;;

import "sango.list" -> list ;;
import "sango.util.stack" -> stack ;;

data <*A d> :=
  <A list>
  d$ ;;

eval new_stack @public -> <*A stack.stack> {
  [] to_stack
} ;;

eval <*A list> *Elems to_stack @public -> <A stack.stack> {
  (Elems d$) stack_fs stack.to_generic_stack
} ;;

eval stack_fs -> <<*A d> A stack.stack_fs> {
  empty?_f: ^empty?
  depth_f: ^depth
  push_f: ^push
  top_f: ^top
  pop_f: ^pop
  to_list_f_: (^to_list value$)
  clear_f: ^clear
  stack.stack_fs$
} ;;

eval <*A d> *Stack_d empty? -> <bool> {
  Stack_d = *Elems d$,
  Elems list.empty?
} ;;

eval <*A d> *Stack_d depth -> <int> {
  Stack_d = *Elems d$,
  Elems list.length
} ;;

eval <*A d> *Stack_d <A> *Elem push -> <A d> {
  Stack_d = *Elems d$,
  [ Elem ; Elems ] d$
} ;;

eval <*A d> *Stack_d top -> <A maybe> {
  Stack_d = *Elems d$,
  Elems list.head
} ;;

eval <*A d> *Stack_d pop -> <<A <A d> tuple> maybe> {
  Stack_d = *Elems d$,
  Elems case {
  ; [ *Top ; *Others ] -> (| Top, Others d$ |) value$
  ; ** -> none$
  }
} ;;

eval <*A d> *Stack_d to_list -> <A list> {
  Stack_d = *Elems d$,
  Elems
} ;;

eval <*A d> *Stack_d clear -> <A d> {
  [] d$
} ;;
