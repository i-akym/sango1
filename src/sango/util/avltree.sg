###########################################################################
# MIT License                                                             #
# Copyright (c) 2021 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.avltree" ;;

import "sango.list" -> list ;;
import "sango.tuple" -> tuple ;;
import "sango.util.avltree.base" -> base ;;

data <*A *B tree> @opaque :=
  ord: <A ord_fs>
  body: <<A B tuple> base.tree>
  count: <int>
  tree$ ;;

eval <*A ord_fs> *Ord <A> *K locator -> <<<A *B tuple> base.node> <<A B tuple> base.locate> fun> {
  \ <<A *BB tuple> base.node> *N -> <<A BB tuple> base.locate> { 
    K (N base.assoc >> tuple.pair_first) Ord compare >> case {
    ; lt$ -> ^^ base.left$
    ; eq$ -> base.just$
    ; gt$ -> ^^ base.right$
    }
  }
} ;;

eval <*A ord_fs> *Ord new_tree @public -> <A *B tree> {
  ord: Ord body: base.new_tree count: 0 tree$
} ;;

eval <*A *B tree> *Tree clear @public -> <A B tree> {
  body: base.new_tree count: 0 :: Tree tree$
} ;;

eval <*A *B tree> *Tree empty? @public -> <bool> {
  Tree count >> zero?
} ;;

eval <*A *B tree> *Tree size @public -> <int> {
  Tree count
} ;;

eval <*A *B tree> *Tree <A> *K get @public -> <<A B tuple> maybe> {
  Tree = ord: *Ord body: *Body *** tree$,
  Body (Ord K locator) base.get
} ;;

eval <*A *B tree> *Tree <A> *K assoc @public -> <B maybe> {
  (Tree K get) ^tuple.pair_second apply_to_something
} ;;

eval <*A *B tree> *Tree <A> *K contain_key? @public -> <bool> {
  Tree K get >> something?
} ;;

eval <*A *B tree> *Tree <A> *K <B> *V put @public -> <<A B tree> <<A B tuple> maybe> tuple> {
  Tree = ord: *Ord body: *Body count: *N *** tree$,
  Body (Ord K locator) (| K, V |) base.put = (| *Body', *Replaced_kv_ |),
  Replaced_kv_ case {
  ; none$ -> (| body: Body' count: (N inc) :: Tree tree$, none$ |)
  ; ** -> (| body: Body' :: Tree tree$, Replaced_kv_ |)
  }
} ;;

eval <*A *B tree> *Tree <A> *K <B> *V put_new @public -> <<A B tree> bool tuple> {
  Tree K assoc >> case {
  ; ** value$ -> (| Tree, false$ |)
  ; ** -> (| Tree K V add, true$ |)
  }
} ;;

eval <*A *B tree> *Tree <A> *K <B> *V add @public -> <A B tree> {
  Tree K V put >> tuple.pair_first
} ;;

eval <*A *B tree> *Tree <A> *K remove @public -> <<A B tree> <<A B tuple> maybe> tuple> {
  Tree = ord: *Ord body: *Body count: *N *** tree$,
  Body (Ord K locator) base.remove = (| *Body', *Removed_kv_ |),
  Removed_kv_ case {
  ; *Removed value$ -> (| body: Body' count: (N dec) :: Tree tree$, Removed_kv_ |)
  ; none$ -> (| Tree, none$ |)
  }
} ;;

eval <*A *B tree> *Tree <A> *K delete @public -> <A B tree> {
  Tree K remove >> tuple.pair_first
} ;;

eval <*A *B tree> *Tree take @public -> <<<A B tuple> <A B tree> tuple> maybe> {
  Tree = body: *Body count: *N *** tree$,
  Body base.take >> case {
  ; (| *KV, *Body' |) value$ -> (| KV, body: Body' count: (N dec) :: Tree tree$ |) value$
  ; none$ -> none$
  }
} ;;

eval <*A *B tree> *Tree <<A B tuple> list> *KVs add_list @public -> <A B tree> {
  Tree KVs
    \ <A B tree> *T <A B tuple> *KV -> <A B tree> {
      KV = (| *K, *V |),
      T K V add
    }
    list.fold
} ;;
