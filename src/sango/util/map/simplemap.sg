###########################################################################
# MIT License                                                             #
# Copyright (c) 2018 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.map.simplemap" ;;

import "sango.list" -> list ;;
import "sango.tuple" -> tuple ;;
import "sango.util.map" -> map ;;

data <*A *B d> :=
  eq_fs: <A eq_fs>
  tab: <<A B tuple> list>
  d$ ;;

eval new_map @public -> <*A *B map.map> {
  hard_eq_fs new_map
} ;;

eval <*A eq_fs> *Eq new_map_eq | new_map @public -> <A *B map.map> {
  (eq_fs: Eq tab: [] d$) map_fs map.combine
} ;;

eval map_fs -> <<*A *B d> A B map.map_fs> {
  empty?_f: ^empty?
  size_f: ^size
  get_f: ^get
  assoc_f_: (^assoc value$)
  contain_key?_f_: (^contain_key? value$)
  put_f: ^put
  put_new_f_: (^put_new value$)
  add_f_: (^add value$)
  remove_f: ^remove
  delete_f_: (^delete value$)
  take_f: ^take
  clear_f: ^clear
  map.map_fs$
} ;;

eval <*A *B d> *Map_d empty? -> <bool> {
  Map_d = *Eq *Tab d$,
  Tab list.empty?
} ;;

eval <*A *B d> *Map_d size -> <int> {
  Map_d = *Eq *Tab d$,
  Tab list.length
} ;;

eval <*A *B d> *Map_d <A> *Key get -> <<A B tuple> maybe> {
  Map_d = *Eq *Tab d$,
  Tab &\ <<A B tuple> list> *KVs -> <<A B tuple> maybe> {
    KVs case {
    ; [ (| *K, *V |) ; *KVsT ] || Key K Eq eq? -> (| K, V |) value$
    ; [ ** ; *KVsT ] -> KVsT &&
    ; [] -> none$
    }
  }
} ;;

eval <*A *B d> *Map_d <A> *Key assoc -> <B maybe> {
  (Map_d Key get) ^tuple.pair_second apply_to_something
} ;;

eval <*A *B d> *Map_d <A> *Key contain_key? -> <bool> {
  Map_d Key assoc >> something?
} ;;

eval <*A *B d> *Map_d <A> *Key <B> *Value put -> <<A B d> <<A B tuple> maybe> tuple> {
  Map_d = *Eq *Tab d$,
  Tab [] &\ <<A B tuple> list> *KVs <<A B tuple> list> *Nes -> <<A B d> <<A B tuple> maybe> tuple> {
    KVs case {
    ; [ (| *K, *V |) ; *KVsT ] || Key K Eq eq? ->
      (| tab: ([ (| Key, Value |) ; KVsT ] Nes list.append) :: Map_d d$,
         (| K, V |) value$ |)
    ; [ *KVsH ; *KVsT ] -> KVsT [ KVsH ; Nes ] &&
    ; [] ->
      (| tab: [ (| Key, Value |) ; Nes ] :: Map_d d$,
         none$ |)
    }
  }
} ;;

eval <*A *B d> *Map_d <A> *Key <B> *Value put_new -> <<A B d> bool tuple> {
  Map_d Key assoc >> case {
  ; ** value$ -> (| Map_d, false$ |)
  ; ** -> (| Map_d Key Value add, true$ |)
  }
} ;;

eval <*A *B d> *Map_d <A> *Key <B> *Value add -> <A B d> {
  Map_d Key Value put >> tuple.pair_first
} ;;

eval <*A *B d> *Map_d <A> *Key remove -> <<A B d> <<A B tuple> maybe> tuple> {
  Map_d = *Eq *Tab d$,
  Tab [] &\ <<A B tuple> list> *KVs <<A B tuple> list> *Nes -> <<A B d> <<A B tuple> maybe> tuple> {
    KVs case {
    ; [ (| *K, *V |) ; *KVsT ] || Key K Eq eq? ->
      (| tab: (KVsT Nes list.append) :: Map_d d$,
         (| K, V |) value$ |)
    ; [ *KVsH ; *KVsT ] -> KVsT [ KVsH ; Nes ] &&
    ; [] ->
      (| tab: Nes :: Map_d d$,
         none$ |)
    }
  }
} ;;

eval <*A *B d> *Map_d <A> *Key delete -> <A B d> {
  Map_d Key remove >> tuple.pair_first
} ;;

eval <*A *B d> *Map_d take -> <<<A B tuple> <A B d> tuple> maybe> {
  Map_d = *Eq *Tab d$,
  Tab case {
  ; [ *KV ; *Tab' ] -> (| KV, tab: Tab' :: Map_d d$ |) value$
  ; [] -> none$
  }
} ;;

eval <*A *B d> *Map_d clear -> <A B d> {
  tab: [] :: Map_d d$
} ;;
