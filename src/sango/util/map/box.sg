###########################################################################
# MIT License                                                             #
# Copyright (c) 2021 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module @alpha "sango.util.map.box" ;;

import "sango.actor.util" -> actu ;;
import "sango.entity.box" -> box ;;
import "sango.tuple" -> tuple ;;
import "sango.util.map" -> map ;;

data <*A *B map_h> @opaque :=
  mon: <<A B map.map> actu.box_monitor_h>
  map_h$ ;;

eval <*A! *B! map.map> *Map create_box @public -> <A B map_h> {
  Map none$ box.create_box = *Box,
  Box actu.create_monitor = *M,
  mon: M map_h$
} ;;

eval <*A *B map_h> *Map_h empty? @public -> <bool> {
  Map_h = mon: *Monitor map_h$,
  Monitor
    \ <<A B map.map> box.box_h> *Box -> <bool> {
      (Box box.read) map.empty?
    }
  actu.run
} ;;

eval <*A *B map_h> *Map_h size @public -> <int> {
  Map_h = mon: *Monitor map_h$,
  Monitor
    \ <<A B map.map> box.box_h> *Box -> <int> {
      (Box box.read) map.size
    }
  actu.run
} ;;

eval <*A *B map_h> *Map_h <A> *Key get @public -> <<A B tuple> maybe> {
  Map_h = mon: *Monitor map_h$,
  Monitor
    \ <<A B map.map> box.box_h> *Box -> <<A B tuple> maybe> {
      (Box box.read) Key map.get
    }
  actu.run
} ;;

eval <*A *B map_h> *Map_h <A> *Key assoc @public -> <B maybe> {
  Map_h = mon: *Monitor map_h$,
  Monitor
    \ <<A B map.map> box.box_h> *Box -> <B maybe> {
      (Box box.read) Key map.assoc
    }
  actu.run
} ;;

eval <*A *B map_h> *Map_h <A> *Key contain_key? @public -> <bool> {
  Map_h = mon: *Monitor map_h$,
  Monitor
    \ <<A B map.map> box.box_h> *Box -> <bool> {
      (Box box.read) Key map.contain_key?
    }
  actu.run
} ;;

eval <*A *B map_h> *Map_h <A> *Key <B> *Assoc put @public -> <<A B tuple> maybe> {
  Map_h = mon: *Monitor map_h$,
  Monitor
    \ <<A B map.map> box.box_h> *Box -> <<A B tuple> maybe> {
      (Box box.read) Key Assoc map.put = (| *Map', *Replaced_ |),
      Box Map' box.write,
      Replaced_
    }
  actu.run
} ;;

eval <*A *B map_h> *Map_h <A> *Key <B> *Assoc put_new @public -> <bool> {
  Map_h = mon: *Monitor map_h$,
  Monitor
    \ <<A B map.map> box.box_h> *Box -> <bool> {
      (Box box.read) Key Assoc map.put_new = (| *Map', *Succeeded? |),
      Box Map' box.write,
      Succeeded?
    }
  actu.run
} ;;

eval <*A *B map_h> *Map_h <A> *Key <B> *Assoc add @public -> <void> {
  Map_h = mon: *Monitor map_h$,
  Monitor
    \ <<A B map.map> box.box_h> *Box -> <void> {
      (Box box.read) Key Assoc map.add = *Map',
      Box Map' box.write >> ignore
    }
  actu.run
} ;;

eval <*A *B map_h> *Map_h <A> *Key remove @public -> <<A B tuple> maybe> {
  Map_h = mon: *Monitor map_h$,
  Monitor
    \ <<A B map.map> box.box_h> *Box -> <<A B tuple> maybe> {
      (Box box.read) Key map.remove = (| *Map', *Removed_ |),
      Box Map' box.write,
      Removed_
    }
  actu.run
} ;;

eval <*A *B map_h> *Map_h <A> *Key delete @public -> <void> {
  Map_h = mon: *Monitor map_h$,
  Monitor
    \ <<A B map.map> box.box_h> *Box -> <void> {
      (Box box.read) Key map.delete = *Map',
      Box Map' box.write >> ignore
    }
  actu.run
} ;;

eval <*A *B map_h> *Map_h clear @public -> <void> {
  Map_h = mon: *Monitor map_h$,
  Monitor
    \ <<A B map.map> box.box_h> *Box -> <void> {
      (Box box.read) map.clear = *Map',
      Box Map' box.write >> ignore
    }
  actu.run
} ;;

eval <*A *B map_h> *Map_h <<A B tuple> list> *KVs add_list @public -> <void> {
  Map_h = mon: *Monitor map_h$,
  Monitor
    \ <<A B map.map> box.box_h> *Box -> <void> {
      (Box box.read) KVs map.add_list = *Map',
      Box Map' box.write >> ignore
    }
  actu.run
} ;;

eval <*A *B map_h> *Map_h <<A B tuple> iter> *Iter add_iter @public -> <void> {
  Map_h = mon: *Monitor map_h$,
  Monitor
    \ <<A B map.map> box.box_h> *Box -> <void> {
      (Box box.read) Iter map.add_iter = *Map',
      Box Map' box.write >> ignore
    }
  actu.run
} ;;

eval <*A *B map_h> *Map_h <A list> *Keys delete_list @public -> <void> {
  Map_h = mon: *Monitor map_h$,
  Monitor
    \ <<A B map.map> box.box_h> *Box -> <void> {
      (Box box.read) Keys map.delete_list = *Map',
      Box Map' box.write >> ignore
    }
  actu.run
} ;;

eval <*A *B map_h> *Map_h <A iter> *Iter delete_iter @public -> <void> {
  Map_h = mon: *Monitor map_h$,
  Monitor
    \ <<A B map.map> box.box_h> *Box -> <void> {
      (Box box.read) Iter map.delete_iter = *Map',
      Box Map' box.write >> ignore
    }
  actu.run
} ;;

eval <*A *B map_h> *Map_h snapshot @public -> <A B map.map> {
  Map_h = mon: *Monitor map_h$,
  Monitor
    \ <<A B map.map> box.box_h> *Box -> <A B map.map> {
      Box box.read
    }
  actu.run
} ;;
