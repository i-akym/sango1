###########################################################################
# MIT License                                                             #
# Copyright (c) 2021 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module @alpha "sango.util.map.box" ;;

import "sango.actor.util" -> actu ;;
import "sango.entity.box" -> box ;;
import "sango.list" -> list ;;
import "sango.util.map" -> map ;;

data <*A *B box_fs> @public :=
  empty?_f:       <<<A B map.map_d+> box.box_h> bool fun>
  size_f:         <<<A B map.map_d+> box.box_h> int fun>
  get_f:          <<<A B map.map_d+> box.box_h> A <<A B tuple> maybe> fun>
  assoc_f:        <<<A B map.map_d+> box.box_h> A <B maybe> fun>
  contain_key?_f: <<<A B map.map_d+> box.box_h> A bool fun>
  put_f:          <<<A B map.map_d+> box.box_h> A B <<A B tuple> maybe> fun>
  put_new_f:      <<<A B map.map_d+> box.box_h> A B bool fun>
  add_f:          <<<A B map.map_d+> box.box_h> A B void fun>
  remove_f:       <<<A B map.map_d+> box.box_h> A <<A B tuple> maybe> fun>
  delete_f:       <<<A B map.map_d+> box.box_h> A void fun>
  take_f:         <<<A B map.map_d+> box.box_h> <<A B tuple> maybe> fun>
  clear_f:        <<<A B map.map_d+> box.box_h> void fun>
  box_fs$ ;;

eval <*A *B map.map_fs> *Map_fs map_fs_to_box_fs | box_fs @public -> <A B box_fs> {
  empty?_f:
    \ <<A B map.map_d+> box.box_h> *Box -> <bool> {
      (Box box.read) &(Map_fs map.empty?_f)
    }
  size_f:
    \ <<A B map.map_d+> box.box_h> *Box -> <int> {
      (Box box.read) &(Map_fs map.size_f)
    }
  get_f:
    \ <<A B map.map_d+> box.box_h> *Box <A> *Key -> <<A B tuple> maybe> {
      (Box box.read) Key &(Map_fs map.get_f)
    }
  assoc_f:
    \ <<A B map.map_d+> box.box_h> *Box <A> *Key -> <B maybe> {
      (Box box.read) Key &(Map_fs map.assoc_f)
    }
  contain_key?_f:
    \ <<A B map.map_d+> box.box_h> *Box <A> *Key -> <bool> {
      (Box box.read) Key &(Map_fs map.contain_key?_f)
    }
  put_f:
    \ <<A B map.map_d+> box.box_h> *Box <A> *Key <B> *Assoc -> <<A B tuple> maybe> {
      (Box box.read) Key Assoc &(Map_fs map.put_f) = (| *D', *Replaced_ |),
      Box D' box.write,
      Replaced_
    }
  put_new_f:
    \ <<A B map.map_d+> box.box_h> *Box <A> *Key <B> *Assoc -> <bool> {
      (Box box.read) Key Assoc &(Map_fs map.put_new_f) = (| *D', *Succeeded? |),
      Box D' box.write,
      Succeeded?
    }
  add_f:
    \ <<A B map.map_d+> box.box_h> *Box <A> *Key <B> *Assoc -> <void> {
      (Box box.read) Key Assoc &(Map_fs map.add_f) = *D',
      Box D' box.write >> ignore
    }
  remove_f:
    \ <<A B map.map_d+> box.box_h> *Box <A> *Key -> <<A B tuple> maybe> {
      (Box box.read) Key &(Map_fs map.remove_f) = (| *D', *Removed_ |),
      Box D' box.write,
      Removed_
    }
  delete_f:
    \ <<A B map.map_d+> box.box_h> *Box <A> *Key -> <void> {
      (Box box.read) Key &(Map_fs map.delete_f) = *D',
      Box D' box.write >> ignore
    }
  take_f:
    \ <<A B map.map_d+> box.box_h> *Box -> <<A B tuple> maybe> {
      (Box box.read) &(Map_fs map.take_f) >> case {
      ; (| *KV, *D' |) value$ ->
        Box D' box.write,
        KV value$
      ; ** -> none$
      }
    }
  clear_f:
    \ <<A B map.map_d+> box.box_h> *Box -> <void> {
      (Box box.read) &(Map_fs map.clear_f) = *D',
      Box D' box.write >> ignore
    }
  box_fs$
} ;;

data <*A *B map_h> @opaque :=
  mon: <<A B map.map_d+> actu.box_monitor_h>
  map_fs: <A B map.map_fs>
  box_fs: <A B box_fs>
  map_h$ ;;

eval <*A! *B! map.map> *Map create_box @public -> <A B map_h> {
  (Map map.d) none$ box.create_box = *Box,
  Box actu.create_monitor = *M,
  mon: M map_fs: (Map map.fs) box_fs: (Map map.fs >> box_fs) map_h$
} ;;

eval <*A *B map_h> *Map_h snapshot @public -> <A B map.map> {
  Map_h = mon: *Monitor map_fs: *Mfs box_fs: *Fs map_h$,
  Monitor
    \ <<A B map.map_d+> box.box_h> *Box -> <A B map.map> {
      d: (Box box.read) fs: (Map_h map_fs) map.map$
    }
    actu.run
} ;;

eval <*A *B map_h> *Map_h empty? @public -> <bool> {
  Map_h = mon: *Monitor map_fs: *Mfs box_fs: *Fs map_h$,
  Monitor
    \ <<A B map.map_d+> box.box_h> *Box -> <bool> { Box &(Fs empty?_f) }
    actu.run
} ;;

eval <*A *B map_h> *Map_h size @public -> <int> {
  Map_h = mon: *Monitor map_fs: *Mfs box_fs: *Fs map_h$,
  Monitor
    \ <<A B map.map_d+> box.box_h> *Box -> <int> { Box &(Fs size_f) }
    actu.run
} ;;

eval <*A *B map_h> *Map_h <A> *Key get @public -> <<A B tuple> maybe> {
  Map_h = mon: *Monitor map_fs: *Mfs box_fs: *Fs map_h$,
  Monitor
    \ <<A B map.map_d+> box.box_h> *Box -> <<A B tuple> maybe> { Box Key &(Fs get_f) }
    actu.run
} ;;

eval <*A *B map_h> *Map_h <A> *Key assoc @public -> <B maybe> {
  Map_h = mon: *Monitor map_fs: *Mfs box_fs: *Fs map_h$,
  Monitor
    \ <<A B map.map_d+> box.box_h> *Box -> <B maybe> { Box Key &(Fs assoc_f) }
    actu.run
} ;;

eval <*A *B map_h> *Map_h <A> *Key contain_key? @public -> <bool> {
  Map_h = mon: *Monitor map_fs: *Mfs box_fs: *Fs map_h$,
  Monitor
    \ <<A B map.map_d+> box.box_h> *Box -> <bool> { Box Key &(Fs contain_key?_f) }
    actu.run
} ;;

eval <*A *B map_h> *Map_h <A> *Key <B> *Assoc put @public -> <<A B tuple> maybe> {
  Map_h = mon: *Monitor map_fs: *Mfs box_fs: *Fs map_h$,
  Monitor
    \ <<A B map.map_d+> box.box_h> *Box -> <<A B tuple> maybe> { Box Key Assoc &(Fs put_f) }
    actu.run
} ;;

eval <*A *B map_h> *Map_h <A> *Key <B> *Assoc put_new @public -> <bool> {
  Map_h = mon: *Monitor map_fs: *Mfs box_fs: *Fs map_h$,
  Monitor
    \ <<A B map.map_d+> box.box_h> *Box -> <bool> { Box Key Assoc &(Fs put_new_f) }
    actu.run
} ;;

eval <*A *B map_h> *Map_h <A> *Key <B> *Assoc add @public -> <void> {
  Map_h = mon: *Monitor map_fs: *Mfs box_fs: *Fs map_h$,
  Monitor
    \ <<A B map.map_d+> box.box_h> *Box -> <void> { Box Key Assoc &(Fs add_f) }
    actu.run
} ;;

eval <*A *B map_h> *Map_h <A> *Key remove @public -> <<A B tuple> maybe> {
  Map_h = mon: *Monitor map_fs: *Mfs box_fs: *Fs map_h$,
  Monitor
    \ <<A B map.map_d+> box.box_h> *Box -> <<A B tuple> maybe> { Box Key &(Fs remove_f) }
    actu.run
} ;;

eval <*A *B map_h> *Map_h <A> *Key delete @public -> <void> {
  Map_h = mon: *Monitor map_fs: *Mfs box_fs: *Fs map_h$,
  Monitor
    \ <<A B map.map_d+> box.box_h> *Box -> <void> { Box Key &(Fs delete_f) }
    actu.run
} ;;

eval <*A *B map_h> *Map_h clear @public -> <void> {
  Map_h = mon: *Monitor map_fs: *Mfs box_fs: *Fs map_h$,
  Monitor
    \ <<A B map.map_d+> box.box_h> *Box -> <void> { Box &(Fs clear_f) }
    actu.run
} ;;

eval <*A *B map_h> *Map_h <<A B tuple> list> *KVs add_list @public -> <void> {
  Map_h (KVs list.iter) add_iter
} ;;

eval <*A *B map_h> *Map_h <<A B tuple> iter> *Iter add_iter @public -> <void> {
  Iter next >> case {
  ; (| (| *K, *V |), *Iter' |) value$ ->
    Map_h K V add,
    Map_h Iter' &&
  ; ** ->
  }
} ;;

eval <*A *B map_h> *Map_h <A list> *Keys delete_list @public -> <void> {
  Map_h (Keys list.iter) delete_iter
} ;;

eval <*A *B map_h> *Map_h <A iter> *Iter delete_iter @public -> <void> {
  Iter next >> case {
  ; (| *K, *Iter' |) value$ ->
    Map_h K delete,
    Map_h Iter' &&
  ; ** ->
  }
} ;;

