###########################################################################
# MIT License                                                             #
# Copyright (c) 2021 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.map.hashmap" ;;

import "sango.tuple" -> tuple ;;
import "sango.util.avltree.map" -> avlmap ;;
import "sango.util.map" -> map ;;
import "sango.util.map.simplemap" -> smap ;;

extend <*A *B _2> -> my2 :=
  eq_fs: <A eq_fs>
  tab: <int <A B map.map> map.map>
  count: <int>
  hash_map_d$ ;;

eval new_map @public -> <*A *B map.map> {
  hard_eq_fs new_map
} ;;

eval <*A eq_fs> *Eq new_map_eq | new_map @public -> <A *B map.map> {
  d: (Eq (int_ord_fs avlmap.new_map) 0 hash_map_d$)
    fs: map_fs
    map.map$
} ;;

eval map_fs -> <<*A *B _2+> A B map.map_fs> {
  empty?_f: ^empty?
    size_f: ^size
    get_f: ^get
    assoc_f_: (^assoc value$)
    contain_key?_f_: (^contain_key? value$)
    put_f: ^put
    put_new_f_: (^put_new value$)
    add_f_: (^add value$)
    remove_f: ^remove
    delete_f_: (^delete value$)
    take_f: ^take
    clear_f: ^clear
    map.map_fs$
} ;;

eval <*A *B _2+> *Map_d empty? -> <bool> {
  Map_d = *Eq *Tab *Count hash_map_d$,
  Count zero?
} ;;

eval <*A *B _2+> *Map_d size -> <int> {
  Map_d = *Eq *Tab *Count hash_map_d$,
  Count
} ;;

eval <*A *B _2+> *Map_d <A> *Key get -> <<A B tuple> maybe> {
  Map_d = *Eq *Tab *Count hash_map_d$,
  Tab (Key &(Eq hash_f)) map.assoc >> case {
  ; *M value$ -> M Key map.get
  ; ** -> none$
  }
} ;;

eval <*A *B _2+> *Map_d <A> *Key assoc -> <B maybe> {
  (Map_d Key get) ^tuple.pair_second apply_to_something
} ;;

eval <*A *B _2+> *Map_d <A> *Key contain_key? -> <bool> {
  Map_d Key get >> something?
} ;;

eval <*A *B _2+> *Map_d <A> *Key <B> *Value put -> <<A B _2+> <<A B tuple> maybe> tuple> {
  Map_d = *Eq *Tab *Count hash_map_d$,
  Key &(Eq hash_f) = *H,
  Tab H map.assoc >> case {
  ; *M value$ ->
    M Key Value map.put >> case {
    ; (| *M', none$ |) -> (| Tab H M' map.add, Count inc, none$ |)
    ; (| *M', *R |) -> (| Tab H M' map.add, Count, R |)
    } = (| *Tab', *Count', *Replaced_ |),
    (| tab: Tab' count: Count' :: Map_d hash_map_d$, Replaced_ |)
  ; ** ->
    Eq smap.new_map = *M,
    M Key Value map.add = *M',
    Tab H M' map.add = *Tab',
    Count inc = *Count',
    (| tab: Tab' count: Count' :: Map_d hash_map_d$, none$ |)
  }
} ;;

eval <*A *B _2+> *Map_d <A> *Key <B> *Value put_new -> <<A B _2+> bool tuple> {
  Map_d Key get >> case {
  ; ** value$ -> (| Map_d, false$ |)
  ; ** -> (| Map_d Key Value add, true$ |)
  }
} ;;

eval <*A *B _2+> *Map_d <A> *Key <B> *Value add -> <A B _2+> {
  Map_d Key Value put >> tuple.pair_first
} ;;

eval <*A *B _2+> *Map_d <A> *Key remove -> <<A B _2+> <<A B tuple> maybe> tuple> {
  Map_d = *Eq *Tab *Count hash_map_d$,
  Key &(Eq hash_f) = *H,
  Tab H map.assoc >> case {
  ; *M value$ ->
    M Key map.remove >> case {
    ; (| **, none$ |) -> (| Tab, Count, none$ |)
    ; (| *M', *R |) || M' map.empty? -> (| Tab H map.delete, Count dec, R |)
    ; (| *M', *R |) -> (| Tab H M' map.add, Count dec, R |)
    } = (| *Tab', *Count', *Removed_ |),
    (| tab: Tab' count: Count' :: Map_d hash_map_d$, Removed_ |)
  ; ** -> (| Map_d, none$ |)
  }
} ;;

eval <*A *B _2+> *Map_d <A> *Key delete -> <A B _2+> {
  Map_d Key remove >> tuple.pair_first
} ;;

eval <*A *B _2+> *Map_d take -> <<<A B tuple> <A B _2+> tuple> maybe> {
  Map_d = *Eq *Tab *Count hash_map_d$,
  Tab map.take >> case {
  ; (| (| *H, *M |), *Tab' |) value$ ->
    M map.take = (| *KV, *M' |) value$,
    Count dec = *Count',
    M' map.empty? >> case {
    ; true$ -> (| KV, Tab' |)
    ; ** -> (| KV, Tab' H M' map.add |)
    } = (| *Taken, *Tab'' |),
    (| Taken, tab: Tab'' count: Count' :: Map_d hash_map_d$ |) value$
  ; ** -> none$
  }
} ;;

eval <*A *B _2+> *Map_d clear -> <A B _2+> {
  Map_d = *Eq *Tab *Count hash_map_d$,
  tab: (Tab map.clear) count: 0 :: Map_d hash_map_d$
} ;;
