###########################################################################
# MIT License                                                             #
# Copyright (c) 2024 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module @alpha "sango.util.map.shared.weakkeymap" ;;

import "sango.actor.util" -> actu ;;
import "sango.entity.box" -> box ;;
import "sango.entity.existence" -> ex ;;
import "sango.list" -> list ;;
import "sango.util.avltree.map" -> avlmap ;;
import "sango.util.map" -> map ;;
import "sango.util.map.hashmap" -> hashmap ;;
import "sango.util.map.shared" -> shared ;;

data <*A! *B! k> :=
  weak_ref: <ex.weak_ref>
  redress_f: <A ex.redress_f>
  assoc: <B>
  k$ ;;

alias type <*A *B ktab> := <int <<A B k> list> map.map> ;;  # existence's hash -> key info list

data <*A! *B! d> :=
  ktab: <A B ktab>
  count: <int>
  d$ ;;

data <*A! *B! h> :=
  mon: <<A B d> actu.box_monitor_h>
  undress_f: <A ex.undress_f>
  h$ ;;

eval <*A! ex.dress_fs> *Dress_fs <*B! dummy> *Assoc create_weak_key_map @public -> <A B shared.shared_map_h> {
  ktab: (&\\ <A B ktab> { int_ord_fs avlmap.new_map })
    count: 0
    d$ = *D,
  D none$ box.create_box = *Box,
  Box actu.create_monitor = *Mon,
  mon: Mon undress_f: (Dress_fs ex.undress_f) h$ = *H,

  extract_f: \\ <<A B tuple> iter> { H extract }
  empty?_f: \\ <bool> { H empty? }
  size_f: \\ <int> { H size }
  get_f: \ <A> *Key -> <<A B tuple> maybe> { H Key get }
  assoc_f_: (\ <A> *Key -> <B maybe> { H Key assoc } value$)
  contain_key?_f_: (\ <A> *Key -> <bool> { H Key contain_key? } value$)
  put_f: \ <A> *Key <B> *Assoc -> <<A B tuple> maybe> { H Key Assoc put }
  put_new_f_: (\ <A> *Key <B> *Assoc -> <bool> { H Key Assoc put_new } value$)
  add_f_: (\ <A> *Key <B> *Assoc -> <void> { H Key Assoc add } value$)
  remove_f: \ <A> *Key -> <<A B tuple> maybe> { H Key remove }
  delete_f_: (\ <A> *Key -> <void> { H Key delete } value$)
  take_f: \\ <<A B tuple> maybe> { H take }
  clear_f: \\ <void> { H clear }
  shared.shared_map_h$
} ;;

eval <*A! *B! h> *H extract -> <<A B tuple> iter> {
  H = mon: *Mon undress_f: *UF *** h$,
  Mon
    \ <<A B d> box.box_h> *Box -> <<ex.existence <A B k> tuple> list> {
      Box box.read = *D,
      D d_lives = (| *Ls, *D' |),
      Box D' box.write,
      Ls
    }
    actu.run = *Lives,
  Lives
    \ <ex.existence <A B k> tuple> *L -> <A B tuple> {
      L = (| *Ex, redress_f: *Redress_f assoc: *Assoc *** k$ |),
      (| Ex &Redress_f, Assoc |)
    }
    list.map >> list.iter
} ;;

eval <*A! *B! h> *H empty? -> <bool> {
  H size >> zero?
} ;;

eval <*A! *B! h> *H size -> <int> {
  H = mon: *Mon undress_f: *UF *** h$,
  Mon
    \ <<A B d> box.box_h> *Box -> <int> {
      Box box.read = *D,
      D count
    }
    actu.run
} ;;

eval <*A! *B! h> *H <A> *Key get -> <<A B tuple> maybe> {
  H = mon: *Mon undress_f: *UF *** h$,
  Key &UF = (| *Ex, *RF |),
  Mon
    \ <<A B d> box.box_h> *Box -> <<A B k> maybe> {
      Box box.read = *D,
      D Ex d_find = (| *Found_, *D' |),
      Box D' box.write,
      Found_
    }
    actu.run
  >> case {
  ; (redress_f: *Redress_f assoc: *Assoc *** k$) value$ -> (| Ex &Redress_f, Assoc |) value$
  ; ** -> none$
  }
} ;;

eval <*A! *B! h> *H <A> *Key assoc -> <B maybe> {
  H Key get >> case {
  ; (| **, *Assoc |) value$ -> Assoc value$
  ; ** -> none$
  }
} ;;

eval <*A! *B! h> *H <A> *Key contain_key? -> <bool> {
  H Key get >> something?
} ;;

eval <*A! *B! h> *H <A> *Key <B> *Value put -> <<A B tuple> maybe> {
  H = mon: *Mon undress_f: *UF *** h$,
  Key &UF = (| *Ex, *RF |),
  Mon
    \ <<A B d> box.box_h> *Box -> <<A B k> maybe> {
      Box box.read = *D,
      D Ex d_remove = (| *Replaced_, *D' |),
      D' Ex RF Value Mon d_add = *D'',
      Box D'' box.write,
      Replaced_
    }
    actu.run
  >> case {
  ; (redress_f: *Redress_f assoc: *Assoc *** k$) value$ -> (| Ex &Redress_f, Assoc |) value$
  ; ** -> none$
  }
} ;;

eval <*A! *B! h> *H <A> *Key <B> *Value put_new -> <bool> {
  H = mon: *Mon undress_f: *UF *** h$,
  Key &UF = (| *Ex, *RF |),
  Mon
    \ <<A B d> box.box_h> *Box -> <bool> {
      Box box.read = *D,
      D Ex d_find = (| *Found_, *D' |),
      Found_ case {
      ; none$ -> (| true$, D' Ex RF Value Mon d_add |)
      ; ** -> (| false$, D' |)
      } = (| *Succeeded?, *D'' |),
      Box D'' box.write,
      Succeeded?
    }
    actu.run
} ;;

eval <*A! *B! h> *H <A> *Key <B> *Value add -> <void> {
  H Key Value put >> ignore
} ;;

eval <*A! *B! h> *H <A> *Key remove -> <<A B tuple> maybe> {
  H = mon: *Mon undress_f: *UF *** h$,
  Key &UF = (| *Ex, *RF |),
  Mon
    \ <<A B d> box.box_h> *Box -> <<A B k> maybe> {
      Box box.read = *D,
      D Ex d_remove = (| *Removed_, *D' |),
      Box D' box.write,
      Removed_ 
    }
    actu.run
  >> case {
  ; (redress_f: *Redress_f assoc: *Assoc *** k$) value$ -> (| Ex &Redress_f, Assoc |) value$
  ; ** -> none$
  }
} ;;

eval <*A! *B! h> *H <A> *Key delete -> <void> {
  H Key remove >> ignore
} ;;

eval <*A! *B! h> *H take -> <<A B tuple> maybe> {
  H = mon: *Mon undress_f: *UF *** h$,
  Mon
    \ <<A B d> box.box_h> *Box -> <<ex.existence <A B k> tuple> maybe> {
      Box box.read = *D,
      D d_take = (| *EK_, *D' |),
      Box D' box.write,
      EK_
    }
    actu.run
  >> case {
  ; (| *Ex, redress_f: *Redress_f assoc: *Assoc *** k$ |) value$ -> (| Ex &Redress_f, Assoc |) value$
  ; ** -> none$
  }
} ;;

eval <*A! *B! h> *H clear -> <void> {
  H = mon: *Mon undress_f: *UF *** h$,
  Mon
    \ <<A B d> box.box_h> *Box -> <void> {
      Box box.read = *D,
      D d_clear = *D',
      Box D' box.write >> ignore
    }
    actu.run
} ;;


# -- data manipulation routines --

eval <*A! *B! d> *D d_lives -> <<<ex.existence <A B k> tuple> list> <A B d> tuple> {
  D = ktab: *KT count: *Count d$,
  [] = <<A B k> list> *KL,
  [] = <<ex.existence <A B k> tuple> list> *EKL,
  [] = <<A B k> list> *KL2,
  KL 0 KT EKL KL2 (KT map.clear) 0 &\
      <<A B k> list> *Ks  # staged key infos
      <int> *EH  # existence's hash of statged key info; initial 0 will not be used
      <A B ktab> *Ktab  # source of key infos
      <<ex.existence <A B k> tuple> list> *Ls  # result
      <<A B k> list> *Ks2  # new staged key infos
      <A B ktab> *KT2  # new ktab
      <int> *C  # count
      -> <<<ex.existence <A B k> tuple> list> <A B d> tuple> {
    Ks case {
    ; [ *K ; *Ks' ] ->
      K = weak_ref: *W *** k$,
      W ex.get >> case {
      ; *E value$ ->
        Ks' EH Ktab [ (| E, K |) ; Ls ] [ K ; Ks2 ] KT2 (C inc) &&
      ; none$ ->
        Ks' EH Ktab Ls Ks2 KT2 C &&
      }
    ; [] ->  # all staged key infos are scanned
      Ks2 case {
      ; [] -> KT2
      ; ** -> KT2 EH Ks2 map.add
      } = *KT2',
      Ktab map.take >> case {
      ; (| (| *EH', *Ks' |), *Ktab' |) value$ -> [] = <<A B k> list> *KL2', Ks' EH' Ktab' Ls KL2' KT2' C &&
      ; none$ -> (| Ls, ktab: KT2' count: C d$ |)
      }
    }
  }
} ;;

eval <*A! *B! d> *D <ex.existence> *Ex d_find -> <<<A B k> maybe> <A B d> tuple> {
  D = ktab: *KT count: *Count d$,
  Ex hash = *EH,
  KT EH map.assoc >> case {
  ; *Ks value$ ->
    Ks Ex find_in_candidates = (| *Found_, *Scanned, *Purged_count |),
    Found_ case {
    ; (| *K, *KK |) value$ -> (| K value$, KK [ K ; Scanned ] list.cons_each |)
    ; ** -> (| none$, Scanned |)
    } = (| *Res, *Ks' |),
    Ks' case {
    ; [] -> KT EH map.delete
    ; ** -> KT EH Ks' map.add
    } = *KT',
    (| Res, ktab: KT' count: (Count Purged_count diff) d$ |) 
  ; ** -> (| none$, D |)
  }
} ;;

eval <*A! *B! d> *D <ex.existence> *Ex <A ex.redress_f> *RF <B> *Value <<A B d> actu.box_monitor_h> *Mon d_add -> <A B d> {
    # add without duplication check
  D = ktab: *KT count: *Count d$,
  Ex hash = *EH,
  \ <ex.weak_ref> *Cleared -> <void> {
    Mon
      \ <<A B d> box.box_h> *BB -> <void> {
        BB box.read = *DD,
        DD Cleared EH d_purge = *DD',
        BB DD' box.write >> ignore
      }
      actu.run
  } = *Lis,
  Ex (Lis value$) ex.create_weak_ref = *W,
  weak_ref: W redress_f: RF assoc: Value k$ = *K,
  KT EH map.assoc >> case {
  ; *Ks value$ -> [ K ; Ks ]
  ; ** -> [ K ]
  } = *Ks',
  KT EH Ks' map.add = *KT',
  ktab: KT' count: (Count inc) d$
} ;;

eval <*A! *B! d> *D <ex.existence> *Ex d_remove -> <<<A B k> maybe> <A B d> tuple> {
  D = ktab: *KT count: *Count d$,
  Ex hash = *EH,
  KT EH map.assoc >> case {
  ; *Ks value$ ->
    Ks Ex find_in_candidates = (| *Found_, *Scanned, *Purged_count |),
    Found_ case {
    ; (| *K, *KK |) value$ ->
      K weak_ref = *W,
      W ex.clear,
      (| K value$, KK Scanned list.cons_each, Purged_count inc |)
    ; ** -> (| none$, Scanned, Purged_count |)
    } = (| *Res, *Ks', *Purged_count' |),
    Ks' case {
    ; [] -> KT EH map.delete
    ; ** -> KT EH Ks' map.add
    } = *KT',
    (| Res, ktab: KT' count: (Count Purged_count' diff) d$ |) 
  ; ** -> (| none$, D |)
  }
} ;;

eval <*A! *B! d> *D <ex.weak_ref> *Weak_ref <int> *EH d_purge -> <A B d> {
  D = ktab: *KT count: *Count d$,
  KT EH map.assoc >> case {
  ; *Ks value$ ->
    [] = <<A B k> list> *KL,
    Ks KL Count &\ <<A B k> list> *To_be_scanned <<A B k> list> *Scanned <int> *C
        -> <<<A B k> list> <int> tuple> {
      To_be_scanned case {
      ; [ weak_ref: Weak_ref *** k$ ; *To_be_scanned' ] ->
        (| To_be_scanned' Scanned list.cons_each, C dec |)
      ; [ *K ; *To_be_scanned' ] ->
        K weak_ref = *W,
        W ex.get >> case {
        ; ** value$ -> To_be_scanned' [ K ; Scanned ] C &&
        ; ** -> To_be_scanned' Scanned (C inc) &&
        }
      ; [] -> (| Scanned, C |)
      }
    } = (| *Ks', *Count' |),
    Ks' case {
    ; [] -> KT EH map.delete
    ; ** -> KT EH Ks' map.add
    } = *KT',
    ktab: KT' count: Count' d$
  ; ** -> D  # not reached here
  }
} ;;

eval <*A! *B! d> *D d_take -> <<<ex.existence <A B k> tuple> maybe> <A B d> tuple> {
  D = ktab: *KT count: *Count d$,
  [] = <<A B k> list> *KL,
  KL 0 KT Count &\
      <<A B k> list> *Ks  # staged key infos
      <int> *E_hash  # existence's hash of staged key infos
      <A B ktab> *Ktab  # to be processed
      <int> *C
      -> <<<ex.existence <A B k> tuple> maybe> <A B d> tuple> {
    Ks case {
    ; [ *K ; *Ks' ] ->
      C dec = *C',
      K weak_ref = *W,
      W ex.get >> case {
      ; *E value$ ->
        W ex.clear,
        Ks' case {
        ; [] -> Ktab
        ; ** -> Ktab E_hash Ks' map.add
        } = *Ktab',
        (| (| E, K |) value$, ktab: Ktab' count: C' :: D d$ |)
      ; none$ ->
        Ks' E_hash Ktab C' &&
      }
    ; [] ->
      Ktab map.take >> case {
      ; (| (| *E_hash', *Ks' |), *Ktab' |) value$ -> Ks' E_hash' Ktab' C &&
      ; none$ -> (| none$, ktab: Ktab count: 0 d$ |)
      }
    }
  }
} ;;

eval <*A! *B! d> *D d_clear -> <A B d> {
  D = ktab: *KT count: *Count d$,
  ktab: (KT map.clear) count: 0 d$
} ;;

eval <<*A! *B! k> list> *Ks <ex.existence> *Ex find_in_candidates
    -> <<<<A B k> <<A B k> list> tuple> maybe> <<A B k> list> int tuple> {
      # (key info, not yet scanned)?, scanned, purged_count
  [] = <<A B k> list> *KL,
  Ks KL 0 &\ <<A B k> list> *To_be_scanned <<A B k> list> *Scanned <int> *Purged_count
      -> <<<<A B k> <<A B k> list> tuple> maybe> <<A B k> list> int tuple> {
    To_be_scanned case {
    ; [ *K ; *To_be_scanned' ] ->
      K = weak_ref: *W *** k$,
      W ex.get >> case {
      ; Ex value$ -> (| (| K, To_be_scanned' |) value$, Scanned, Purged_count |)
      ; ** value$ -> To_be_scanned' [ K ; Scanned ] Purged_count &&
      ; none$ -> To_be_scanned' Scanned (Purged_count inc) &&
      }
    ; [] -> (| none$, Scanned, Purged_count |)
    }
  }
} ;;
