###########################################################################
# MIT License                                                             #
# Copyright (c) 2024 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module @beta "sango.util.map.shared.box" ;;

import "sango.actor.util" -> actu ;;
import "sango.entity.box" -> box ;;
import "sango.list" -> list ;;
import "sango.util.map" -> map ;;
import "sango.util.map.feature" -> mapf ;;
import "sango.util.map.shared" -> shmap ;;

eval <*T![ *A! *B! mapf.a'map ]> *FMap f_create_box | create_box @public -> <A B shmap.shared_map_h> {
  FMap (FMap mapf._feature_a'map) do_create_box
} ;;

eval <*D!> *Map_d <D *A! *B! map.map_fs> *Map_fs do_create_box | create_box @public -> <A B shmap.shared_map_h> {
  Map_d none$ box.create_box = *Box,
  Box actu.create_box_monitor = *Mon,

  extract_f: \\ <<A B tuple> iter> { Mon Map_fs extract }
  empty?_f: \\ <bool> { Mon Map_fs empty? }
  size_f: \\ <int> { Mon Map_fs size }
  get_f: \ <A> *Key -> <<A B tuple> maybe> { Mon Map_fs Key get }
  assoc_f_: (\ <A> *Key -> <B maybe> { Mon Map_fs Key assoc } value$)
  contain_key?_f_: (\ <A> *Key -> <bool> { Mon Map_fs Key contain_key? } value$)
  put_f: \ <A> *Key <B> *Assoc -> <<A B tuple> maybe> { Mon Map_fs Key Assoc put }
  put_new_f_: (\ <A> *Key <B> *Assoc -> <bool> { Mon Map_fs Key Assoc put_new } value$)
  add_f_: (\ <A> *Key <B> *Assoc -> <void> { Mon Map_fs Key Assoc add } value$)
  remove_f: \ <A> *Key -> <<A B tuple> maybe> { Mon Map_fs Key remove }
  delete_f_: (\ <A> *Key -> <void> { Mon Map_fs Key delete } value$)
  take_f: \\ <<A B tuple> maybe> { Mon Map_fs take }
  clear_f: \\ <void> { Mon Map_fs clear }
  shmap.shared_map_h$
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! *B! map.map_fs> *Map_fs extract -> <<A B tuple> iter> {
  Mon
    \ <D box.box_h> *Box -> <D> {
      Box box.read
    } actu.run = *Z,
  Z Map_fs map.do_iter
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! *B! map.map_fs> *Map_fs empty? -> <bool> {
  Mon
    \ <D box.box_h> *Box -> <D> {
      Box box.read
    } actu.run = *Z,
  Z Map_fs map.do_empty?
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! *B! map.map_fs> *Map_fs size -> <int> {
  Mon
    \ <D box.box_h> *Box -> <D> {
      Box box.read
    } actu.run = *Z,
  Z Map_fs map.do_size
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! *B! map.map_fs> *Map_fs <A> *Key get -> <<A B tuple> maybe> {
  Mon
    \ <D box.box_h> *Box -> <D> {
      Box box.read
    } actu.run = *Z,
  Z Map_fs Key map.do_get
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! *B! map.map_fs> *Map_fs <A> *Key assoc -> <B maybe> {
  Mon
    \ <D box.box_h> *Box -> <D> {
      Box box.read
    } actu.run = *Z,
  Z Map_fs Key map.do_assoc
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! *B! map.map_fs> *Map_fs <A> *Key contain_key? -> <bool> {
  Mon
    \ <D box.box_h> *Box -> <D> {
      Box box.read
    } actu.run = *Z,
  Z Map_fs Key map.do_contain_key?
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! *B! map.map_fs> *Map_fs <A> *Key <B> *Assoc put -> <<A B tuple> maybe> {
  Mon
    \ <D box.box_h> *Box -> <<A B tuple> maybe> {
      Box box.read = *Z,
      Z Map_fs Key Assoc map.do_put = (| *Z', *Replaced_kv_ |),
      Box Z' box.write,
      Replaced_kv_
    } actu.run
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! *B! map.map_fs> *Map_fs <A> *Key <B> *Assoc put_new -> <bool> {
  Mon
    \ <D box.box_h> *Box -> <bool> {
      Box box.read = *Z,
      Z Map_fs Key Assoc map.do_put_new = (| *Z', *Succeeded? |),
      Box Z' box.write,
      Succeeded?
    } actu.run
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! *B! map.map_fs> *Map_fs <A> *Key <B> *Assoc add -> <void> {
  Mon
    \ <D box.box_h> *Box -> <void> {
      Box box.read = *Z,
      Z Map_fs Key Assoc map.do_add = *Z',
      Box Z' box.write >> ignore
    } actu.run
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! *B! map.map_fs> *Map_fs <A> *Key remove -> <<A B tuple> maybe> {
  Mon
    \ <D box.box_h> *Box -> <<A B tuple> maybe> {
      Box box.read = *Z,
      Z Map_fs Key map.do_remove = (| *Z', *Removed_kv_ |),
      Box Z' box.write,
      Removed_kv_
    } actu.run
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! *B! map.map_fs> *Map_fs <A> *Key delete -> <void> {
  Mon
    \ <D box.box_h> *Box -> <void> {
      Box box.read = *Z,
      Z Map_fs Key map.do_delete = *Z',
      Box Z' box.write >> ignore
    } actu.run
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! *B! map.map_fs> *Map_fs take -> <<A B tuple> maybe> {
  Mon
    \ <D box.box_h> *Box -> <<A B tuple> maybe> {
      Box box.read = *Z,
      Z Map_fs map.do_take >> case {
      ; (| *KV, *Z' |) value$ -> Box Z' box.write, KV value$
      ; ** -> none$
      }
    } actu.run
} ;;

eval <*D! actu.box_monitor_h> *Mon <D *A! *B! map.map_fs> *Map_fs clear -> <void> {
  Mon
    \ <D box.box_h> *Box -> <void> {
      Box box.read = *Z,
      Z Map_fs map.do_clear = *Z',
      Box Z' box.write >> ignore
    } actu.run
} ;;
