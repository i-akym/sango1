###########################################################################
# MIT License                                                             #
# Copyright (c) 2025 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module @beta "sango.util.map.shared.weakvaluemap" ;;

import "sango.actor.util" -> actu ;;
import "sango.entity" -> ent ;;
import "sango.entity.box" -> box ;;
import "sango.entity.existence" -> ex ;;
import "sango.list" -> list ;;
import "sango.unique" -> uniq ;;
import "sango.util.map" -> map ;;
import "sango.util.map.hashmap" -> hmap ;;
import "sango.util.map.shared" -> shared ;;

data <*A! *B! v> :=
  key: <A>
  weak_ref: <ex.weak_ref>
  redress_f: <B ent.redress_f>
  v$ ;;

data <*KM! *A! *B! d> :=
  key_tab_d: <KM>
  key_tab_fs: <KM A uniq.u map.map_fs>
  value_tab: <uniq.u <A B v> map.map>
  d$ ;;

data <*KM! *A! *B! h> @opaque :=
  mon: <<KM A B d> actu.box_monitor_h>
  undress_f: <B ent.undress_f>
  h$ ;;

eval <*KM![ *A! uniq.u map.a'map ]> *Key_tab <*B! ent.entity_fs> *Entity_fs
    create_weak_value_map @public -> <A B shared.shared_map_h> {
  Key_tab map._feature_a'map = *KTfs,
  hmap.new_map = <uniq.u <A B v> map.map> *Value_tab,
  (key_tab_d: (Key_tab KTfs map.do_clear) key_tab_fs: KTfs value_tab: Value_tab d$)
    none$ box.create_box = *Box,
  Box actu.create_monitor = *Mon,
  mon: Mon undress_f: (Entity_fs ent.undress_f) h$ = *H,

  extract_f: \\ <<A B tuple> iter> { H extract }
  empty?_f: \\ <bool> { H empty? }
  size_f: \\ <int> { H size }
  get_f: \ <A> *Key -> <<A B tuple> maybe> { H Key get }
  assoc_f_: (\ <A> *Key -> <B maybe> { H Key assoc } value$)
  contain_key?_f_: (\ <A> *Key -> <bool> { H Key contain_key? } value$)
  put_f: \ <A> *Key <B> *Assoc -> <<A B tuple> maybe> { H Key Assoc put }
  put_new_f_: (\ <A> *Key <B> *Assoc -> <bool> { H Key Assoc put_new } value$)
  add_f_: (\ <A> *Key <B> *Assoc -> <void> { H Key Assoc add } value$)
  remove_f: \ <A> *Key -> <<A B tuple> maybe> { H Key remove }
  delete_f_: (\ <A> *Key -> <void> { H Key delete } value$)
  take_f: \\ <<A B tuple> maybe> { H take }
  clear_f: \\ <void> { H clear }
  shared.shared_map_h$
} ;;

eval <*KM! *A! *B! h> *H extract -> <<A B tuple> iter> {
  H = mon: *Mon undress_f: *Uf *** h$,
  Mon
    \ <<KM A B d> box.box_h> *Box -> <<A ex.existence <B ent.redress_f> tuple> list> {
      Box box.read = *D,
      D d_lives = (| *Ls, *D' |),
      Box D' box.write,
      Ls
    }
    actu.run = *Lives,
  Lives
    \ <A ex.existence <B ent.redress_f> tuple> *L -> <A B tuple> {
      L = (| *K, *E, *Rf |),
      (| K, E &Rf |)
    }
    list.map >> list.iter
} ;;

eval <*KM! *A! *B! h> *H empty? -> <bool> {
  H = mon: *Mon undress_f: *Uf *** h$,
  Mon
    \ <<KM A B d> box.box_h> *Box -> <bool> {
      Box box.read = *D,
      (D key_tab_d) (D key_tab_fs) map.do_empty?
    }
    actu.run
} ;;

eval <*KM! *A! *B! h> *H size -> <int> {
  H = mon: *Mon undress_f: *Uf *** h$,
  Mon
    \ <<KM A B d> box.box_h> *Box -> <int> {
      Box box.read = *D,
      (D key_tab_d) (D key_tab_fs) map.do_size
    }
    actu.run
} ;;

eval <*KM! *A! *B! h> *H <A> *Key get -> <<A B tuple> maybe> {
  H = mon: *Mon undress_f: *Uf *** h$,
  Mon
    \ <<KM A B d> box.box_h> *Box -> <<A ex.existence <B ent.redress_f> tuple> maybe> {
      Box box.read = *D,
      D Key d_get = (| *KER_, *D' |),
      Box D' box.write,
      KER_
    }
    actu.run
  >> case {
  ; (| *K, *E, *Rf |) value$ -> (| K, E &Rf |) value$
  ; ** -> none$
  }
} ;;

eval <*KM! *A! *B! h> *H <A> *Key assoc -> <B maybe> {
  H Key get >> case {
  ; (| **, *Assoc |) value$ -> Assoc value$
  ; ** -> none$
  }
} ;;

eval <*KM! *A! *B! h> *H <A> *Key contain_key? -> <bool> {
  H Key get >> something?
} ;;

eval <*KM! *A! *B! h> *H <A> *Key <B> *Value put -> <<A B tuple> maybe> {
  H = mon: *Mon undress_f: *Uf *** h$,
  Mon
    \ <<KM A B d> box.box_h> *Box -> <<A ex.existence <B ent.redress_f> tuple> maybe> {
      Box box.read = *D,
      D Key d_remove = (| *Replaced_, *D' |),
      D' Key Value Uf Mon d_add = *D'',
      Box D'' box.write,
      Replaced_
    }
    actu.run
  >> case {
  ; (| *K, *E, *Rf |) value$ -> (| K, E &Rf |) value$
  ; ** -> none$
  }
} ;;

eval <*KM! *A! *B! h> *H <A> *Key <B> *Value put_new -> <bool> {
  H = mon: *Mon undress_f: *Uf *** h$,
  Mon
    \ <<KM A B d> box.box_h> *Box -> <bool> {
      Box box.read = *D,
      D Key d_get = (| *Found_, *D' |),
      Found_ case {
      ; none$ -> (| true$, D' Key Value Uf Mon d_add |)
      ; ** -> (| false$, D' |)
      } = (| *Succeeded?, *D'' |),
      Box D'' box.write,
      Succeeded?
    }
    actu.run
} ;;

eval <*KM! *A! *B! h> *H <A> *Key <B> *Value add -> <void> {
  H Key Value put >> ignore
} ;;

eval <*KM! *A! *B! h> *H <A> *Key remove -> <<A B tuple> maybe> {
  H = mon: *Mon undress_f: *Uf *** h$,
  Mon
    \ <<KM A B d> box.box_h> *Box -> <<A ex.existence <B ent.redress_f> tuple> maybe> {
      Box box.read = *D,
      D Key d_remove = (| *Removed_, *D' |),
      Box D' box.write,
      Removed_ 
    }
    actu.run
  >> case {
  ; (| *K, *E, *Rf |) value$ -> (| K, E &Rf |) value$
  ; ** -> none$
  }
} ;;

eval <*KM! *A! *B! h> *H <A> *Key delete -> <void> {
  H Key remove >> ignore
} ;;

eval <*KM! *A! *B! h> *H take -> <<A B tuple> maybe> {
  H = mon: *Mon undress_f: *Uf *** h$,
  Mon
    \ <<KM A B d> box.box_h> *Box -> <<A ex.existence <B ent.redress_f> tuple> maybe> {
      Box box.read = *D,
      D d_take = (| *KER_, *D' |),
      Box D' box.write,
      KER_
    }
    actu.run
  >> case {
  ; (| *K, *E, *Rf |) value$ -> (| K, E &Rf |) value$
  ; ** -> none$
  }
} ;;

eval <*KM! *A! *B! h> *H clear -> <void> {
  H = mon: *Mon undress_f: *Uf *** h$,
  Mon
    \ <<KM A B d> box.box_h> *Box -> <void> {
      Box box.read = *D,
      D d_clear = *D',
      Box D' box.write >> ignore
    }
    actu.run
} ;;


# -- data manipulation routines --

eval <*KM! *A! *B! d> *D d_lives -> <<<A ex.existence <B ent.redress_f> tuple> list> <KM A B d> tuple> {
  D = key_tab_d: *KTd key_tab_fs: *KTfs value_tab: *VT d$,
  [] = <<A ex.existence <B ent.redress_f> tuple> list> *ERL,
  KTd VT ERL (KTd KTfs map.do_clear) (VT map.clear) &\
      <KM> *KTd1  # current
      <uniq.u <A B v> map.map> *VT1  # current
      <<A ex.existence <B ent.redress_f> tuple> list> *Ls  # result in reverse order
      <KM> *KTd2  # for new D
      <uniq.u <A B v> map.map> *VT2  # for new D
      -> <<<A ex.existence <B ent.redress_f> tuple> list> <KM A B d> tuple> {
    KTd1 KTfs map.do_take >> case {
    ; (| (| *K, *U |), *KTd1' |) value$ ->
      VT1 U map.remove = (| *VT1', (| **, key: ** weak_ref: *W redress_f: *Rf v$ |) value$ |),
      W ex.get >> case {
      ; *E value$ ->  KTd1' VT1' [ (| K, E, Rf |) ; Ls ] (KTd2 KTfs K U map.do_add) (VT2 U (K W Rf v$) map.add) &&
      ; none$ -> KTd1' VT1' Ls KTd2 VT2 &&
      }
    ; none$ -> (| Ls list.reverse, key_tab_d: KTd2 key_tab_fs: KTfs value_tab: VT2 d$ |)
    }
  }
} ;;

eval <*KM! *A! *B! d> *D <A> *Key d_get -> <<<A ex.existence <B ent.redress_f> tuple> maybe> <KM A B d> tuple> {
  D = key_tab_d: *KTd key_tab_fs: *KTfs value_tab: *VT d$,
  KTd KTfs Key map.do_get >> case {
  ; (| *K, *U |) value$ ->
    VT U map.assoc = (key: K weak_ref: *W redress_f: *Rf v$) value$,
    W ex.get >> case {
    ; *E value$ -> (| (| K, E, Rf |) value$, D |)
    ; none$ -> (| none$, key_tab_d: (KTd KTfs Key map.do_delete) key_tab_fs: KTfs value_tab: (VT U map.delete) d$ |)
    }
  ; none$ -> (| none$, D |)
  }
} ;;

eval <*KM! *A! *B! d> *D <A> *Key <B> *Value <B ent.undress_f> *Uf <<KM A B d> actu.box_monitor_h> *Mon d_add -> <KM A B d> {
    # add without duplication check
  D = key_tab_d: *KTd key_tab_fs: *KTfs value_tab: *VT d$,
  uniq.new_unique = *U,
  Value &Uf = (| *E, *Rf |),
  \ <ex.weak_ref> *Cleared -> <void> {
    Mon
      \ <<KM A B d> box.box_h> *BB -> <void> {
        BB box.read = *DD,
        DD Key d_get = (| **, *DD' |),  # delete KV internally if weak ref is cleared
        BB DD' box.write >> ignore
      }
      actu.run
  } = *Lis,
  E (Lis value$) ex.create_weak_ref = *W,
  KTd KTfs Key U map.do_add = *KTd',
  VT U (key: Key weak_ref: W redress_f: Rf v$) map.add = *VT',
  key_tab_d: KTd' key_tab_fs: KTfs value_tab: VT' d$
} ;;

eval <*KM! *A! *B! d> *D <A> *Key d_remove -> <<<A ex.existence <B ent.redress_f> tuple> maybe> <KM A B d> tuple> {
  D = key_tab_d: *KTd key_tab_fs: *KTfs value_tab: *VT d$,
  KTd KTfs Key map.do_remove >> case {
  ; (| *KTd', (| *K, *U |) value$ |) ->
    VT U map.remove = (| *VT', (| **, key: ** weak_ref: *W redress_f: *Rf v$ |) value$ |),
    key_tab_d: KTd' key_tab_fs: KTfs value_tab: VT' d$ = *D',
    W ex.get >> case {
    ; *E value$ -> W ex.clear, (| (| K, E, Rf |) value$, D' |)
    ; none$ -> (| none$, D' |)
    }
  ; (| **, none$ |) -> (| none$, D |)
  }
} ;;

eval <*KM! *A! *B! d> *D d_take -> <<<A ex.existence <B ent.redress_f> tuple> maybe> <KM A B d> tuple> {
  D = key_tab_d: *KTd key_tab_fs: *KTfs value_tab: *VT d$,
  KTd KTfs map.do_take >> case {
  ; (| (| *K, *U |), *KTd' |) value$ ->
    VT U map.remove = (| *VT', (| **, key: ** weak_ref: *W redress_f: *Rf v$ |) value$ |),
    key_tab_d: KTd' key_tab_fs: KTfs value_tab: VT' d$ = *D',
    W ex.get >> case {
    ; *E value$ -> W ex.clear, (| (| K, E, Rf |) value$, D' |)
    ; none$ -> D' &&
    }
  ; none$ -> (| none$, D |)
  }
} ;;

eval <*KM! *A! *B! d> *D d_clear -> <KM A B d> {
  D = key_tab_d: *KTd key_tab_fs: *KTfs value_tab: *VT d$,
  key_tab_d: (KTd KTfs map.do_clear) key_tab_fs: KTfs value_tab: (VT map.clear) d$
} ;;
