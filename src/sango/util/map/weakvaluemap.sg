###########################################################################
# MIT License                                                             #
# Copyright (c) 2021 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module @alpha "sango.util.map.weakvaluemap" ;;

import "sango.actor.util" -> actu ;;
import "sango.entity.box" -> box ;;
import "sango.entity.existence" -> ex ;;
import "sango.list" -> list ;;
import "sango.util.map" -> map ;;

data <*A! *B! map_h> @opaque :=
  mon: <<A B container> actu.box_monitor_h>
  undress_f: <B ex.undress_f>
  map_h$ ;;

alias type <*A *B container> @public := <A <B v> map.map> ;;

data <*A v> @opaque :=
  weak_ref: <ex.weak_ref>
  redress_f: <A ex.redress_f>
  v$ ;;

eval <*A! *B! container> *Container <B ex.dress_fs> *Dress_fs
    create_weak_value_map @public -> <A B map_h> {
  Container none$ box.create_box = *Box,
  Box actu.create_monitor = *Mon,
  mon: Mon undress_f: (Dress_fs ex.undress_f) map_h$
} ;;

eval <*A! *B! map_h> *Map_h all_kvs @public -> <<A B tuple> list> {
  Map_h = mon: *Mon undress_f: *UF *** map_h$,
  Mon
    \ <<A B container> box.box_h> *Box -> <<A ex.existence <B v> tuple> list> {
      Box box.read = *D,
      D d_lives = (| *Ls, *D' |),
      Box D' box.write,
      Ls
    }
    actu.run = *Lives,
  Lives
    \ <A ex.existence <B v> tuple> *L -> <A B tuple> {
      L = (| *K, *Ex, redress_f: *Redress_f *** v$ |),
      (| K, Ex &Redress_f |)
    }
    list.map
} ;;

eval <*A! *B! map_h> *Map_h empty? @public -> <bool> {
  Map_h = mon: *Mon undress_f: *UF *** map_h$,
  Mon
    \ <<A B container> box.box_h> *Box -> <bool> {
      Box box.read = *D,
      D map.empty?
    }
    actu.run
} ;;

eval <*A! *B! map_h> *Map_h size @public -> <int> {
  Map_h = mon: *Mon undress_f: *UF *** map_h$,
  Mon
    \ <<A B container> box.box_h> *Box -> <int> {
      Box box.read = *D,
      D map.size
    }
    actu.run
} ;;

eval <*A! *B! map_h> *Map_h <A> *Key get @public -> <<A B tuple> maybe> {
  Map_h = mon: *Mon undress_f: *UF *** map_h$,
  Mon
    \ <<A B container> box.box_h> *Box -> <<A ex.existence <B v> tuple> maybe> {
      Box box.read = *D,
      D Key d_get = (| *KEV_, *D' |),
      Box D' box.write,
      KEV_
    }
    actu.run
  >> case {
  ; (| *K, *Ex, redress_f: *Redress_f *** v$ |) value$ -> (| K, Ex &Redress_f |) value$
  ; ** -> none$
  }
} ;;

eval <*A! *B! map_h> *Map_h <A> *Key assoc @public -> <B maybe> {
  Map_h Key get >> case {
  ; (| **, *Assoc |) value$ -> Assoc value$
  ; ** -> none$
  }
} ;;

eval <*A! *B! map_h> *Map_h <A> *Key contain_key? @public -> <bool> {
  Map_h Key get >> something?
} ;;

eval <*A! *B! map_h> *Map_h <A> *Key <B> *Value put @public -> <<A B tuple> maybe> {
  Map_h = mon: *Mon undress_f: *UF *** map_h$,
  Mon
    \ <<A B container> box.box_h> *Box -> <<A ex.existence <B v> tuple> maybe> {
      Box box.read = *D,
      D Key d_remove = (| *Replaced_, *D' |),
      D' Key Value UF Mon d_add = *D'',
      Box D'' box.write,
      Replaced_
    }
    actu.run
  >> case {
  ; (| *K, *Ex, redress_f: *Redress_f *** v$ |) value$ -> (| K, Ex &Redress_f |) value$
  ; ** -> none$
  }
} ;;

eval <*A! *B! map_h> *Map_h <A> *Key <B> *Value put_new @public -> <bool> {
  Map_h = mon: *Mon undress_f: *UF *** map_h$,
  Mon
    \ <<A B container> box.box_h> *Box -> <bool> {
      Box box.read = *D,
      D Key d_get = (| *Found_, *D' |),
      Found_ case {
      ; none$ -> (| true$, D' Key Value UF Mon d_add |)
      ; ** -> (| false$, D' |)
      } = (| *Succeeded?, *D'' |),
      Box D'' box.write,
      Succeeded?
    }
    actu.run
} ;;

eval <*A! *B! map_h> *Map_h <A> *Key <B> *Value add @public -> <void> {
  Map_h Key Value put >> ignore
} ;;

eval <*A! *B! map_h> *Map_h <A> *Key remove @public -> <<A B tuple> maybe> {
  Map_h = mon: *Mon undress_f: *UF *** map_h$,
  Mon
    \ <<A B container> box.box_h> *Box -> <<A ex.existence <B v> tuple> maybe> {
      Box box.read = *D,
      D Key d_remove = (| *Removed_, *D' |),
      Box D' box.write,
      Removed_ 
    }
    actu.run
  >> case {
  ; (| *K, *Ex, redress_f: *Redress_f *** v$ |) value$ -> (| K, Ex &Redress_f |) value$
  ; ** -> none$
  }
} ;;

eval <*A! *B! map_h> *Map_h <A> *Key delete @public -> <void> {
  Map_h Key remove >> ignore
} ;;

eval <*A! *B! map_h> *Map_h take @public -> <<A B tuple> maybe> {
  Map_h = mon: *Mon undress_f: *UF *** map_h$,
  Mon
    \ <<A B container> box.box_h> *Box -> <<A ex.existence <B v> tuple> maybe> {
      Box box.read = *D,
      D d_take = (| *KEV_, *D' |),
      Box D' box.write,
      KEV_
    }
    actu.run
  >> case {
  ; (| *K, *Ex, redress_f: *Redress_f *** v$ |) value$ -> (| K, Ex &Redress_f |) value$
  ; ** -> none$
  }
} ;;

eval <*A! *B! map_h> *Map_h clear @public -> <void> {
  Map_h = mon: *Mon undress_f: *UF *** map_h$,
  Mon
    \ <<A B container> box.box_h> *Box -> <void> {
      Box box.read = *D,
      D d_clear = *D',
      Box D' box.write >> ignore
    }
    actu.run
} ;;

eval <*A! *B! map_h> *Map_h <<A B tuple> list> *KVs add_list @public -> <void> {
  Map_h (KVs list.iter) add_iter
} ;;

eval <*A! *B! map_h> *Map_h <<A B tuple> iter> *Iter add_iter @public -> <void> {
  Iter next >> case {
  ; (| (| *K, *V |), *Iter' |) value$ -> Map_h K V add, Map_h Iter' &&
  ; ** ->
  }
} ;;

eval <*A! *B! map_h> *Map_h <A list> *Ks delete_list @public -> <void> {
  Map_h (Ks list.iter) delete_iter
} ;;

eval <*A! *B! map_h> *Map_h <A iter> *Iter delete_iter @public -> <void> {
  Iter next >> case {
  ; (| *K, *Iter' |) value$ -> Map_h K delete, Map_h Iter' &&
  ; ** ->
  }
} ;;


# -- data manipulation routines --

eval <*A! *B! container> *D d_lives -> <<<A ex.existence <B v> tuple> list> <A B container> tuple> {
  D [] (D map.clear) &\
      <A B container> *DD  # current
      <<A ex.existence <B v> tuple> list> *Ls  # result in reverse order
      <A B container> *DD2  # new
      -> <<<A ex.existence <B v> tuple> list> <A B container> tuple> {
    DD map.take >> case {
    ; (| (| *K, *V |), *DD' |) value$ ->
      (V weak_ref) ex.get >> case {
      ; *E value$ -> DD' [ (| K, E, V |) ; Ls ] (DD2 K V map.add) &&
      ; none$ -> DD' Ls DD2 &&
      }
    ; none$ -> (| Ls list.reverse, DD2 |)
    }
  }
} ;;

eval <*A! *B! container> *D <A> *Key d_get -> <<<A ex.existence <B v> tuple> maybe> <A B container> tuple> {
  D Key map.get >> case {
  ; (| *K, *V |) value$ ->
    (V weak_ref) ex.get >> case {
    ; *E value$ -> (| (| K, E, V |) value$, D |)
    ; none$ -> (| none$, D K map.delete |)
    }
  ; none$ -> (| none$, D |)
  }
} ;;

eval <*A! *B! container> *D <A> *Key <B> *Value <B ex.undress_f> *UF <<A B container> actu.box_monitor_h> *Mon d_add -> <A B container> {
    # add without duplication check
  Value &UF = (| *Ex, *Redress_f |),
  \ <ex.weak_ref> *Cleared -> <void> {
    Mon
      \ <<A B container> box.box_h> *BB -> <void> {
        BB box.read = *DD,
        DD Key Cleared d_purge = *DD',
        BB DD' box.write >> ignore
      }
      actu.run
  } = *Lis,
  Ex (Lis value$) ex.create_weak_ref = *W,
  D Key (weak_ref: W redress_f: Redress_f v$) map.add = *D',
} ;;

eval <*A! *B! container> *D <A> *Key d_remove -> <<<A ex.existence <B v> tuple> maybe> <A B container> tuple> {
  D Key map.remove >> case {
  ; (| *D', (| *K, *V |) value$ |) ->
    V weak_ref = *W,
    W ex.get >> case {
    ; *E value$ -> W ex.clear, (| (| K, E, V |) value$, D' |)
    ; none$ -> (| none$, D' |)
    }
  ; (| **, none$ |) -> (| none$, D |)
  }
} ;;

eval <*A! *B! container> *D <A> *Key <ex.weak_ref> *Weak_ref d_purge -> <A B container> {
  D Key map.assoc >> case {
  ; (weak_ref: Weak_ref *** v$) value$ -> D Key map.delete
  ; ** -> D  # replaced or purged
  }
} ;;

eval <*A! *B! container> *D d_take -> <<<A ex.existence <B v> tuple> maybe> <A B container> tuple> {
  D map.take >> case {
  ; (| (| *K, *V |), *D' |) value$ ->
    V weak_ref = *W,
    W ex.get >> case {
    ; *E value$ -> W ex.clear, (| (| K, E, V |) value$, D' |)
    ; none$ -> D' &&
    }
  ; none$ -> (| none$, D |)
  }
} ;;

eval <*A! *B! container> *D d_clear -> <A B container> {
  D map.clear
} ;;
