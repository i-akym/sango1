###########################################################################
# MIT License                                                             #
# Copyright (c) 2025 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.queue.feature" ;;

import "sango.list" -> list ;;
import "sango.util.queue" -> queue ;;

### feature

feature <*T> [ *A a'queue ] @public -> <T A queue.queue_fs> ;;

eval <*T[ *A a'queue ]> *FQueue f_to_generic_queue | to_generic_queue @public -> <A queue.queue> {
  FQueue (FQueue _feature_a'queue) queue.to_generic_queue
} ;;

eval <*T[ *A a'queue ]> *FQueue f_empty? | empty? @public -> <bool> {
  FQueue _feature_a'queue = *Queue_fs,
  FQueue Queue_fs queue.do_empty?
} ;;

eval <*T[ *A a'queue ]> *FQueue f_length | length @public -> <int> {
  FQueue _feature_a'queue = *Queue_fs,
  FQueue Queue_fs queue.do_length
} ;;

eval <*T[ *A a'queue ]> *FQueue <A> *Elem f_enqueue | enqueue @public -> <T> {
  FQueue _feature_a'queue = *Queue_fs,
  FQueue Queue_fs Elem queue.do_enqueue
} ;;

eval <*T[ *A a'queue ]> *FQueue f_head | head @public -> <A maybe> {
  FQueue _feature_a'queue = *Queue_fs,
  FQueue Queue_fs queue.do_head
} ;;

eval <*T[ *A a'queue ]> *FQueue f_dequeue | dequeue @public -> <<A T tuple> maybe> {
  FQueue _feature_a'queue = *Queue_fs,
  FQueue Queue_fs queue.do_dequeue
} ;;

eval <*T[ *A a'queue ]> *FQueue f_clear | clear @public -> <T> {
  FQueue _feature_a'queue = *Queue_fs,
  FQueue Queue_fs queue.do_clear
} ;;

eval <*T[ *A a'queue ]> *FQueue <A list> *Elems f_enqueue_list | enqueue_list @public -> <T> {
  FQueue (Elems list.iter) f_enqueue_iter
} ;;

eval <*T[ *A a'queue ]> *FQueue <A iter> *Iter f_enqueue_iter | enqueue_iter @public -> <T> {
  FQueue _feature_a'queue = *Queue_fs,
  FQueue Queue_fs Iter queue.do_enqueue_iter
} ;;

eval <*T[ *A a'queue ]> *FQueue f_iter | iter @public -> <A iter> {
  FQueue _feature_a'queue = *Queue_fs,
  FQueue Queue_fs queue.do_iter
} ;;
