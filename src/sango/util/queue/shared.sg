###########################################################################
# MIT License                                                             #
# Copyright (c) 2025 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module @alpha "sango.util.queue.shared" ;;

import "sango.list" -> list ;;

data <*A! shared_queue_h> @public :=
  extract_f: <<A iter> fun>
  empty?_f: <bool fun>
  length_f: <int fun>
  enqueue_f: <A void fun>
  head_f: <<A maybe> fun>
  dequeue_f: <<A maybe> fun>
  clear_f: <void fun>
  shared_queue_h$ ;;

eval <*A! shared_queue_h> *Queue_h extract @public -> <A iter> {
  &(Queue_h extract_f)
} ;;

eval <*A! shared_queue_h> *Queue_h empty? @public -> <bool> {
  &(Queue_h empty?_f)
} ;;

eval <*A! shared_queue_h> *Queue_h length @public -> <int> {
  &(Queue_h length_f)
} ;;

eval <*A! shared_queue_h> *Queue_h <A> *Elem enqueue @public -> <void> {
  Elem &(Queue_h enqueue_f)
} ;;

eval <*A! shared_queue_h> *Queue_h head @public -> <A maybe> {
  &(Queue_h head_f)
} ;;

eval <*A! shared_queue_h> *Queue_h dequeue @public -> <A maybe> {
  &(Queue_h dequeue_f)
} ;;

eval <*A! shared_queue_h> *Queue_h clear @public -> <void> {
  &(Queue_h clear_f)
} ;;

eval <*A! shared_queue_h> *Queue_h <A list> *Elems enqueue_list @public -> <void> {
  Queue_h (Elems list.iter) enqueue_iter
} ;;

eval <*A! shared_queue_h> *Queue_h <A iter> *Iter enqueue_iter @public -> <void> {
  Iter next >> case {
  ; (| *E, *Iter' |) value$ -> Queue_h E enqueue, Queue_h Iter' &&
  ; ** ->
  }
} ;;
