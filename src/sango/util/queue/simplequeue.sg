###########################################################################
# MIT License                                                             #
# Copyright (c) 2018 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.queue.simplequeue" ;;

import "sango.data" -> data ;;
import "sango.list" -> list ;;
import "sango.util.iter" -> iter ;;
import "sango.util.queue" -> queue ;;

extend <*A data.d1> :=
  in: <A list>
  out: <A list>
  simple_queue_d$ ;;

eval new_queue @public -> <*A queue.queue> {
  d: ([] [] simple_queue_d$)
    fs: queue_fs
    queue.queue$
} ;;

eval queue_fs -> <*A queue.queue_fs> {
  empty?_f: ^empty?
    length_f: ^length
    enqueue_f: ^enqueue
    head_f: ^head
    dequeue_f: ^dequeue
    clear_f: ^clear
    queue.queue_fs$
} ;;

eval <*A data.d1+> *Queue_d empty? -> <bool> {
  Queue_d = in: *In out: *Out simple_queue_d$,
  (| Out, In |) case {
  ; (| [], [] |) -> true$
  ; ** -> false$
  }
} ;;

eval <*A data.d1+> *Queue_d length -> <int> {
  Queue_d = in: *In out: *Out simple_queue_d$,
  (In list.length) (Out list.length) sum
} ;;

eval <*A data.d1+> *Queue_d <A> *Elem enqueue -> <A data.d1+> {
  Queue_d = in: *In out: *Out simple_queue_d$,
  [ Elem ; In ] Out simple_queue_d$
} ;;

eval <*A data.d1+> *Queue_d head -> <A maybe> {
  Queue_d = in: *In out: *Out simple_queue_d$,
  Out case {
  ; [ *Head ; ** ] -> Head value$
  ; ** -> In list.last
  }
} ;;

eval <*A data.d1+> *Queue_d dequeue -> <<A <A data.d1+> tuple> maybe> {
  Queue_d = in: *In out: *Out simple_queue_d$,
  (| Out, In |) case {
  ; (| [ *Head ; *Tail ], ** |) -> (| Head, In Tail simple_queue_d$ |) value$
  ; (| [], [] |) -> none$
  ; ** -> ([] (In list.reverse) simple_queue_d$) &&
  }
} ;;

eval <*A data.d1+> *Queue_d clear -> <A data.d1+> {
  [] [] simple_queue_d$
} ;;

