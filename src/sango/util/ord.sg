###########################################################################
# MIT License                                                             #
# Copyright (c) 2025 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module @alpha "sango.util.ord" ;;

### incarnation

data <*A ord_inc> @public :=
  d: <A>
  fs: <A ord_fs>
  ord_inc$
++ as_a'ord -> [ a'ord ]
++ as_a'eq -> [ a'eq ] ;;

eval <*T[ a'ord ]> *FOrd incarnate @public -> <T ord_inc> {
  d: FOrd
  fs: (FOrd _feature_a'ord)
  ord_inc$
} ;;

eval as_a'ord -> <<*A ord_inc> ord_fs> {
  compare_f: ^inc_compare
  eq?_f_: (^inc_eq? value$)
  lt?_f_: (^inc_lt? value$)
  le?_f_: (^inc_le? value$)
  gt?_f_: (^inc_gt? value$)
  ge?_f_: (^inc_ge? value$)
  hash_f: ^inc_hash
  ord_fs$
} ;;

eval as_a'eq -> <<*A ord_inc> eq_fs> {
  eq?_f: ^inc_eq?
  ne?_f_: none$
  hash_f: ^inc_hash
  eq_fs$
} ;;

eval <*A ord_inc> *X0 <A ord_inc> *X1 inc_compare | compare @public -> <ordering> {
  X0 = *D0 *Fs ord_inc$,
  X1 = *D1 ** ord_inc$,
  D0 D1 Fs ordcmp_compare
} ;;

eval <*A ord_inc> *X0 <A ord_inc> *X1 inc_eq? | eq? @public -> <bool> {
  X0 = *D0 *Fs ord_inc$,
  X1 = *D1 ** ord_inc$,
  D0 D1 Fs ordcmp_eq?
} ;;

eval <*A ord_inc> *X0 <A ord_inc> *X1 inc_lt? | lt? @public -> <bool> {
  X0 = *D0 *Fs ord_inc$,
  X1 = *D1 ** ord_inc$,
  D0 D1 Fs ordcmp_lt?
} ;;

eval <*A ord_inc> *X0 <A ord_inc> *X1 inc_le? | le? @public -> <bool> {
  X0 = *D0 *Fs ord_inc$,
  X1 = *D1 ** ord_inc$,
  D0 D1 Fs ordcmp_le?
} ;;

eval <*A ord_inc> *X0 <A ord_inc> *X1 inc_gt? | gt? @public -> <bool> {
  X0 = *D0 *Fs ord_inc$,
  X1 = *D1 ** ord_inc$,
  D0 D1 Fs ordcmp_gt?
} ;;

eval <*A ord_inc> *X0 <A ord_inc> *X1 inc_ge? | ge? @public -> <bool> {
  X0 = *D0 *Fs ord_inc$,
  X1 = *D1 ** ord_inc$,
  D0 D1 Fs ordcmp_ge?
} ;;

eval <*A ord_inc> *X inc_hash | hash @public -> <int> {
  X = *D *Fs ord_inc$,
  D &(Fs hash_f)
} ;;
