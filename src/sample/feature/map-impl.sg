###########################################################################
# MIT License                                                             #
# Copyright (c) 2023 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
import "feature.map" -> map ;;
import "sango.list" -> list ;;

data <*A *B map_impl> @opaque :=
  tab: <<A B tuple> list>
  map_impl$
++ as_a'map -> [ A B map.a'map ] ;;

extend <*T *A *B map.map_d> -> map_impl_d :=
  <A B map_impl> map_impl_d$ ;;

eval new_map @public -> <*A *B map_impl> {
  tab:[] map_impl$
} ;;

eval <*A *B map_impl> *MI as_a'map -> <<A B map_impl> A B map.map_fo> {
  d: (MI map_impl_d$) fs: map_fs rev_f: ^rev_f map.map_fo$
} ;;

eval map_fs -> <<*T *A *B map.map_d+> A B map.map_fs> {
  size_f: ^size
  assoc_f: ^assoc
  add_f: ^add
  map.map_fs$
} ;;

eval <<*A *B map_impl> A B map.map_d+> *D rev_f -> <A B map_impl> {
  D = *DD map_impl_d$,
  DD
} ;;

eval <*T *A *B map.map_d+> *MD size -> <int> {
  MD = *MI map_impl_d$,
  MI = *Tab map_impl$,
  Tab list.length
} ;;

eval <*T *A *B map.map_d+> *MD <A> *K assoc -> <B maybe> {
  MD = *MI map_impl_d$,
  MI = *Tab map_impl$,
  Tab &\
      <<A B tuple> list> *KVs
      -> <B maybe> {
    KVs case {
    ; [ (| K, *V |) ; *KVs' ] -> V value$
    ; [ ** ; *KVs' ] -> KVs' &&
    ; [] -> none$
    }
  }
} ;;

eval <*T *A *B map.map_d+> *MD <A> *K <B> *V add -> <T A B map.map_d+> {
  MD = *MI map_impl_d$,
  MI = *Tab map_impl$,
  Tab [] &\
      <<A B tuple> list> *KVs <<A B tuple> list> *Scanned
      -> <<A B tuple> list> {
    KVs case {
    ; [ (| K, ** |) ; *KVs' ] ->  # if already contained, replace it and return result
      ([ (| K, V |) ; KVs' ] Scanned list.append)
    ; [ *KV ; *KVs' ] ->  # if key does not match, skip it and check next
      KVs' [ KV ; Scanned ] &&
    ; [] ->  # if not contained, add as new and return result
      [ (| K, V |) ; Scanned ]
    }
  } = *Tab',
  (Tab' map_impl$) map_impl_d$
} ;;
