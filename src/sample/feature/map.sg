###########################################################################
# MIT License                                                             #
# Copyright (c) 2023 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "feature.map" ;;

feature <*T> [ *A *B a'map ] @public -> <T A B map_fs> ;;

data <*D *A *B map_fs> @public :=
  size_f: <D int fun>
  assoc_f: <D A <B maybe> fun>
  add_f: <D A B D fun>
  take_f: <D <<<A B tuple> D tuple> maybe> fun>
  map_fs$ ;;

eval <*T[ *A *B a'map ]> *FMap size @public -> <int> {
  FMap _feature_a'map = *Map_fs,
  FMap &(Map_fs size_f)
} ;;

eval <*T[ *A *B a'map ]> *FMap <A> *Key assoc @public -> <B maybe> {
  FMap _feature_a'map = *Map_fs,
  FMap Key &(Map_fs assoc_f)
} ;;

eval <*T[ *A *B a'map ]> *FMap <A> *Key <B> *Value add @public -> <T> {
  FMap _feature_a'map = *Map_fs,
  FMap Key Value &(Map_fs add_f)
} ;;

eval <*T[ *A *B a'map ]> *FMap take @public -> <<<A B tuple> T tuple> maybe> {
  FMap _feature_a'map = *Map_fs,
  FMap &(Map_fs take_f)
} ;;

# incarnation

data <*T *A *B map_inc> @protected :=
  org: <T>
  fo: <T A B map_fs>
  map_inc$
++ inc_a'col_impl -> [ <A B tuple> a'col ] ;;

eval <*T[ *A *B a'map ]> *FMap incarnate @public -> <T A B map_inc> {
  org: FMap
  fo: (FMap _feature_a'map)
  map_inc$
} ;;


eval inc_a'col_impl -> <<*T *A *B map_inc> <A B tuple> col_fs> {
  empty?_f_: none$
  size_f:
    \ <*TT *AA *BB map_inc> *I -> <int> {
      I = *ID *IFs map_inc$,
      ID &(IFs size_f)
    }
  iter_f:
    \ <*TT *AA *BB map_inc> *I -> <<AA BB tuple> iter> {
      I = *ID *IFs map_inc$,
      ID IFs do_iter
    }
  col_fs$
} ;;

eval <*D> *Z <D *A *B map_fs> *Fs do_iter | iter @public -> <<A B tuple> iter> {
  \\ <<A B tuple> iter_res> { Z Fs do_iter_next } iter$
} ;;

eval <*D> *Z <D *A *B map_fs> *Fs do_iter_next -> <<A B tuple> iter_res> {
  Z &(Fs take_f) >> case {
  ; (| *KV, *Z' |) value$ ->
    (| KV, \\ <<A B tuple> iter_res> { Z' Fs do_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;
