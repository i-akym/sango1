###########################################################################
# MIT License                                                             #
# Copyright (c) 2023 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "feature.map" ;;

feature <*T!> [ *A *B a'map ] @public -> <T A B map_fo> ;;

alias type <*A *B fd> @public := <A B _2+> ;;
alias type <*T *A *B fr> @public := <<A B fd> T fun> ;;
alias type <*T *A *B fx> @public := <<A B fd> <<A B fd> T fun> tuple> ;;

data <*T *A *B map_fo> @public :=
  fd: <A B fd>
  fr: <T A B fr>
  fs: <<T A B fx> A B map_fs>
  map_fo$ ;;

data <*D *A *B map_fs> @public :=
  size_f: <D int fun>
  assoc_f: <D A <B maybe> fun>
  add_f: <D A B D fun>
  map_fs$ ;;

eval <*T![ *A *B a'map ]> *FMap f_size | size @public -> <int> {
  FMap _feature_a'map = *Map_fo,
  Map_fo fo_size
} ;;

eval <*T! *A *B map_fo> *Map_fo fo_size | size @public -> <int> {
  Map_fo = fd: *D fr: *R fs: *Fs map_fo$,
  (| D, R |) &(Fs size_f)
} ;;

eval <*T![ *A *B a'map ]> *FMap <A> *Key f_assoc | assoc @public -> <B maybe> {
  FMap _feature_a'map = *Map_fo,
  Map_fo Key fo_assoc
} ;;

eval <*T! *A *B map_fo> *Map_fo <A> *Key fo_assoc | assoc @public -> <B maybe> {
  Map_fo = fd: *D fr: *R fs: *Fs map_fo$,
  (| D, R |) Key &(Fs assoc_f)
} ;;

eval <*T![ *A *B a'map ]> *FMap <A> *Key <B> *Value f_add | add @public -> <T> {
  FMap _feature_a'map = *Map_fo,
  Map_fo Key Value fo_add = *Map_fo',
  Map_fo' = fd: *D' fr: *R' fs: *Fs' map_fo$,
  D' &R'
} ;;

eval <*T! *A *B map_fo> *Map_fo <A> *Key <B> *Value fo_add | add @public -> <T A B map_fo> {
  Map_fo = fd: *D fr: *R fs: *Fs map_fo$,
  (| D, R |) Key Value &(Fs add_f) = (| *D', *R' |),
  fd: D' fr: R' fs: Fs map_fo$
} ;; 
