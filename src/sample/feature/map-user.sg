###########################################################################
# MIT License                                                             #
# Copyright (c) 2023 AKIYAMA Isao                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
import "feature.map" -> map ;;
import "feature.map-impl" -> map_impl ;;

eval _main_ -> <void> {
  map_impl.new_map >> f
} ;;

eval <*T[ int cstr map.a'map ]> *M f -> <void> {
  M map._feature_a'map = *M0,
  # M0 = {}
  M0 map.size = 0,
  M0 2 "two" map.add = *M1,  # M1 = { (2,"two") }
  M1 map.size = 1,
  M1 2 map.assoc = "two" value$,
  M1 3 map.assoc = none$,
  M1 3 "three" map.add = *M2,  # M2 = { (2,"two"), (3,"three") }
  M2 map.size = 2,
  M2 2 "zwei" map.add = *M3,  # M3 = { (2,"zwei"), (3,"three") }
  M3 map.size = 2,
  M3 2 map.assoc = "zwei" value$,
  void$
} ;;
