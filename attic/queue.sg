###########################################################################
# MIT License                                                             #
# Copyright (c) 2018 Isao Akiyama                                         #
#                                                                         #
# Permission is hereby granted, free of charge, to any person obtaining   #
# a copy of this software and associated documentation files (the         #
# "Software"), to deal in the Software without restriction, including     #
# without limitation the rights to use, copy, modify, merge, publish,     #
# distribute, sublicense, and/or sell copies of the Software, and to      #
# permit persons to whom the Software is furnished to do so, subject to   #
# the following conditions:                                               #
#                                                                         #
# The above copyright notice and this permission notice shall be          #
# included in all copies or substantial portions of the Software.         #
#                                                                         #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,         #
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF      #
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  #
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY    #
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,    #
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE       #
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                  #
###########################################################################
module "sango.util.queue" ;;

import "sango.list" -> list ;;
import "sango.util.iter" -> iter ;;

### definition of common-behavior object

alias type <*A d> @public := <A _1+> ;;

data <*A queue> @public :=
  d: <A d>
  fs: <<A d> A queue_fs>
  queue$
++ as_a'queue -> [ A a'queue ]
;;


### definition of function set

data <*D *A queue_fs> @public :=
  empty?_f: <D bool fun>
  length_f: <D int fun>
  enqueue_f: <D A D fun>
  head_f: <D <A maybe> fun>
  dequeue_f: <D <<A D tuple> maybe> fun>
  clear_f: <D D fun>
  queue_fs$ ;;


### definition of feature

feature <*T!> [ *A a'queue ] @public -> <T A queue_fo> ;;

alias type <*A fd> @public := <A _1+> ;;
alias type <*T *A fr> @public := <<A fd> T fun> ;;
alias type <*T *A fx> @public := <<A fd> <T A fr> tuple> ;;

data <*T *A queue_fo> @public :=
  fd: <A fd>
  fr: <T A fr>
  fs: <<T A fx> A queue_fs>
  queue_fo$ ;;


### implementation of common-behavior object

eval <*A queue> *Queue c_empty? | empty? @public -> <bool> {
  Queue = d: *D fs: *Fs queue$,
  D Fs _empty?
} ;;

eval <*A queue> *Queue c_length | length @public -> <int> {
  Queue = d: *D fs: *Fs queue$,
  D Fs _length
} ;;

eval <*A queue> *Queue <A> *Elem c_enqueue | enqueue @public -> <A queue> {
  Queue = d: *D fs: *Fs queue$,
  D Fs Elem _enqueue = *D',
  d: D' fs: Fs queue$
} ;;

eval <*A queue> *Queue c_head | head @public -> <A maybe> {
  Queue = d: *D fs: *Fs queue$,
  D Fs _head
} ;;

eval <*A queue> *Queue c_dequeue | dequeue @public -> <<A <A queue> tuple> maybe> {
  Queue = d: *D fs: *Fs queue$,
  D Fs _dequeue >> case {
  ; (| *Elem, *D' |) value$ -> (| Elem, d: D' fs: Fs queue$ |) value$
  ; ** -> none$
  }
} ;;

eval <*A queue> *Queue c_clear | clear @public -> <A queue> {
  Queue = d: *D fs: *Fs queue$,
  d: (D &(Fs clear_f)) :: Queue queue$
} ;;

eval <*A queue> *Queue <A list> *Elems c_enqueue_list | enqueue_list @public -> <A queue> {
  Queue (Elems list.iter) c_enqueue_iter
} ;;

eval <*A queue> *Queue <A iter> *Iter c_enqueue_iter | enqueue_iter @public -> <A queue> {
  Iter next >> case {
  ; (| *Elem, *Iter' |) value$ -> (Queue Elem c_enqueue) Iter' &&
  ; ** -> Queue
  }
} ;;

eval <*A queue> *Queue c_iter | iter @public -> <A iter> {
  \\ <A iter_res> { Queue c_iter_next } iter$
} ;;

eval <*A queue> *Queue c_iter_next -> <A iter_res> {
  Queue c_dequeue >> case {
  ; (| *Elem, *Queue' |) value$ ->
    (| Elem, \\ <A iter_res> { Queue' c_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;


### framework of faeture

eval <*T![ *A a'queue ]> *FQueue f_empty? | empty? @public -> <bool> {
  FQueue _feature_a'queue = *Queue_fo,
  Queue_fo fo_empty?
} ;;

eval <*T! *A queue_fo> *Queue_fo fo_empty? | empty? @public -> <bool> {
  Queue_fo = fd: *D fr: *R fs: *Fs queue_fo$,
  (| D, R |) Fs _empty?
} ;;

eval <*T![ *A a'queue ]> *FQueue f_length | length @public -> <int> {
  FQueue _feature_a'queue = *Queue_fo,
  Queue_fo fo_length
} ;;

eval <*T! *A queue_fo> *Queue_fo fo_length | length @public -> <int> {
  Queue_fo = fd: *D fr: *R fs: *Fs queue_fo$,
  (| D, R |) Fs _length
} ;;

eval <*T![ *A a'queue ]> *FQueue <A> *Elem f_enqueue | enqueue @public -> <T> {
  FQueue _feature_a'queue = *Queue_fo,
  Queue_fo Elem fo_enqueue = fd: *D' fr: *R' fs: *Fs' queue_fo$,
  D' &R'
} ;;

eval <*T! *A queue_fo> *Queue_fo <A> *Elem fo_enqueue | enqueue @public -> <T A queue_fo> {
  Queue_fo = fd: *D fr: *R fs: *Fs queue_fo$,
  (| D, R |) Fs Elem _enqueue = (| *D', *R' |),
  fd: D' fr: R' fs: Fs queue_fo$
} ;;

eval <*T![ *A a'queue ]> *FQueue f_head | head @public -> <A maybe> {
  FQueue _feature_a'queue = *Queue_fo,
  Queue_fo fo_head
} ;;

eval <*T! *A queue_fo> *Queue_fo fo_head | head @public -> <A maybe> {
  Queue_fo = fd: *D fr: *R fs: *Fs queue_fo$,
  (| D, R |) Fs _head
} ;;

eval <*T![ *A a'queue ]> *FQueue f_dequeue | dequeue @public -> <<A T tuple> maybe> {
  FQueue _feature_a'queue = *Queue_fo,
  Queue_fo fo_dequeue >> case {
  ; (| *Elem, fd: *D' fr: *R' fs: *Fs' queue_fo$ |) value$ -> (| Elem, D' &R' |) value$
  ; ** -> none$
  }
} ;;

eval <*T! *A queue_fo> *Queue_fo fo_dequeue | dequeue @public -> <<A <T A queue_fo> tuple> maybe> {
  Queue_fo = fd: *D fr: *R fs: *Fs queue_fo$,
  (| D, R |) Fs _dequeue >> case {
  ; (| *Elem, (| *D', *R' |) |) value$ -> (| Elem, fd: D' fr: R' fs: Fs queue_fo$ |) value$
  ; ** -> none$
  }
} ;;

eval <*T![ *A a'queue ]> *FQueue f_clear | clear @public -> <T> {
  FQueue _feature_a'queue = *Queue_fo,
  Queue_fo fo_clear = fd: *D' fr: *R' fs: *Fs' queue_fo$,
  D' &R'
} ;;

eval <*T! *A queue_fo> *Queue_fo fo_clear | clear @public -> <T A queue_fo> {
  Queue_fo = fd: *D fr: *R fs: *Fs queue_fo$,
  (| D, R |) Fs _clear = (| *D', *R' |),
  fd: D' fr: R' fs: Fs queue_fo$
} ;;

eval <*T![ *A a'queue ]> *FQueue <A list> *Elems f_enqueue_list | enqueue_list @public -> <T> {
  FQueue (Elems list.iter) f_enqueue_iter
} ;;

eval <*T! *A queue_fo> *Queue_fo <A list> *Elems fo_enqueue_list | enqueue_list @public -> <T A queue_fo> {
  Queue_fo (Elems list.iter) fo_enqueue_iter
} ;;

eval <*T![ *A a'queue ]> *FQueue <A iter> *Iter f_enqueue_iter | enqueue_iter @public -> <T> {
  FQueue _feature_a'queue = *Queue_fo,
  Queue_fo Iter fo_enqueue_iter = fd: *D' fr: *R' fs: *Fs' queue_fo$,
  D' &R'
} ;;

eval <*T! *A queue_fo> *Queue_fo <A iter> *Iter fo_enqueue_iter | enqueue_iter @public -> <T A queue_fo> {
  Iter next >> case {
  ; (| *Elem, *Iter' |) value$ -> (Queue_fo Elem fo_enqueue) Iter' &&
  ; ** -> Queue_fo
  }
} ;;

eval <*T![ *A a'queue ]> *FQueue f_iter | iter @public -> <A iter> {
  FQueue _feature_a'queue = *Queue_fo,
  Queue_fo fo_iter
} ;;

eval <*T! *A queue_fo> *Queue_fo fo_iter | iter @public -> <A iter> {
  \\ <A iter_res> { Queue_fo fo_iter_next } iter$
} ;;

eval <*T! *A queue_fo> *Queue_fo fo_iter_next -> <A iter_res> {
  Queue_fo fo_dequeue >> case {
  ; (| *Elem, *Queue_fo' |) value$ ->
    (| Elem, \\ <A iter_res> { Queue_fo' fo_iter_next } iter$ |) value$
  ; ** -> none$
  }
} ;;


### feature implementation of common-behavior object

eval <*A queue> *Queue as_a'queue -> <<A queue> A queue_fo> {
  Queue cfd$ = *FD,
  \ <A fd> *X -> <A queue> {
    X = *Q cfd$, Q
  } = *FR,
  fd: FD fr: FR fs: cqueue_fo_fs queue_fo$
} ;;

extend <*A _1> -> cfd := <A queue> cfd$ ;;

eval cqueue_fo_fs -> <<<*A queue> A fx> A queue_fs> {
  empty?_f: ^cfo_empty?
  length_f: ^cfo_length
  enqueue_f: ^cfo_enqueue
  head_f: ^cfo_head
  dequeue_f: ^cfo_dequeue
  clear_f: ^cfo_clear
  queue_fs$
} ;;

eval <*T *A fx> *Fx cfo_empty? -> <bool> {
  Fx = (| *Queue cfd$, *R |),
  Queue c_empty?
} ;;

eval <*T *A fx> *Fx cfo_length -> <int> {
  Fx = (| *Queue cfd$, *R |),
  Queue c_length
} ;;

eval <*T *A fx> *Fx <A> *Elem cfo_enqueue -> <T A fx> {
  Fx = (| *Queue cfd$, *R |),
  Queue Elem c_enqueue = *Queue',
  (| Queue' cfd$, R |)
} ;;

eval <*T *A fx> *Fx cfo_head -> <A maybe> {
  Fx = (| *Queue cfd$, *R |),
  Queue c_head
} ;;

eval <*T *A fx> *Fx cfo_dequeue -> <<A <T A fx> tuple> maybe> {
  Fx = (| *Queue cfd$, *R |),
  Queue c_dequeue >> case {
  ; (| *Elem, *Queue' |) value$ -> (| Elem, (| Queue' cfd$, R|) |) value$
  ; ** -> none$
  }
} ;;

eval <*T *A fx> *Fx cfo_clear -> <T A fx> {
  Fx = (| *Queue cfd$, *R |),
  Queue c_clear = *Queue',
  (| Queue' cfd$, R |)
} ;;


### subroutines

eval <*D> *DD <D *A queue_fs> *Fs _empty? -> <bool> {
  DD &(Fs empty?_f)
} ;;

eval <*D> *DD <D *A queue_fs> *Fs _length -> <int> {
  DD &(Fs length_f)
} ;;

eval <*D> *DD <D *A queue_fs> *Fs <A> *Elem _enqueue -> <D> {
  DD Elem &(Fs enqueue_f)
} ;;

eval <*D> *DD <D *A queue_fs> *Fs _head -> <A maybe> {
  DD &(Fs head_f)
} ;;

eval <*D> *DD <D *A queue_fs> *Fs _dequeue -> <<A D tuple> maybe> {
  DD &(Fs dequeue_f)
} ;;

eval <*D> *DD <D *A queue_fs> *Fs _clear -> <D> {
  DD &(Fs clear_f)
} ;;
